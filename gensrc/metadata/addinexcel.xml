<Addin name='Excel'>

<copyright>
 Copyright (C) 2004, 2005, 2006 Eric Ehlers
</copyright>

<Buffers>
    <Buffer name='bufferFunction' fileName='stub.excel.function'/>
    <Buffer name='bufferIncludes' fileName='stub.excel.includes' local='true'/>
    <Buffer name='bufferLoop' fileName='stub.excel.loop'/>
    <Buffer name='bufferNumFunc' fileName='stub.excel.numfunc'/>
    <Buffer name='bufferRegisterCall' fileName='stub.excel.register.call'/>
    <Buffer name='bufferRegisterFile' fileName='stub.excel.register.file'/>
    <Buffer name='bufferRegisterFunction' fileName='stub.excel.register.function'/>
</Buffers>

<Rules>

<Rule name='functionDeclaration' indent='2' delimiter=',&#10;'>
    <Wrap>&#10;%s</Wrap>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
            </tensorRanks>
            <DataTypes>
                <default>%(indent)sOPER *%(name)s</default>
                <any>%(indent)sOPER *%(name)s</any>
                <reference>%(indent)sXLOPER *%(name)s</reference>
                <other>%(indent)s%(type)s *%(name)s</other>
                <string>
                    <DataTypes>
                        <libraryClass>
                            <DataValues>
                                <DataValue name='Quote'>%(indent)sOPER *%(name)s</DataValue>
                                <DataValue name='other'>%(indent)schar *%(name)s</DataValue>
                            </DataValues>
                        </libraryClass>
                        <libToHandle>
                            <DataValues>
                                <DataValue name='Quote'>%(indent)sOPER *%(name)s</DataValue>
                                <DataValue name='other'>%(indent)schar *%(name)s</DataValue>
                            </DataValues>
                        </libToHandle>
                        <other>%(indent)schar *%(name)s</other>
                    </DataTypes>
                </string>
                <long>
                    <DataTypes>
                        <libraryType>
                            <DataValues>
                                <DataValue name='QuantLib::Date'>%(indent)sOPER *%(name)s</DataValue>
                                <DataValue name='other'>%(indent)s%(type)s *%(name)s</DataValue>
                            </DataValues>
                        </libraryType>
                        <other>%(indent)s%(type)s *%(name)s</other>
                    </DataTypes>
                </long>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>vector</tensorRank>
            </tensorRanks>
            <DataTypes>
                <loop>%(indent)sOPER *%(name)s</loop>
                <default>%(indent)sOPER *%(name)s</default>
                <long>
                    <DataTypes>
                        <libraryType>
                            <DataValues>
                                <DataValue name='QuantLib::Date'>%(indent)sOPER *%(name)s</DataValue>
                                <DataValue name='other'>%(indent)sOPER *%(name)s</DataValue>
                            </DataValues>
                        </libraryType>
                        <other>%(indent)sOPER *%(name)s</other>
                    </DataTypes>
                </long>
                <double>%(indent)sOPER *%(name)s</double>
                <other>%(indent)sOPER *%(name)s</other>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <loop>%(indent)sOPER *%(name)s</loop>
                <default>%(indent)sOPER *%(name)s</default>
                <long>
                    <DataTypes>
                        <libraryType>
                            <DataValues>
                                <DataValue name='QuantLib::Date'>%(indent)sOPER *%(name)s</DataValue>
                                <DataValue name='other'>%(indent)sFP *%(name)s</DataValue>
                            </DataValues>
                        </libraryType>
                        <other>%(indent)sFP *%(name)s</other>
                    </DataTypes>
                </long>
                <double>%(indent)sFP *%(name)s</double>
                <other>%(indent)sOPER *%(name)s</other>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='functionReturnType'>
    <Wrap>&#10;%s</Wrap>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
            </tensorRanks>
            <DataTypes>
                <default>OPER *</default>
                <bool>short int *</bool>
                <string>char *</string>
                <any>OPER *</any>
                <void>bool *</void>
                <other>%(type)s *</other>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>vector</tensorRank>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <other>OPER *</other>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='xlRegisterParam'>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
            </tensorRanks>
            <DataTypes>
                <default>P</default>
                <long>
                    <DataTypes>
                        <libraryType>
                            <DataValues>
                                <DataValue name='QuantLib::Date'>P</DataValue>
                                <DataValue name='other'>N</DataValue>
                            </DataValues>
                        </libraryType>
                        <other>N</other>
                    </DataTypes>
                </long>
                <string>
                    <DataTypes>
                        <libToHandle>
                            <DataValues>
                                <DataValue name='Quote'>P</DataValue>
                                <DataValue name='other'>C</DataValue>
                            </DataValues>
                        </libToHandle>
                        <libraryClass>
                            <DataValues>
                                <DataValue name='Quote'>P</DataValue>
                                <DataValue name='other'>C</DataValue>
                            </DataValues>
                        </libraryClass>
                        <other>C</other>
                    </DataTypes>
                </string>
                <double>E</double>
                <bool>L</bool>
                <any>P</any>
                <reference>R</reference>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>vector</tensorRank>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <loop>P</loop>
                <default>P</default>
                <long>
                    <DataTypes>
                        <libraryType>
                            <DataValues>
                                <DataValue name='QuantLib::Date'>P</DataValue>
                                <DataValue name='other'>K</DataValue>
                            </DataValues>
                        </libraryType>
                        <other>K</other>
                    </DataTypes>
                </long>
                <double>K</double>
                <other>P</other>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='xlRegisterReturn'>
    <Wrap>&#10;%s</Wrap>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
            </tensorRanks>
            <DataTypes>
                <long>N</long>
                <double>E</double>
                <bool>L</bool>
                <string>C</string>
                <any>P</any>
                <void>L</void>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>vector</tensorRank>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <other>P</other>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='parameterList' delimiter=','>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
                <tensorRank>vector</tensorRank>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <other>%(name)s</other>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='registerParameters' indent='3' delimiter=',&#10;' padLastParamDesc='True'>
    <Wrap>&#10;            // parameter descriptions&#10;%s</Wrap>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
                <tensorRank>vector</tensorRank>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <other>%(indent)sTempStrNoSize("\x%(descLen)02X""%(description)s")</other>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='cppConversions' indent='2' checkParameterIgnore='true' delimiter='&#10;'>
    <Wrap codeID='wrap1'/>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
            </tensorRanks>
            <DataTypes>
                <default>
                    <DataTypes>
                        <enumeration/>
                        <libraryType/>
                        <string codeID='code1'/>
                        <other codeID='code3'/>
                    </DataTypes>
                </default>
                <other/>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>vector</tensorRank>
            </tensorRanks>
            <DataTypes>
                <loop/>
                <default codeID='code_cpp_vec_1'/>
                <long>
                    <DataTypes>
                        <libraryType>
                            <DataValues>
                                <DataValue name='QuantLib::Date' codeID='code_cpp_vec_1'/>
                                <DataValue name='other' codeID='code_cpp_vec_2'/>
                            </DataValues>
                        </libraryType>
                        <other codeID='code_cpp_vec_2'/>
                    </DataTypes>
                </long>
                <double codeID='code_cpp_vec_3'/>
                <string codeID='code_cpp_vec_4'/>
                <any codeID='code_cpp_vec_5'/>
                <other codeID='code_cpp_vec_1'/>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <loop/>
                <default codeID='code_cpp_mat_1'/>
                <long codeID='code_cpp_mat_2'/>
                <double codeID='code_cpp_mat_3'/>
                <string codeID='code_cpp_mat_4'/>
                <any codeID='code_cpp_mat_5'/>
                <other codeID='code_cpp_mat_1'/>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='libraryConversions' indent='2' checkParameterIgnore='true' delimiter='&#10;' prefix='&#10;'>
    <Wrap codeID='wrap2'/>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
            </tensorRanks>
            <DataTypes>
                <libraryType>
                    <DataTypes>
                        <long>
                            <DataTypes>
                                <default>
                                    <DataTypes>
                                        <libraryType>
                                            <DataValues>
                                                <DataValue name='QuantLib::Date' codeID='code9c'/>
                                                <DataValue name='other' codeID='code9b'/>
                                            </DataValues>
                                        </libraryType>
                                    </DataTypes>
                                </default>
                                <other>
                                    <DataTypes>
                                        <libraryType>
                                            <DataValues>
                                                <DataValue name='QuantLib::Date' codeID='code8c'/>
                                                <DataValue name='other' codeID='code8b'/>
                                            </DataValues>
                                        </libraryType>
                                    </DataTypes>
                                </other>
                            </DataTypes>
                        </long>
                        <string>
                            <DataTypes>
                                <default codeID='code9a'/>
                                <other codeID='code8a'/>
                            </DataTypes>
                        </string>
                        <other>
                            <DataTypes>
                                <default codeID='code9b'/>
                                <other codeID='code8b'/>
                            </DataTypes>
                        </other>
                    </DataTypes>
                </libraryType>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>vector</tensorRank>
            </tensorRanks>
            <DataTypes>
                <libraryType>
                    <DataValues>
                        <DataValue name='QuantLib::Array' codeID='code10a'/>
                        <DataValue name='QuantLib::Matrix' codeID='code10a'/>
                        <DataValue name='QuantLib::Date' codeID='code10c'/>
                    </DataValues>
                    <DataTypes>
                        <default codeID='code11'/>
                        <loop codeID='code11'/>
                        <string codeID='code11'/>
                        <other codeID='code11b'/>
                    </DataTypes>
                </libraryType>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <libraryType>
                    <DataValues>
                        <DataValue name='QuantLib::Array' codeID='code10b'/>
                        <DataValue name='QuantLib::Matrix' codeID='code10b'/>
                        <DataValue name='other' codeID='code12'/>
                    </DataValues>
                </libraryType>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='enumConversions' indent='2' checkParameterIgnore='true' delimiter='&#10;'>
    <Wrap codeID='wrap3'/>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
            </tensorRanks>
            <DataTypes>
                <enumeration>
                    <DataTypes>
                        <default codeID='code13'/>
                        <string codeID='code14'/>
                    </DataTypes>
                </enumeration>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>vector</tensorRank>
            </tensorRanks>
            <DataTypes>
                <enumeration>
                    <DataTypes>
                        <string codeID='code15'/>
                    </DataTypes>
                </enumeration>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='objectConversions' indent='2' delimiter='&#10;'>
    <Wrap codeID='wrap4'/>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
            </tensorRanks>
            <DataTypes>
                <object codeID='code17'/>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>vector</tensorRank>
            </tensorRanks>
            <DataTypes>
                <object codeID='code17b'/>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='referenceConversions' indent='2' delimiter='&#10;'>
    <Wrap codeID='wrap5'/>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
            </tensorRanks>
            <DataTypes>
                <libraryClass>
                    <DataTypes>
                        <default codeID='code18b'/>
                        <other>
                            <DataTypes>
                                <libraryClass>
                                    <DataValues>
                                        <DataValue name='Index' codeID='code19a'/>
                                        <DataValue name='Xibor' codeID='code19a'/>
                                        <DataValue name='SwapIndex' codeID='code19a'/>
                                        <DataValue name='InterestRateIndex' codeID='code19a'/>
                                        <DataValue name='IborIndex' codeID='code19a'/>
                                        <DataValue name='Quote' codeID='code21c'/>
                                        <DataValue name='other' codeID='code18a'/>
                                    </DataValues>
                                </libraryClass>
                            </DataTypes>
                        </other>
                    </DataTypes>
                </libraryClass>
                <libToHandle>
                    <DataValues>
                        <DataValue name='Quote' codeID='code20b'/>
                        <DataValue name='other' codeID='code20a'/>
                    </DataValues>
                </libToHandle>
                <handleToLib>
                    <DataValues>
                        <DataValue name='TermStructure' codeID='code21b'/>
                        <DataValue name='other' codeID='code21a'/>
                    </DataValues>
                </handleToLib>
                <underlyingClass codeID='code22'/>
                <underlyingClassNonconst codeID='code23'/>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>vector</tensorRank>
            </tensorRanks>
            <DataTypes>
                <libraryClass>
                    <DataValues>
                        <DataValue name='Index' codeID='code19b'/>
                        <DataValue name='Xibor' codeID='code19b'/>
                        <DataValue name='SwapIndex' codeID='code19b'/>
                        <DataValue name='InterestRateIndex' codeID='code19b'/>
                        <DataValue name='IborIndex' codeID='code19b'/>
                        <DataValue name='other' codeID='code19c'/>
                    </DataValues>
                </libraryClass>
                <libToHandle>
                    <DataValues>
                        <DataValue name='Quote' codeID='code19d'/>
                        <DataValue name='other' codeID='code19c'/>
                    </DataValues>
                </libToHandle>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <libToHandle codeID='code70'/>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='libraryReturnType'>
    <Wrap>&#10;%s</Wrap>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
            </tensorRanks>
            <DataTypes>
                <libraryType>%(libraryType)s returnValue = </libraryType>
                <enumeration>%(enumeration)s returnValue = </enumeration>
                <bool>static short int returnValue;&#10;        returnValue = </bool>
                <long>static long returnValue;&#10;        returnValue = </long>
                <double>static double returnValue;&#10;        returnValue = </double>
                <string>std::string returnValue = </string>
                <void>static bool returnValue = true;&#10;        </void>
                <any>boost::any returnValue = </any>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>vector</tensorRank>
            </tensorRanks>
            <DataTypes>
                <libraryType>
                    <DataValues>
                        <DataValue name='QuantLib::Array'>%(libraryType)s returnValue = </DataValue>
                        <DataValue name='QuantLib::Matrix'>%(libraryType)s returnValue = </DataValue>
                        <DataValue name='other'>std::vector&lt;%(libraryType)s&gt; returnValue = </DataValue>
                    </DataValues>
                </libraryType>
                <string>std::vector&lt;std::string&gt; returnValue = </string>
                <any>std::vector&lt;boost::any&gt; returnValue = </any>
                <other>std::vector&lt;%(type)s&gt; returnValue = </other>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <libraryType>
                    <DataValues>
                        <DataValue name='QuantLib::Array'>%(libraryType)s returnValue = </DataValue>
                        <DataValue name='QuantLib::Matrix'>%(libraryType)s returnValue = </DataValue>
                        <DataValue name='other' codeID='code16b'/>
                    </DataValues>
                </libraryType>
                <string codeID='code16a'/>
                <any codeID='code16c'/>
                <other codeID='code16b'/>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='libraryCall' checkParameterIgnore='true' checkSkipFirst='true' indent='3' delimiter=',&#10;'>
    <Wrap>&#10;%s</Wrap>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
            </tensorRanks>
            <DataTypes>
                <libraryType>%(indent)s%(name)sLib</libraryType>
                <libraryClass>%(indent)s%(name)sLibObj</libraryClass>
                <libToHandle>%(indent)s%(name)sLibObj</libToHandle>
                <handleToLib>%(indent)s%(name)sLibObj</handleToLib>
                <underlyingClass>%(indent)s%(name)sLibObj</underlyingClass>
                <underlyingClassNonconst>%(indent)s%(name)sLibObj</underlyingClassNonconst>
                <object>%(indent)s%(name)sObj</object>
                <enumeration>%(indent)s%(name)sEnum</enumeration>
                <default>%(indent)s%(name)sCpp</default>
                <long>%(indent)s*%(name)s</long>
                <double>%(indent)s*%(name)s</double>
                <bool>%(indent)s*%(name)s</bool>
                <any>%(indent)s%(name)sCpp</any>
                <other>%(indent)s%(name)s</other>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>vector</tensorRank>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <libToHandle>%(indent)s%(name)sLibObj</libToHandle>
                <libraryType>
                    <DataTypes>
                        <vectorIterator>
                            <DataValues>
                                <DataValue name='begin'>%(indent)s%(name)sLib.begin()</DataValue>
                                <DataValue name='end'>%(indent)s%(name)sLib.end()</DataValue>
                                <DataValue name='beginAndEnd' codeID='code41'/>
                            </DataValues>
                        </vectorIterator>
                        <other>%(indent)s%(name)sLib</other>
                    </DataTypes>
                </libraryType>
                <libraryClass>%(indent)s%(name)sLibObj</libraryClass>
                <object>%(indent)s%(name)sObj</object>
                <enumeration>%(indent)s%(name)sEnum</enumeration>
                <vectorIterator>
                    <DataValues>
                        <DataValue name='begin'>%(indent)s%(name)sCpp.begin()</DataValue>
                        <DataValue name='end'>%(indent)s%(name)sCpp.end()</DataValue>
                        <DataValue name='beginAndEnd' codeID='code42'/>
                    </DataValues>
                </vectorIterator>
                <other>%(indent)s%(name)sCpp</other>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='voCall' checkParameterIgnore='true' indent='3' delimiter=',&#10;'>
    <Wrap>&#10;%s</Wrap>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
            </tensorRanks>
            <DataTypes>
                <other>%(indent)s*%(name)s</other>
                <default>
                    <DataTypes>
                        <string>%(indent)s""</string>
                        <other>%(indent)s0</other>
                    </DataTypes>
                </default>
                <string>
                    <DataTypes>
                        <libraryClass>
                            <DataValues>
                                <DataValue name='Quote'>%(indent)s""</DataValue>
                                <DataValue name='other'>%(indent)s%(name)s</DataValue>
                            </DataValues>
                        </libraryClass>
                        <libToHandle>
                            <DataValues>
                                <DataValue name='Quote'>%(indent)s""</DataValue>
                                <DataValue name='other'>%(indent)s%(name)s</DataValue>
                            </DataValues>
                        </libToHandle>
                        <other>%(indent)s%(name)s</other>
                    </DataTypes>
                </string>
                <long>
                    <DataTypes>
                        <libraryType>
                            <DataValues>
                                <DataValue name='QuantLib::Date'>%(indent)s0</DataValue>
                                <DataValue name='other'>%(indent)s*%(name)s</DataValue>
                            </DataValues>
                        </libraryType>
                        <other>%(indent)s*%(name)s</other>
                    </DataTypes>
                </long>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>vector</tensorRank>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <other>%(indent)s%(name)sCpp</other>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='returnConversion' indent='2'>
    <Wrap codeID='wrap6'/>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
            </tensorRanks>
            <DataTypes>
                <loop codeID='code29'/>
                <libraryType>
                    <DataTypes>
                        <string codeID='code24'/>
                        <other codeID='code25'/>
                    </DataTypes>
                </libraryType>
                <enumeration codeID='code26'/>
                <string codeID='code27'/>
                <any codeID='code28'/>
                <other codeID='code29'/>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>vector</tensorRank>
            </tensorRanks>
            <DataTypes>
                <loop codeID='code29'/>
                <libraryType>
                    <DataValues>
                        <DataValue name='QuantLib::Array' codeID='code31'/>
                        <DataValue name='QuantLib::Matrix' codeID='code31'/>
                    </DataValues>
                    <DataTypes>
                        <string codeID='code33'/>
                        <other codeID='code32'/>
                    </DataTypes>
                </libraryType>
                <other codeID='code34'/>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <loop codeID='code29'/>
                <other codeID='code36'/>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='loopInputs' indent='4' delimiter=',&#10;' checkParameterIgnore='true' checkSkipFirst='true'>
    <Wrap>&#10;%s</Wrap>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
            </tensorRanks>
            <DataTypes>
                <libraryType>%(indent)s%(name)sLib</libraryType>
                <enumeration>%(indent)s%(name)sEnum</enumeration>
                <default>%(indent)s%(name)sCpp</default>
                <bool>%(indent)s*%(name)s</bool>
                <double>%(indent)s*%(name)s</double>
                <string>%(indent)sstd::string(%(name)s)</string>
                <other>%(indent)s%(name)s</other>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>vector</tensorRank>
            </tensorRanks>
            <DataTypes>
                <loop>%(indent)s_1</loop>
                <other>%(indent)s%(name)s</other>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <other>%(indent)s%(name)s</other>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='loopDatatype' delimiter='&#10;'>
    <Wrap>&#10;%s</Wrap>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
                <tensorRank>vector</tensorRank>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <libraryType>%(libraryType)s</libraryType>
                <other>%(type)s</other>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='loopReturnType'>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
                <tensorRank>vector</tensorRank>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <libraryType>%(libraryType)s</libraryType>
                <enumeration>%(enumeration)s</enumeration>
                <string>std::string</string>
                <other>%(type)s</other>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

</Rules>

</Addin>

