<Addin name='Loop'>

<copyright>
 Copyright (C) 2006 Eric Ehlers
</copyright>

<Buffers>
    <Buffer name='bufferBind' fileName='stub.loop.bind'/>
</Buffers>

<Rules>

<Rule name='inputTypes1' indent='5' delimiter=',&#10;' checkParameterIgnore='true' checkSkipFirst='true'>
    <Wrap>&#10;%s</Wrap>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
            </tensorRanks>
            <DataTypes>
                <libraryType>
                    <DataValues>
                        <DataValue name='const'>%(indent)sconst %(libraryType)s&amp;</DataValue>
                        <DataValue name='other'>%(indent)s%(libraryType)s</DataValue>
                    </DataValues>
                </libraryType>
                <enumeration>
                    <DataValues>
                        <DataValue name='const'>%(indent)sconst %(enumeration)s&amp;</DataValue>
                        <DataValue name='other'>%(indent)s%(enumeration)s</DataValue>
                    </DataValues>
                </enumeration>
                <string>%(indent)sconst std::string&amp;</string>
                <other>
                    <DataValues>
                        <DataValue name='const'>%(indent)sconst %(type)s&amp;</DataValue>
                        <DataValue name='other'>%(indent)s%(type)s</DataValue>
                    </DataValues>
                </other>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>vector</tensorRank>
            </tensorRanks>
            <DataTypes>
                <loop>
                    <DataTypes>
                        <libraryType>%(indent)sconst %(libraryType)s&amp;</libraryType>
                        <long>%(indent)sint</long>
                        <!--string>%(indent)sstd::string</string-->
                        <string>
                            <DataValues>
                                <DataValue name='const'>%(indent)sconst std::string&amp;</DataValue>
                                <DataValue name='other'>%(indent)sstd::string</DataValue>
                            </DataValues>
                        </string>
                        <other>
                            <DataValues>
                                <DataValue name='const'>%(indent)sconst %(type)s&amp;</DataValue>
                                <DataValue name='other'>%(indent)s%(type)s</DataValue>
                            </DataValues>
                        </other>
                    </DataTypes>
                </loop>
                <string>%(indent)sconst std::vector&lt;std::string&gt;&amp; %(name)s</string>
                <any>%(indent)sconst std::vector&lt;boost::any&gt;&amp; %(name)s</any>
                <other>%(indent)sconst std::vector&lt;%(type)s&gt;&amp; %(name)s</other>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <string>%(indent)sconst std::vector&lt;std::vector&lt;std::string&gt; &gt;&amp; %(name)s</string>
                <any>%(indent)sconst std::vector&lt;std::vector &lt;boost::any&gt; &gt;&amp; %(name)s</any>
                <other>%(indent)sconst std::vector&lt;std::vector &lt;%(type)s&gt; &gt;&amp; %(name)s</other>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='inputTypes2' indent='5' delimiter=',&#10;' checkParameterIgnore='true' checkSkipFirst='true'>
    <Wrap>&#10;%s</Wrap>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
            </tensorRanks>
            <DataTypes>
                <libraryType>%(indent)sboost::_bi::value&lt;%(libraryType)s&gt;</libraryType>
                <enumeration>%(indent)sboost::_bi::value&lt;%(enumeration)s&gt;</enumeration>
                <string>%(indent)sboost::_bi::value&lt;std::string&gt;</string>
                <other>%(indent)sboost::_bi::value&lt;%(type)s&gt;</other>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>vector</tensorRank>
            </tensorRanks>
            <DataTypes>
                <loop>%(indent)sboost::arg&lt;1&gt;</loop>
                <string>%(indent)sconst std::vector&lt;std::string&gt;&amp; %(name)s</string>
                <any>%(indent)sconst std::vector&lt;boost::any&gt;&amp; %(name)s</any>
                <other>%(indent)sconst std::vector&lt;%(type)s&gt;&amp; %(name)s</other>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <string>%(indent)sconst std::vector&lt;std::vector&lt;std::string&gt; &gt;&amp; %(name)s</string>
                <any>%(indent)sconst std::vector&lt;std::vector &lt;boost::any&gt; &gt;&amp; %(name)s</any>
                <other>%(indent)sconst std::vector&lt;std::vector &lt;%(type)s&gt; &gt;&amp; %(name)s</other>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='inputTypes3' indent='5' delimiter=',&#10;' checkParameterIgnore='true' checkSkipFirst='true'>
    <Wrap>&#10;%s</Wrap>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
            </tensorRanks>
            <DataTypes>
                <libraryType>
                    <DataValues>
                        <DataValue name='const'>%(indent)s%(libraryType)s const&amp;</DataValue>
                        <DataValue name='other'>%(indent)s%(libraryType)s</DataValue>
                    </DataValues>
                </libraryType>
                <enumeration>
                    <DataValues>
                        <DataValue name='const'>%(indent)s%(enumeration)s const&amp;</DataValue>
                        <DataValue name='other'>%(indent)s%(enumeration)s</DataValue>
                    </DataValues>
                </enumeration>
                <string>%(indent)sstd::string const&amp;</string>
                <other>
                    <DataValues>
                        <DataValue name='const'>%(indent)s%(type)s const&amp;</DataValue>
                        <DataValue name='other'>%(indent)s%(type)s</DataValue>
                    </DataValues>
                </other>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>vector</tensorRank>
            </tensorRanks>
            <DataTypes>
                <loop>
                    <DataTypes>
                        <libraryType>%(indent)s%(libraryType)s const&amp;</libraryType>
                        <long>%(indent)sint</long>
                        <!--string>%(indent)sstd::string</string-->
                        <string>
                            <DataValues>
                                <DataValue name='const'>%(indent)sconst std::string&amp;</DataValue>
                                <DataValue name='other'>%(indent)sstd::string</DataValue>
                            </DataValues>
                        </string>
                        <other>
                            <DataValues>
                                <DataValue name='const'>%(indent)s%(type)s const&amp;</DataValue>
                                <DataValue name='other'>%(indent)s%(type)s</DataValue>
                            </DataValues>
                        </other>
                    </DataTypes>
                </loop>
                <string>%(indent)sconst std::vector&lt;std::string&gt;&amp; %(name)s</string>
                <any>%(indent)sconst std::vector&lt;boost::any&gt;&amp; %(name)s</any>
                <other>%(indent)sconst std::vector&lt;%(type)s&gt;&amp; %(name)s</other>
            </DataTypes>
        </SubRule>
        <SubRule>
            <tensorRanks>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <string>%(indent)sconst std::vector&lt;std::vector&lt;std::string&gt; &gt;&amp; %(name)s</string>
                <any>%(indent)sconst std::vector&lt;std::vector &lt;boost::any&gt; &gt;&amp; %(name)s</any>
                <other>%(indent)sconst std::vector&lt;std::vector &lt;%(type)s&gt; &gt;&amp; %(name)s</other>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

<Rule name='loopDatatype'>
    <Wrap>&#10;%s</Wrap>
    <SubRules>
        <SubRule>
            <tensorRanks>
                <tensorRank>scalar</tensorRank>
                <tensorRank>vector</tensorRank>
                <tensorRank>matrix</tensorRank>
            </tensorRanks>
            <DataTypes>
                <string>std::string</string>
                <libraryType>%(libraryType)s</libraryType>
                <enumeration>%(enumeration)s</enumeration>
                <other>%(type)s</other>
            </DataTypes>
        </SubRule>
    </SubRules>
</Rule>

</Rules>

</Addin>

