
"""
 Copyright (C) 2005, 2006, 2007 Eric Ehlers
 Copyright (C) 2005 Plamen Neykov
 Copyright (C) 2005 Aurelien Chanudet

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software: you can redistribute it and/or modify it
 under the terms of the QuantLib license.  You should have received a
 copy of the license along with this program; if not, please email
 <quantlib-dev@lists.sf.net>. The license is also available online at
 <http://quantlib.org/license.shtml>.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the license for more details.
"""

"""Encapsulate state and behavior required to generate source code for a
function."""

from gensrc.Utilities import common
from gensrc.Utilities import buffer
from gensrc.Serialization import serializable
from gensrc.Functions import behavior
from gensrc.Parameters import parameterlist
from gensrc.Parameters import parameter
from gensrc.Configuration import environment

# possible states for the implementation of a function on a given platform
DOC_ONLY = 0    # only autogenerate documentation for this function - no code
MANUAL = 1      # function hand-written - registration may be autogenerated
AUTO = 2        # autogenerate all code and documentation (the default)

class SupportedPlatform(serializable.Serializable):
    """Define the implementation of a particular function on a particular 
    platform."""

    #############################################
    # class variables
    #############################################

    groupName_ = 'SupportedPlatforms'

    # map to take the implementation as a string loaded from XML metadata
    # and convert it to one of the constants defined above
    implStrToInt = {
        'documentationOnly' : DOC_ONLY,
        'manual' : MANUAL,
        'auto' : AUTO }

    #############################################
    # public interface
    #############################################

    def implNum(self):
        return self.implNum_

    def xlMacro(self):
        return self.xlMacro_

    #############################################
    # serializer interface
    #############################################

    def serialize(self, serializer):
        """Load/unload class state to/from serializer object."""
        serializer.serializeAttribute(self, common.NAME)
        serializer.serializeAttribute(self, 'implementation', 'auto')
        serializer.serializeAttributeBoolean(self, 'xlMacro', True)

    def postSerialize(self):
        self.implNum_ = SupportedPlatform.implStrToInt[self.implementation_]

