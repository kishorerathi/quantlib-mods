
    inline const std::set<std::string> &%(functionName)s::getSystemPropertyNames() const {
        static std::set<std::string> ret;
        if (ret.empty()) {
%(propertyPush)s        }
        return ret;
    }

    inline ObjectHandler::property_t %(functionName)s::getSystemProperty(const std::string& name) const {
        std::string nameUpper = boost::algorithm::to_upper_copy(name);
        if(strcmp(nameUpper.c_str(), "OBJECTID")==0)
            return objectId_;
        else if(strcmp(nameUpper.c_str(), "CLASSNAME")==0)
            return className_;
%(propertyGet)s        else
            OH_FAIL("Error: attempt to retrieve non-existent Property: '" + name + "'");
    }

    inline void %(functionName)s::setSystemProperty(const std::string& name, const ObjectHandler::property_t& value) {
        std::string nameUpper = boost::algorithm::to_upper_copy(name);
        if(strcmp(nameUpper.c_str(), "OBJECTID")==0)
            objectId_ = boost::get<std::string>(value);
        else if(strcmp(nameUpper.c_str(), "CLASSNAME")==0)
            className_ = boost::get<std::string>(value);
%(propertySet)s        else
            OH_FAIL("Error: attempt to set non-existent Property: '" + name + "'");
    }

    inline %(functionName)s::%(functionName)s(%(constructorParList)s) :
        ObjectHandler::ValueObject(ObjectId, "%(functionName)s", Permanent)%(constructorInit)s {
                  
%(populateObjectIDs)s
            
    }

