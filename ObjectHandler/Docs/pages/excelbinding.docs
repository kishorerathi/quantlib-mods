
/*
 Copyright (C) 2005, 2006 Eric Ehlers

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software developed by the QuantLib Group; you can
 redistribute it and/or modify it under the terms of the QuantLib License;
 either version 1.0, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 QuantLib License for more details.

 You should have received a copy of the QuantLib License along with this
 program; if not, please email quantlib-dev@lists.sf.net

 The QuantLib License is also available at http://quantlib.org/license.html
 The members of the QuantLib Group are listed in the QuantLib License
*/

/*! 

\page excelbinding Excel Binding

\section xl_overview Overview

ObjectHandler comprises a core C++ library supplemented with additional
bindings in support of functionality for Microsoft Excel.  Object Handler
functions are exported as spreadsheet functions, and additional utilities
are provided to the developer such as conversion of native C++ datatypes
to/from Excel datatypes (e.g. XLOPER).  

The excel bindings are available in two configurations:
<ul>
<li><b>static</b> - core ObjectHandler is bundled with the Excel binding
into a library which is statically linked into a single client XLL</li>
<li><b>dynamic</b> - ObjectHandler and the Excel binding are compiled into a
standalone XLL providing a global repository shared by any other XLLs 
in the Excel session</li>
</ul>

Both builds also support garbage collection, i.e. deletion of objects
that have been orphaned in the repository by events such as the closing 
of a workbook.

\section xl_gc Garbage Collection

In Excel, a cell formula invokes the constructor of an object, causing that
object to be added to the repository.  The object is assigned a handle which
is returned to the calling cell, allowing the object to be accessed, e.g. the
handle of one object could be passed as an input to the constructor of another.

An object persists in the repository even after the formula which instantiated 
the object is deleted - this happens, for example, when a workbook is closed.  
The object is not lost, its handle can still be retrieved and used to access 
the object.  However the object is likely redundant and a mechanism for cleaning 
it up is desirable.

ObjectHandler implements the following functions in support of garbage
collection functionality: \ref ohSetGcEnabled, \ref ohGetGcEnabled ,\ref
ohCallGC.

By default the feature is enabled, it can be disabled by calling ohSetGcEnabled(FALSE).  Whether or not garbage collection is enabled comprises a tradeoff in performance:

<table>
<tr><td><b>Event</b></td><td><b>GC Enabled</b></td><td><b>GC Disabled</b></td></tr>
<tr>
<td><b>Object Construction / Destruction</b></td>
<td>When objects are constructed/destroyed, a link to the calling cell is
updated.  The exact magnitude of the performance hit depends on many variables,
such as the number of objects in the repository, but in most cases the overhead
is negligible.</td>
<td>no performance overhead</td></tr>
<tr><td><b>Deletion of Orphaned Objects</b></td>
<td>Orphaned objects are deleted by calling ohCallGC() and the operation is
very fast.</td>
<td>In order to cull orphaned objects when GC is disabled, it's necessary to
delete all objects then recreate the active ones:<br>

- invoke function \ref ohDeleteAllObjects to empty the repository<br>
- invoke Ctrl-Alt-F9 (recalculate all workbooks) to re-instantiate any active
objects<br>

Depending on the quantity and nature of the objects to be reconstructed, the
magnitude of the performance hit may be high.</td></tr>
</table>

For most practical applications it should be preferable to leave garbage
collection enabled.

ObjectHandler's garbage collection functionality is an implementation
of a technique presented in 
<a href=" http://eu.wiley.com/WileyCDA/WileyTitle/productCd-0470024690.html">
Excel Add-in Development in C/C++: Applications in Finance</a> by Steve Dalton.

*/

