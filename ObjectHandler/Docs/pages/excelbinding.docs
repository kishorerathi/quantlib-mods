
/*
 Copyright (C) 2005, 2006 Eric Ehlers

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software developed by the QuantLib Group; you can
 redistribute it and/or modify it under the terms of the QuantLib License;
 either version 1.0, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 QuantLib License for more details.

 You should have received a copy of the QuantLib License along with this
 program; if not, please email quantlib-dev@lists.sf.net

 The QuantLib License is also available at http://quantlib.org/license.html
 The members of the QuantLib Group are listed in the QuantLib License
*/

/*! 

\page excelbinding Excel Binding

\section xl_overview Overview

ObjectHandler comprises a core C++ library supplemented with additional
bindings in support of functionality for Microsoft Excel.  Object Handler
functions are exported as spreadsheet functions, and additional utilities
are provided to the developer such as conversion of native C++ datatypes
to/from Excel datatypes (e.g. XLOPER).  

The excel bindings are available in two configurations:
<ul>
<li><b>static</b> - core ObjectHandler is bundled with the Excel binding
into a library which is statically linked into a single client XLL</li>
<li><b>dynamic</b> - ObjectHandler and the Excel binding are compiled into a
standalone XLL providing a global repository shared by any other XLLs 
in the Excel session</li>
</ul>

\section xl_gc Garbage Collection

The Excel implementation of ObjectHandler supports function
\ref ohCollectGarbage which can be called to cull objects that have been
orphaned in the repository by events such as the closing of a workbook.

A cell formula invokes the constructor of an object, causing that object to be
added to the repository.  The object is assigned an ID which is returned to the
calling cell, allowing the object to be accessed, e.g. the ID of one object
could be passed as an input to the constructor of another.

An object persists in the repository even after the formula which instantiated
the object is deleted - this happens, for example, when a workbook is closed.
The object is not lost, its ID can still be retrieved and used to access the
object.

However the object is likely redundant and a mechanism for cleaning it up is
desirable.  Function ohCollectGarbage iterates through all the objects in the
repository and culls those objects which have been orphaned by the deletion of
the calling cell.

ObjectHandler's garbage collection functionality is an implementation of a
technique presented in 
<a href=" http://eu.wiley.com/WileyCDA/WileyTitle/productCd-0470024690.html">
Excel Add-in Development in C/C++: Applications in Finance</a> by Steve Dalton.

*/

