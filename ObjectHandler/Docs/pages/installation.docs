
/*
 Copyright (C) 2005 Eric Ehlers

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software developed by the QuantLib Group; you can
 redistribute it and/or modify it under the terms of the QuantLib License;
 either version 1.0, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 QuantLib License for more details.

 You should have received a copy of the QuantLib License along with this
 program; if not, please email quantlib-dev@lists.sf.net

 The QuantLib License is also available at http://quantlib.org/license.html
 The members of the QuantLib Group are listed in the QuantLib License
*/

/*! 

\page installation Installation

\section inst_overview Overview

This section of the documentation describes how to install and
use ObjectHandler on Windows and on systems which use Autoconf
e.g. Linux.  Please see also the Example application shipped with
ObjectHandler.

ObjectHandler logging is performed by 
<a href="http://logging.apache.org/log4cxx/index.html">log4cxx</a>, 
the logging framework for the Apache project.
Before building ObjectHandler you'll need to install and build
log4cxx.  ObjectHandler has been tested against log4cxx version 0.9.7.

ObjectHandler is available for download from the 
<a href="http://sourceforge.net/project/showfiles.php?group_id=12740&package_id=141162">
QuantLib downloads page on sourceforge.</a>

<ul>
  <li>\ref inst_windows
    <ul>
    <li>\ref inst_win_prerequisites</li>
    <li>\ref inst_win_installation</li>
    <li>\ref inst_win_usage</li>
    </ul>
  </li>
  <li>\ref inst_autoconf
    <ul>
    <li>\ref inst_auto_prerequisites</li>
    <li>\ref inst_auto_installation</li>
    <li>\ref inst_auto_usage</li>
    </ul>
  </li>
</ul>

\section inst_windows Windows

These instructions assume a debug build.

\subsection inst_win_prerequisites Prerequisites

Before building ObjectHandler you need to build log4cxx.

<ul>
<li>log4cxx should be unzipped to a path containing no spaces as the library 
seems to complain otherwise</li>
<li>please build log4cxx, project "dll", configuration "Win32 Debug".</li>
<li>copy log4cxx.dll to a directory in your PATH</li>
<li>you need to manually set environment variable \c LOG4CXX_DIR to the top level 
log4cxx directory e.g. <tt>C:\\log4cxx-0.9.7</tt></li>
<li>if VC is running you need to restart it to pick up the new environment 
variable.</li>
</ul>

\subsection inst_win_installation Installation

Determine which project you need -

<table border="1" cellspacing="3" cellpadding="3">
<tr><td><b>Project</b></td><td><b>Description</b></td></tr>
<tr><td>ohlib</td><td>static library to be linked into standalone C++ applications</td></tr>
<tr><td>ohxllib</td><td>static library with additional functionality for Excel, to be statically
linked into a single client XLL</td></tr>
<tr><td>ohxll</td><td>a standalone XLL comprising a global object repository which can be 
shared by other XLLs in the Excel session</td></tr>
</table>

Build the desired workspace, configuration "Win32 Debug MTDLL".

\subsection inst_win_usage Usage

In order to link ObjectHandler into your own project, use the settings that
correspond to your chosen build:

<table border="1" cellspacing="3" cellpadding="3">
<tr><td><b>Platform</b></td><td><b>Include Directories</b></td><td><b>Preprocessor Defines</b></td><td><b>Link Directories</b></td><td><b>Link Libs</b></td></tr>
<tr><td>xll static</td><td>OBJECT_HANDLER_DIR</td><td>XLL_STATIC</td><td>OBJECT_HANDLER_DIR/xlsdk/lib<br>OBJECT_HANDLER_DIR/ohxl/ohxllib/lib<br>LOG4CXX_DIR/msvc/lib/Debug</td><td>log4cxx.lib</td></tr>
<tr><td>xll dynamic</td><td>OBJECT_HANDLER_DIR</td><td>XLL_IMPORTS</td><td>OBJECT_HANDLER_DIR/xlsdk/lib<br>OBJECT_HANDLER_DIR/ohxl/ohxll/xll</td><td>-</td></tr>
<tr><td>other</td><td>OBJECT_HANDLER_DIR</td><td>-</td><td>OBJECT_HANDLER_DIR/lib<br>LOG4CXX_DIR/msvc/lib/Debug</td><td>log4cxx.lib</td></tr>
</table>

In all cases you need to add the following directive to your project's source file:
\verbatim
#include <oh/objhandler.hpp>
\endverbatim

Your project's link to the ObjectHandler library is established automatically
by the directive
\verbatim
#pragma comment(lib, OBJHANDLER_LIB_NAME)
\endverbatim
in file <tt>oh/autolink.hpp</tt>

Please also refer to the example projects which are included in the ObjectHandler VC 
workspace.

\section inst_autoconf Autoconf

\subsection inst_auto_prerequisites Prerequisites

Before building ObjectHandler you need to build log4cxx.

A glitch in the log4cxx header files may cause the compilation
to generate hundreds of warnings, these can be ignored, alternatively
you can apply the fix described 
<a href="http://nagoya.apache.org/eyebrowse/ReadMsg?listName=log4cxx-user@logging.apache.org&msgId=1649232">here</a>. 

Otherwise log4cxx should build as documented.

\subsection inst_auto_installation Installation

ObjectHandler is built in the standard way:

\verbatim
tar zxfv ObjectHandler-0.1.2.tar.gz
cd ObjectHandler-0.1.2
./configure
make
make install
\endverbatim

Under the default configuration the subsequent <tt>make install</tt> 
command installs libs to \c /usr/local/lib and header files to 
\c /usr/local/include, to override this behavior specify a different 
installation prefix using \c --prefix e.g.
\verbatim
./configure --prefix=$HOME/ObjectHandler
\endverbatim

\subsection inst_auto_usage Usage

The header you need is
\verbatim
#include <oh/objhandler.hpp>
\endverbatim

To compile your program, ensure that the path containing the ObjectHandler
header is among those searched by your compiler.  If you've installed
ObjectHandler to a nonstandard location you might need to use the -I flag e.g.

\verbatim
g++ -I$HOME/ObjectHandler -c -o example.o example.cpp
\endverbatim

When linking your program use the -l option to tell gcc to link to the 
log4cxx and ObjectHandler libraries.

If the directories containing the ObjectHandler and log4cxx libraries 
are not among the standard list of directories searched by gcc then you 
need to use the -L option to specify the path e.g.

\verbatim
g++ -o example example.o -L$HOME/ObjectHandler/lib -lObjectHandler -llog4cxx
\endverbatim

Finally having compiled your executable you need to ensure that your
loader knows where to find the log4cxx and ObjectHandler libraries.  
If the paths containing these libraries are not among those searched by your
loader then you need to specify them e.g.

\verbatim
export LD_LIBRARY_PATH=$HOME/ObjectHandler/lib
\endverbatim

*/

