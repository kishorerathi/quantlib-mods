<Category name='bonds'>
  <description>functions to construct and use Bond objects</description>
  <displayName>Bonds</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <includes>
    <include>ql/Instruments/fixedratebond.hpp</include>
    <include>ql/Instruments/zerocouponbond.hpp</include>
    <include>ql/Instruments/cmsratebond.hpp</include>
    <include>ql/Instruments/floatingratebond.hpp</include>
    <include>qlo/swaptionvolstructure.hpp</include>
    <include>qlo/capletvolstructure.hpp</include>
    <include>qlo/bonds.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/couponvectors.hpp</include>
  </includes>
  <copyright>
    Copyright (C) 2006, 2007 Chiara Fornarola
    Copyright (C) 2006, 2007 Ferdinando Ametrano
    Copyright (C) 2005, 2006 Eric Ehlers
    Copyright (C) 2005 Plamen Neykov
    Copyright (C) 2005 Walter Penschke
  </copyright>

  <Functions>

    <Member name='qlBondFlowAnalysis' objectClass='Bond'>
      <description>Returns the bond cash flow analysis.</description>
      <libraryFunction>flowAnalysis</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>any</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondDescription' objectClass='Bond'>
      <description>Returns the bond description string</description>
      <libraryFunction>description</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondCurrency' objectClass='Bond'>
      <description>Returns the bond currency</description>
      <libraryFunction>currency</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondSettlementDate' libraryClass='Bond'>
      <description>Returns the settlement date of the bond.</description>
      <libraryFunction>settlementDate</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='today' libraryType='QuantLib::Date' default='QuantLib::Date()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>today's date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue libraryType='QuantLib::Date'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondInterestAccrualDate' libraryClass='Bond'>
      <description>Returns the initial interest accrual date of the bond.</description>
      <libraryFunction>interestAccrualDate</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue libraryType='QuantLib::Date'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondMaturityDate' libraryClass='Bond'>
      <description>Returns the maturity date of the bond.</description>
      <libraryFunction>maturityDate</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue libraryType='QuantLib::Date'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondCalendar' libraryClass='Bond'>
      <description>Returns the calendar of the bond, e.g. TARGET.</description>
      <libraryFunction>calendar</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue enumeration='QuantLib::Calendar'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondPaymentBDC' libraryClass='Bond'>
      <description>Returns the payment business day convention for the given Bond, e.g. Following.</description>
      <libraryFunction>paymentConvention</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue enumeration='QuantLib::BusinessDayConvention'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondDayCounter' libraryClass='Bond'>
      <description>Returns the DayCounter convention for the given Bond, e.g. Actual/360.</description>
      <libraryFunction>dayCounter</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue enumeration='QuantLib::DayCounter'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondFrequency' libraryClass='Bond'>
      <description>Returns the frequency for the given Bond, e.g. Annual.</description>
      <libraryFunction>frequency</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue enumeration='QuantLib::Frequency'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondCleanPrice' libraryClass='Bond'>
      <description>Returns the clean price for the given bond. The default bond settlement date is used for calculation.</description>
      <libraryFunction>cleanPrice</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondDirtyPrice' libraryClass='Bond'>
      <description>Returns the dirty price for the given bond. The default bond settlement date is used for calculation.</description>
      <libraryFunction>dirtyPrice</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondYield' libraryClass='Bond'>
      <description>Returns the yield for the given bond. The default bond settlement date is used for calculation.</description>
      <libraryFunction>yield</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Compounding' enumeration='QuantLib::Compounding' exampleValue='Compounded'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue libraryType='QuantLib::Rate'>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondSetPricer' objectClass='Bond'>
      <description>Set the coupon pricer at the given Bond object</description>
      <libraryFunction>setPricer</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='FloatingRateCouponPricer' libraryClass='FloatingRateCouponPricer'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>FloatingRate coupon pricer object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondSetPricers' objectClass='Bond'>
      <description>Set the coupon pricer at the given Bond object</description>
      <libraryFunction>setPricers</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='FloatingRateCouponPricer' libraryClass='FloatingRateCouponPricer'>
            <type>string</type>
            <tensorRank>vector</tensorRank>
            <description>FloatingRate coupon pricer object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!--<Member name='qlBondCleanPrice2' libraryClass='Bond' loopParameter='yield'>-->
    <Member name='qlBondCleanPrice2' libraryClass='Bond'>
      <description>Returns the clean price for the given bond corresponding to the given yield and settlement date. The default bond settlement is used if no date is given.</description>
      <libraryFunction>cleanPrice</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='yield' const='False' libraryType='QuantLib::Rate' exampleValue='4.00%'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>bond yield</description>
          </Parameter>
          <Parameter name='compounding' enumeration='QuantLib::Compounding' const='False'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>interest rate coumpounding rule (i.e. Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</description>
          </Parameter>
          <Parameter name='settlementDate' const='False' libraryType='QuantLib::Date' default='QuantLib::Date()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondDirtyPrice2' libraryClass='Bond' loopParameter='yield'>
      <description>Returns the dirty price for the given bond corresponding to the given yield and settlement date. The default bond settlement is used if no date is given.</description>
      <libraryFunction>dirtyPrice</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='yield' const='False' libraryType='QuantLib::Rate' exampleValue='4.00%'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>bond yield</description>
          </Parameter>
          <Parameter name='compounding' enumeration='QuantLib::Compounding' const='False' exampleValue='Compounded'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>interest rate coumpounding rule ( i.e. Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</description>
          </Parameter>
          <Parameter name='settlementDate' const='False' libraryType='QuantLib::Date' default='QuantLib::Date()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <!--<Member name='qlBondYield2' libraryClass='Bond' loopParameter='cleanPrice'>-->
    <Member name='qlBondYield2' libraryClass='Bond'>
      <description>Returns the yield for the given bond corresponding to the given clean price and settlement date. The default bond settlement is used if no date is given.</description>
      <libraryFunction>yield</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='cleanPrice' exampleValue='96.8'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>clean price</description>
          </Parameter>
          <Parameter name='compounding' enumeration='QuantLib::Compounding' exampleValue='Continuous'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</description>
          </Parameter>
          <Parameter name='settlementDate' const='False' libraryType='QuantLib::Date' default='QuantLib::Date()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue libraryType='QuantLib::Rate'>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>-->

    <Member name='qlBondAccruedAmount' libraryClass='Bond' >
      <description>Returns the accrued amount for the given bond. The default bond settlement is used if no date is given.</description>
      <libraryFunction>accruedAmount</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='settlementDate' const='False' libraryType='QuantLib::Date' default='QuantLib::Date()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlZeroCouponBond'>
      <libraryFunction>ZeroCouponBond</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Description' default='"no description available"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>bond description string. If omitted, default = 'no description available'</description>
          </Parameter>
          <Parameter name='Currency' default='"no description available"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>bond currency</description>
          </Parameter>
          <Parameter name='settlementDays' libraryType='QuantLib::Size' exampleValue='3'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days</description>
          </Parameter>
          <Parameter name='paymentBDC' enumeration='QuantLib::BusinessDayConvention' default='"Following"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>payment business day convention. If omitted, default = Following.</description>
          </Parameter>
          <Parameter name='FaceAmount' default='100.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Face nominal amount. If omitted, default = 100.0</description>
          </Parameter>
          <Parameter name='calendar' enumeration='QuantLib::Calendar' exampleValue='TARGET'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET)</description>
          </Parameter>
          <Parameter name='maturity' libraryType='QuantLib::Date' exampleValue='45348'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>maturity date</description>
          </Parameter>
          <Parameter name='dayCounter' enumeration='QuantLib::DayCounter' exampleValue='Actual/Actual (ISMA)'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment day counter (e.g. 'Actual/Actual (ISMA)')</description>
          </Parameter>
          <Parameter name='Redemption' default='100'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>redemption value</description>
          </Parameter>
          <Parameter name='issueDate' libraryType='QuantLib::Date' default='QuantLib::Date()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date: the bond can't be traded until then. If omitted, default = bond schedule first date.</description>
          </Parameter>
          <Parameter name='YieldCurve' libToHandle='YieldTermStructure' exampleValue='EURYC'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>discounting yield term structure object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlFixedRateBond'>
      <libraryFunction>FixedRateBond</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Description' default='"no description available"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>bond description string. If omitted, default = 'no description available'</description>
          </Parameter>
          <Parameter name='Currency' default='"no description available"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>bond currency</description>
          </Parameter>
          <Parameter name='settlementDays' libraryType='QuantLib::Size' exampleValue='3'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days</description>
          </Parameter>
          <Parameter name='paymentBDC' enumeration='QuantLib::BusinessDayConvention' default='"Following"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>payment business day convention. If omitted, default = Following.</description>
          </Parameter>
          <Parameter name='FaceAmount' default='100.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Face nominal amount. If omitted, default = 100.0</description>
          </Parameter>
          <Parameter name='ScheduleID' libraryClass='Schedule'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Schedule object ID</description>
          </Parameter>
          <Parameter name='Coupons' libraryType='QuantLib::Rate' exampleValue='0.04'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>coupon fixed rates</description>
          </Parameter>
          <Parameter name='dayCounter' enumeration='QuantLib::DayCounter' exampleValue='Actual/Actual (ISMA)'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment day counter (e.g. 'Actual/Actual (ISMA)')</description>
          </Parameter>
          <Parameter name='Redemption' default='100'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>redemption value. If omitted, default = 100</description>
          </Parameter>
          <Parameter name='issueDate' libraryType='QuantLib::Date' default='QuantLib::Date()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date: the bond can't be traded until then. If omitted, default = bond schedule first date.</description>
          </Parameter>
          <Parameter name='YieldCurve' libToHandle='YieldTermStructure' exampleValue='EURYC'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>discounting yield term structure object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlFloatingRateBond'>
      <libraryFunction>FloatingRateBond</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Description' default='"no description available"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>bond description string. If omitted, default = 'no description available'</description>
          </Parameter>
          <Parameter name='Currency' default='"no description available"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>bond currency</description>
          </Parameter>
          <Parameter name='settlementDays' libraryType='QuantLib::Size' exampleValue='3'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days</description>
          </Parameter>
          <Parameter name='paymentBDC' enumeration='QuantLib::BusinessDayConvention' default='"Following"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>payment business day convention. If omitted, default = Following.</description>
          </Parameter>
          <Parameter name='FaceAmount' default='100.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Face nominal amount. If omitted, default = 100.0</description>
          </Parameter>
          <Parameter name='ScheduleID' libraryClass='Schedule'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Schedule object ID</description>
          </Parameter>
          <Parameter name='fixingDays' libraryType='QuantLib::Size' default='QuantLib::Null&lt;QuantLib::Size&gt;()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing days (e.g. 2). If omitted, default = index natural fixing days</description>
          </Parameter>
          <Parameter name='isInArrears' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the fixing is in arrears. If omitted, default = FALSE</description>
          </Parameter>
          <Parameter name='dayCounter' enumeration='QuantLib::DayCounter' exampleValue='Actual/360'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment day counter (e.g. 'Actual/Actual (ISMA)')</description>
          </Parameter>
          <Parameter name='floors' libraryType='QuantLib::Rate' default='std::vector&lt;QuantLib::Rate&gt;()'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floor strikes. If omitted, default = no floor</description>
          </Parameter>
          <Parameter name='gearings' default='1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate gearings. If omitted, default = 1.0</description>
          </Parameter>
          <Parameter name='iborIndex' libraryClass='IborIndex'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>floating rate index</description>
          </Parameter>
          <Parameter name='spreads' libraryType='QuantLib::Spread' default='0.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate spreads. If omitted, default = 0%</description>
          </Parameter>
          <Parameter name='caps' libraryType='QuantLib::Rate' default='std::vector&lt;QuantLib::Rate&gt;()'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>cap strikes. If omitted, default = no cap</description>
          </Parameter>
          <Parameter name='Redemption' default='100'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>redemption value. If omitted, default = 100</description>
          </Parameter>
          <Parameter name='issueDate' libraryType='QuantLib::Date' default='QuantLib::Date()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date: the bond can't be traded until then. If omitted, default = bond schedule first date.</description>
          </Parameter>
          <Parameter name='YieldCurve' libToHandle='YieldTermStructure' exampleValue='EURYC'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>discounting yield term structure object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlCmsRateBond'>
      <libraryFunction>CmsRateBond</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Description' default='"no description available"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>bond description string. If omitted, default = 'no description available'</description>
          </Parameter>
          <Parameter name='Currency' default='"no description available"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>bond currency</description>
          </Parameter>
          <Parameter name='settlementDays' libraryType='QuantLib::Size' exampleValue='3'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days</description>
          </Parameter>
          <Parameter name='paymentBDC' enumeration='QuantLib::BusinessDayConvention' default='"Following"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>payment business day convention. If omitted, default = Following.</description>
          </Parameter>
          <Parameter name='FaceAmount' default='100.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Face nominal amount. If omitted, default = 100.0</description>
          </Parameter>
          <Parameter name='ScheduleID' libraryClass='Schedule'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Schedule object ID</description>
          </Parameter>
          <Parameter name='fixingDays' libraryType='QuantLib::Size' default='QuantLib::Null&lt;QuantLib::Size&gt;()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing days (e.g. 2). If omitted, default = index natural fixing days</description>
          </Parameter>
          <Parameter name='isInArrears' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the fixing is in arrears. If omitted, default = FALSE</description>
          </Parameter>
          <Parameter name='dayCounter' enumeration='QuantLib::DayCounter' exampleValue='Actual/360'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment day counter (e.g. 'Actual/Actual (ISMA)')</description>
          </Parameter>
          <Parameter name='floors' libraryType='QuantLib::Rate' default='std::vector&lt;QuantLib::Rate&gt;()'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floor strikes. If omitted, default = no floor</description>
          </Parameter>
          <Parameter name='gearings' default='1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate gearings. If omitted, default = 1.0</description>
          </Parameter>
          <Parameter name='swapIndex' libraryClass='SwapIndex'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>floating swap rate index</description>
          </Parameter>
          <Parameter name='spreads' libraryType='QuantLib::Spread' default='0.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate spreads. If omitted, default = 0%</description>
          </Parameter>
          <Parameter name='caps' libraryType='QuantLib::Rate' default='std::vector&lt;QuantLib::Rate&gt;()'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>cap strikes. If omitted, default = no cap</description>
          </Parameter>
          <Parameter name='Redemption' default='100'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>redemption value. If omitted, default = 100</description>
          </Parameter>
          <Parameter name='issueDate' libraryType='QuantLib::Date' default='QuantLib::Date()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date: the bond can't be traded until then. If omitted, default = bond schedule first date.</description>
          </Parameter>
          <Parameter name='YieldCurve' libToHandle='YieldTermStructure' exampleValue='EURYC'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>discounting yield term structure object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

  </Functions>
</Category>
