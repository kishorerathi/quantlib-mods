<Category name='bonds'>
  <description>functions to construct and use Bond objects</description>
  <displayName>Bonds</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <includes>
    <include>ql/Instruments/fixedcouponbond.hpp</include>
    <include>ql/Instruments/zerocouponbond.hpp</include>
    <include>ql/Instruments/floatingratebond.hpp</include>
    <include>ql/Instruments/cmscouponbond.hpp</include>
    <include>qlo/swaptionvolstructure.hpp</include>
    <include>qlo/bonds.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/couponvectors.hpp</include>
  </includes>
  <copyright>
    Copyright (C) 2006 Chiara Fornarola
    Copyright (C) 2006 Ferdinando Ametrano
    Copyright (C) 2005, 2006 Eric Ehlers
    Copyright (C) 2005 Plamen Neykov
    Copyright (C) 2005 Walter Penschke
  </copyright>

  <Functions>

    <Member name='qlBondFlowAnalysis' objectClass='Bond'>
      <description>Returns the bond cash flow analysis.</description>
      <libraryFunction>flowAnalysis</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>any</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondDescription' objectClass='Bond'>
      <description>Returns the bond description string</description>
      <libraryFunction>description</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondSettlementDate' libraryClass='Bond'>
      <description>Returns the settlement date of the bond.</description>
      <libraryFunction>settlementDate</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue libraryType='QuantLib::Date'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondFirstCouponDate' libraryClass='Bond'>
      <description>Returns the first coupon date of the bond.</description>
      <libraryFunction>firstCouponDate</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue libraryType='QuantLib::Date'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondMaturityDate' libraryClass='Bond'>
      <description>Returns the maturity date of the bond.</description>
      <libraryFunction>maturityDate</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue libraryType='QuantLib::Date'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondCalendar' libraryClass='Bond'>
      <description>Returns the calendar of the bond, e.g. TARGET.</description>
      <libraryFunction>calendar</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue enumeration='QuantLib::Calendar'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondAccrualBDC' libraryClass='Bond'>
      <description>Returns the accrual business day convention for the given Bond, e.g. Unadjusted.</description>
      <libraryFunction>accrualConvention</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue enumeration='QuantLib::BusinessDayConvention'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondPaymentBDC' libraryClass='Bond'>
      <description>Returns the accrual business day convention for the given Bond, e.g. Unadjusted.</description>
      <libraryFunction>paymentConvention</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue enumeration='QuantLib::BusinessDayConvention'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondDayCounter' libraryClass='Bond'>
      <description>Returns the DayCounter convention for the given Bond, e.g. Actual360.</description>
      <libraryFunction>dayCounter</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue enumeration='QuantLib::DayCounter'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondFrequency' libraryClass='Bond'>
      <description>Returns the frequency for the given Bond, e.g. Annual.</description>
      <libraryFunction>frequency</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue enumeration='QuantLib::Frequency'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondCleanPrice' libraryClass='Bond'>
      <description>Returns the clean price for the given bond. The default bond settlement date is used for calculation.</description>
      <libraryFunction>cleanPrice</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondDirtyPrice' libraryClass='Bond'>
      <description>Returns the dirty price for the given bond. The default bond settlement date is used for calculation.</description>
      <libraryFunction>dirtyPrice</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondYield' libraryClass='Bond'>
      <description>Returns the yield for the given bond. The default bond settlement date is used for calculation.</description>
      <libraryFunction>yield</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Compounding' enumeration='QuantLib::Compounding'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue libraryType='QuantLib::Rate'>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!--<Member name='qlBondCleanPrice2' libraryClass='Bond' loopParameter='yield'>-->
    <Member name='qlBondCleanPrice2' libraryClass='Bond'>
      <description>Returns the clean price for the given bond corresponding to the given yield and settlement date. The default bond settlement is used if no date is given.</description>
      <libraryFunction>cleanPrice</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='yield' const='False' libraryType='QuantLib::Rate'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>bond yield</description>
          </Parameter>
          <Parameter name='compounding' enumeration='QuantLib::Compounding' const='False'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</description>
          </Parameter>
          <Parameter name='settlementDate' const='False' libraryType='QuantLib::Date' default='QuantLib::Date()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBondDirtyPrice2' libraryClass='Bond' loopParameter='yield'>
      <description>Returns the dirty price for the given bond corresponding to the given yield and settlement date. The default bond settlement is used if no date is given.</description>
      <libraryFunction>dirtyPrice</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='yield' const='False' libraryType='QuantLib::Rate'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>bond yield</description>
          </Parameter>
          <Parameter name='compounding' enumeration='QuantLib::Compounding' const='False'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</description>
          </Parameter>
          <Parameter name='settlementDate' const='False' libraryType='QuantLib::Date' default='QuantLib::Date()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue libraryType='QuantLib::Rate'>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <!--<Member name='qlBondYield2' libraryClass='Bond' loopParameter='cleanPrice'>-->
    <Member name='qlBondYield2' libraryClass='Bond'>
      <description>Returns the yield for the given bond corresponding to the given clean price and settlement date. The default bond settlement is used if no date is given.</description>
      <libraryFunction>yield</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='cleanPrice'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Clean price</description>
          </Parameter>
          <Parameter name='compounding' enumeration='QuantLib::Compounding'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</description>
          </Parameter>
          <Parameter name='settlementDate' const='False' libraryType='QuantLib::Date' default='QuantLib::Date()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue libraryType='QuantLib::Rate'>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>-->

    <Member name='qlBondAccruedAmount' libraryClass='Bond' >
      <description>Returns the accrued amount for the given bond. The default bond settlement is used if no date is given.</description>
      <libraryFunction>accruedAmount</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='settlementDate' const='False' libraryType='QuantLib::Date' default='QuantLib::Date()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlZeroCouponBond'>
      <libraryFunction>ZeroCouponBond</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Description' default='""'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>bond description string</description>
          </Parameter>
          <Parameter name='FaceAmount'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>bond face amount</description>
          </Parameter>
          <Parameter name='issueDate' libraryType='QuantLib::Date'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date</description>
          </Parameter>
          <Parameter name='maturity' libraryType='QuantLib::Date'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>maturity date</description>
          </Parameter>
          <Parameter name='settlementDays'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days</description>
          </Parameter>
          <Parameter name='dayCounter' enumeration='QuantLib::DayCounter'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>day counter (e.g. Actual/360)</description>
          </Parameter>
          <Parameter name='calendar' enumeration='QuantLib::Calendar'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET)</description>
          </Parameter>
          <Parameter name='BDC' enumeration='QuantLib::BusinessDayConvention'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>BusinessDayConvention</description>
          </Parameter>
          <Parameter name='redemption'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>redemption</description>
          </Parameter>
          <Parameter name='YieldCurve' libToHandle='YieldTermStructure'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>discounting yield term structure object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlFixedCouponBond'>
      <libraryFunction>FixedCouponBond</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Description' default='""'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>bond description string</description>
          </Parameter>
          <Parameter name='FaceAmount'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>bond face amount</description>
          </Parameter>
          <Parameter name='issueDate' libraryType='QuantLib::Date'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date</description>
          </Parameter>
          <Parameter name='firstCouponDate' libraryType='QuantLib::Date'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>first coupon date</description>
          </Parameter>
          <Parameter name='maturity' libraryType='QuantLib::Date'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>maturity date</description>
          </Parameter>
          <Parameter name='settlementDays'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days</description>
          </Parameter>
          <Parameter name='coupons' libraryType='QuantLib::Rate'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>coupons</description>
          </Parameter>
          <Parameter name='Redemption'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Redemption</description>
          </Parameter>
          <Parameter name='frequency' enumeration='QuantLib::Frequency'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly)</description>
          </Parameter>
          <Parameter name='dayCounter' enumeration='QuantLib::DayCounter'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>day counter (e.g. Actual/360)</description>
          </Parameter>
          <Parameter name='accrualBDC' enumeration='QuantLib::BusinessDayConvention'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Accrual Business Day Convention (e.g. ModifiedFollowing)</description>
          </Parameter>
          <Parameter name='paymentBDC' enumeration='QuantLib::BusinessDayConvention'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment Business Day Convention (e.g. ModifiedFollowing)</description>
          </Parameter>
          <Parameter name='calendar' enumeration='QuantLib::Calendar'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET)</description>
          </Parameter>
          <Parameter name='startFromEnd'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>build schedule backwards (start from maturity)</description>
          </Parameter>
          <Parameter name='longFinal'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>long first/last period</description>
          </Parameter>
          <Parameter name='YieldCurve' libToHandle='YieldTermStructure'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>discounting yield term structure object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlFloatingCouponBond'>
      <libraryFunction>FloatingCouponBond</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Description' default='""'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>bond description string</description>
          </Parameter>
          <Parameter name='FaceAmount'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>bond face amount</description>
          </Parameter>
          <Parameter name='issueDate' libraryType='QuantLib::Date'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date</description>
          </Parameter>
          <Parameter name='firstCouponDate' libraryType='QuantLib::Date'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>first coupon date</description>
          </Parameter>
          <Parameter name='maturity' libraryType='QuantLib::Date'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>maturity date</description>
          </Parameter>
          <Parameter name='settlementDays'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days</description>
          </Parameter>
          <Parameter name='indexID' libraryClass='IborIndex'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Floating rate index</description>
          </Parameter>
          <Parameter name='fixingDays'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing days (e.g. 2)</description>
          </Parameter>
          <Parameter name='gearings' default='0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate gearings (i.e. the multiplicative coefficients of the floating rate index)</description>
          </Parameter>
          <Parameter name='spreads' default='0' libraryType='QuantLib::Spread'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate spreads</description>
          </Parameter>
          <Parameter name='frequency' enumeration='QuantLib::Frequency'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly)</description>
          </Parameter>
          <Parameter name='calendar' enumeration='QuantLib::Calendar'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET)</description>
          </Parameter>
          <Parameter name='dayCounter' enumeration='QuantLib::DayCounter'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>day counter (e.g. Actual/360)</description>
          </Parameter>
          <Parameter name='accrualBDC' enumeration='QuantLib::BusinessDayConvention'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Accrual Business Day Convention (e.g. ModifiedFollowing)</description>
          </Parameter>
          <Parameter name='paymentBDC' enumeration='QuantLib::BusinessDayConvention'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment Business Day Convention (e.g. ModifiedFollowing)</description>
          </Parameter>
          <Parameter name='Redemption'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Redemption</description>
          </Parameter>
          <Parameter name='YieldCurve' libToHandle='YieldTermStructure'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>discounting yield term structure object ID</description>
          </Parameter>
          <Parameter name='stubDate' libraryType='QuantLib::Date' default='QuantLib::Date()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>stub date</description>
          </Parameter>
          <Parameter name='startFromEnd'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>build schedule backwards (start from maturity)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>
    
    <Constructor name='qlCmsCouponBond'>
      <libraryFunction>CmsCouponBond</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Des' default='""'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>bond description string</description>
          </Parameter>
          <Parameter name='face'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>bond face amount</description>
          </Parameter>
          <Parameter name='issueDate' libraryType='QuantLib::Date'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>issue date</description>
          </Parameter>
          <Parameter name='firstDate' libraryType='QuantLib::Date'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>first coupon date</description>
          </Parameter>
          <Parameter name='maturity' libraryType='QuantLib::Date'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>maturity date</description>
          </Parameter>
          <Parameter name='settlDays'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days</description>
          </Parameter>
          <Parameter name='swapIndex' libraryClass='SwapIndex'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying swap index ID</description>
          </Parameter>
          <Parameter name='fixingDays'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing days (e.g. 2)</description>
          </Parameter>
          <Parameter name='gearings' default='0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate gearings</description>
          </Parameter>
          <Parameter name='spreads' default='0' libraryType='QuantLib::Spread'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate spreads</description>
          </Parameter>
          <Parameter name='freq' enumeration='QuantLib::Frequency'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly)</description>
          </Parameter>
          <Parameter name='cal' enumeration='QuantLib::Calendar'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET)</description>
          </Parameter>
          <Parameter name='dayCounter' enumeration='QuantLib::DayCounter'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>day counter (e.g. Actual/360)</description>
          </Parameter>
          <Parameter name='CmsPricer' libraryClass='VanillaCMSCouponPricer'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Cms coupon pricer object ID</description>
          </Parameter>
          <Parameter name='caps' libraryType='QuantLib::Rate'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>caps</description>
          </Parameter>
          <Parameter name='floors' libraryType='QuantLib::Rate'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floors</description>
          </Parameter>
          <Parameter name='accrualBDC' enumeration='QuantLib::BusinessDayConvention'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Accrual BDC (e.g. ModifiedFollowing)</description>
          </Parameter>
          <Parameter name='paymentBDC' enumeration='QuantLib::BusinessDayConvention'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment BDC (e.g. ModifiedFollowing)</description>
          </Parameter>
          <Parameter name='Redemption'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Redemption</description>
          </Parameter>
          <Parameter name='YieldCurve' libToHandle='YieldTermStructure'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>discounting yield term structure object ID</description>
          </Parameter>
          <Parameter name='stubDate' libraryType='QuantLib::Date' default='QuantLib::Date()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>stub date</description>
          </Parameter>
          <Parameter name='startFromEnd'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>build schedule backwards</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

  </Functions>
</Category>
