<Category name='couponvectors'>
  <description>functions to construct and use Leg objects</description>
  <displayName>Coupon Vectors</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <includes>
    <include>qlo/couponvectors.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/swaptionvolstructure.hpp</include>
    <include>qlo/capletvolstructure.hpp</include>
  </includes>
  <copyright>
    Copyright (C) 2006, 2007 Ferdinando Ametrano
    Copyright (C) 2006, 2007 Cristina Duminuco
    Copyright (C) 2005 Aurelien Chanudet
  </copyright>

  <Functions>

    <!-- Leg interface -->
    <Member name='qlLegStartDate' objectClass='Leg'>
      <description>Returns the start (i.e. first accrual) date for the given Leg object</description>
      <libraryFunction>startDate</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue libraryType='QuantLib::Date'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegMaturityDate' objectClass='Leg'>
      <description>Returns the maturity (i.e. last payment) date for the given Leg object</description>
      <libraryFunction>startDate</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue libraryType='QuantLib::Date'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegNPV' objectClass='Leg'>
      <description>Returns the net present value for the given Leg object</description>
      <libraryFunction>npv</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='YieldCurve' libToHandle='YieldTermStructure' exampleValue='EURYC'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>discounting yield term structure object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegBPS' objectClass='Leg'>
      <description>Returns the basis point sensitivity for the given Leg object</description>
      <libraryFunction>bps</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='YieldCurve' libToHandle='YieldTermStructure' exampleValue='EURYC'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>discounting yield term structure object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegAtmRate' objectClass='Leg'>
      <description>Returns the at-the-money rate for the given Leg object, i.e. the fixed rate for which an equivalent vector of fixed-rate cash flows would have the same NPV.</description>
      <libraryFunction>atmRate</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='YieldCurve' libToHandle='YieldTermStructure' exampleValue='EURYC'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>discounting yield term structure object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue libraryType='QuantLib::Rate'>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegAnalysis' objectClass='Leg'>
      <description>Returns the flow analysis for the given Leg object</description>
      <libraryFunction>analysis</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>any</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegSetPricer' objectClass='Leg'>
      <description>Set the coupon pricer at the given Leg object</description>
      <libraryFunction>setPricer</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='FloatingRateCouponPricer' libraryClass='FloatingRateCouponPricer'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>FloatingRate coupon pricer object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegSetPricers' objectClass='Leg'>
      <description>Set the coupon pricer at the given Leg object</description>
      <libraryFunction>setPricers</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='FloatingRateCouponPricer' libraryClass='FloatingRateCouponPricer'>
            <type>string</type>
            <tensorRank>vector</tensorRank>
            <description>FloatingRate coupon pricer object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>


    <!-- Leg constructors -->
    <Constructor name='qlFixedRateLeg'>
      <libraryFunction>FixedRateLeg</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='paymentBDC' enumeration='QuantLib::BusinessDayConvention' default='"Following"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>payment business day convention. If omitted, default = Following.</description>
          </Parameter>
          <Parameter name='Nominals' exampleValue='1000000'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>Nominal amount vector. If omitted, default = 1000000</description>
          </Parameter>
          <Parameter name='ScheduleID' libraryClass='Schedule'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Schedule object ID</description>
          </Parameter>
          <Parameter name='Coupons' libraryType='QuantLib::Rate' exampleValue='0.04'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>coupon fixed rates</description>
          </Parameter>
          <Parameter name='dayCounter' enumeration='QuantLib::DayCounter' exampleValue='Actual/Actual (ISMA)'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment day counter (e.g. 'Actual/Actual (ISMA)')</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlIborLeg'>
      <libraryFunction>IborLeg</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='paymentBDC' enumeration='QuantLib::BusinessDayConvention' default='"Following"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>payment business day convention. If omitted, default = Following.</description>
          </Parameter>
          <Parameter name='Nominals' exampleValue='1000000'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>Nominal amount vector. If omitted, default = 1000000</description>
          </Parameter>
          <Parameter name='ScheduleID' libraryClass='Schedule'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Schedule object ID</description>
          </Parameter>
          <Parameter name='fixingDays' libraryType='QuantLib::Natural' default='QuantLib::Null&lt;QuantLib::Natural&gt;()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing days (e.g. 2). If omitted, default = index natural fixing days</description>
          </Parameter>
          <Parameter name='isInArrears' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the fixing is in arrears. If omitted, default = FALSE</description>
          </Parameter>
          <Parameter name='dayCounter' enumeration='QuantLib::DayCounter' exampleValue='Actual/360'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment day counter (e.g. 'Actual/Actual (ISMA)')</description>
          </Parameter>
          <Parameter name='floors' libraryType='QuantLib::Rate' default='std::vector&lt;QuantLib::Rate&gt;()'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floor strikes. If omitted, default = no floor</description>
          </Parameter>
          <Parameter name='gearings' default='1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate gearings. If omitted, default = 1.0</description>
          </Parameter>
          <Parameter name='iborIndex' libraryClass='IborIndex'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>floating rate index</description>
          </Parameter>
          <Parameter name='spreads' libraryType='QuantLib::Spread' default='0.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate spreads. If omitted, default = 0%</description>
          </Parameter>
          <Parameter name='caps' libraryType='QuantLib::Rate' default='std::vector&lt;QuantLib::Rate&gt;()'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>cap strikes. If omitted, default = no cap</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlCmsLeg'>
      <libraryFunction>CmsLeg</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='paymentBDC' enumeration='QuantLib::BusinessDayConvention' default='"Following"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>payment business day convention. If omitted, default = Following.</description>
          </Parameter>
          <Parameter name='Nominals' exampleValue='1000000'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>Nominal amount vector. If omitted, default = 1000000</description>
          </Parameter>
          <Parameter name='ScheduleID' libraryClass='Schedule'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Schedule object ID</description>
          </Parameter>
          <Parameter name='fixingDays' libraryType='QuantLib::Natural' default='QuantLib::Null&lt;QuantLib::Natural&gt;()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing days (e.g. 2). If omitted, default = index natural fixing days</description>
          </Parameter>
          <Parameter name='isInArrears' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the fixing is in arrears. If omitted, default = FALSE</description>
          </Parameter>
          <Parameter name='dayCounter' enumeration='QuantLib::DayCounter' exampleValue='Actual/360'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment day counter (e.g. 'Actual/Actual (ISMA)')</description>
          </Parameter>
          <Parameter name='floors' libraryType='QuantLib::Rate' default='std::vector&lt;QuantLib::Rate&gt;()'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floor strikes. If omitted, default = no floor</description>
          </Parameter>
          <Parameter name='gearings' default='1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate gearings. If omitted, default = 1.0</description>
          </Parameter>
          <Parameter name='SwapIndex' libraryClass='SwapIndex'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying SwapIndex object ID</description>
          </Parameter>
          <Parameter name='spreads' libraryType='QuantLib::Spread' default='0.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate spreads. If omitted, default = 0%</description>
          </Parameter>
          <Parameter name='caps' libraryType='QuantLib::Rate' default='std::vector&lt;QuantLib::Rate&gt;()'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>cap strikes. If omitted, default = no cap</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlCmsZeroLeg'>
      <libraryFunction>CmsZeroLeg</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='paymentBDC' enumeration='QuantLib::BusinessDayConvention' default='"Following"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>payment business day convention. If omitted, default = Following.</description>
          </Parameter>
          <Parameter name='Nominals' exampleValue='1000000'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>Nominal amount vector. If omitted, default = 1000000</description>
          </Parameter>
          <Parameter name='ScheduleID' libraryClass='Schedule'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Schedule object ID</description>
          </Parameter>
          <Parameter name='fixingDays' libraryType='QuantLib::Natural' default='QuantLib::Null&lt;QuantLib::Natural&gt;()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing days (e.g. 2). If omitted, default = index natural fixing days</description>
          </Parameter>
          <Parameter name='isInArrears' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the fixing is in arrears. If omitted, default = FALSE</description>
          </Parameter>
          <Parameter name='dayCounter' enumeration='QuantLib::DayCounter' exampleValue='Actual/360'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Payment day counter (e.g. 'Actual/Actual (ISMA)')</description>
          </Parameter>
          <Parameter name='floors' libraryType='QuantLib::Rate' default='std::vector&lt;QuantLib::Rate&gt;()'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floor strikes. If omitted, default = no floor</description>
          </Parameter>
          <Parameter name='gearings' default='1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate gearings. If omitted, default = 1.0</description>
          </Parameter>
          <Parameter name='SwapIndex' libraryClass='SwapIndex'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying SwapIndex object ID</description>
          </Parameter>
          <Parameter name='spreads' libraryType='QuantLib::Spread' default='0.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>floating rate spreads. If omitted, default = 0%</description>
          </Parameter>
          <Parameter name='caps' libraryType='QuantLib::Rate' default='std::vector&lt;QuantLib::Rate&gt;()'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>cap strikes. If omitted, default = no cap</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlMultiPhaseLeg'>
      <libraryFunction>MultiPhaseLeg</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='legIDs' objectClass='Leg'>
            <type>string</type>
            <tensorRank>vector</tensorRank>
            <description>leg object IDs, one for each phase</description>
          </Parameter>
          <Parameter name='toBeSorted' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the CashFlows in the merged Leg must be sorted according to date/amount</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- pricers -->
    <Constructor name='qlIborCouponPricer'>
      <libraryFunction>IborCouponPricer</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Volatility' libToHandle='CapletVolatilityStructure' exampleValue='EURCapletVol'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Caplet Volatility Structure object ID</description>
          </Parameter>
          <Parameter name='IborCouponPricerType' exampleValue='IborByBlack'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Ibor Coupon Pricer Type (e.g IborByBlack, ..)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlCmsCouponPricer'>
      <libraryFunction>CmsCouponPricer</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Volatility' libToHandle='SwaptionVolatilityStructure' exampleValue='EURSwaptionVol'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Swaption Volatility Structure object ID</description>
          </Parameter>
          <Parameter name='CmsCouponPricerType' exampleValue='ConundrumByNumericalIntegration'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Cms Coupon Pricer Type (e.g ConundrumByBlack, ConundrumByNumericalIntegration, ClassicalAnaliticalFormula)</description>
          </Parameter>
          <Parameter name='ModelOfYieldCurve' enumeration='QuantLib::GFunctionFactory::ModelOfYieldCurve'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>model of the yield curve (e.g Standard, ExactYield, ParallelShifts, NonParallelShifts)</description>
          </Parameter>
          <Parameter name='MeanReversion' libToHandle='Quote' exampleValue='0.1'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>mean reversion quote.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

  </Functions>

</Category>
