<Category name='abcd'>
  <description>functions to construct and use Abcd objects</description>
  <displayName>Abcd</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <addinIncludes>
    <include>qlo/abcd.hpp</include>
    <include>qlo/optimization.hpp</include>
    <include>ql/termstructures/volatilities/abcd.hpp</include>
  </addinIncludes>
  <copyright>

    Copyright (C) 2006, 2007 Ferdinando Ametrano
    Copyright (C) 2007 Chiara Fornarola
    Copyright (C) 2006, 2007 Marco Bianchetti
    Copyright (C) 2006, 2007 Cristina Duminuco
    Copyright (C) 2006, 2007 Giorgio Facchinetti
  </copyright>
  <Functions>
    
    <!-- Abcd (volatility) class costructor -->
    <Constructor name='qlAbcd'>
      <libraryFunction>Abcd</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='a' default='-0.06'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>the a coefficient in the abcd vol parametrization. Used as guess if the object is later calibrated.  If omitted, default = -0.06 is used.</description>
          </Parameter>
          <Parameter name='b' default='0.17'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>the b coefficient in the abcd vol parametrization. Used as guess if the object is later calibrated. If omitted, default = 0.17 is used.</description>
          </Parameter>
          <Parameter name='c' default='0.54'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>the c coefficient in the abcd vol parametrization. Used as guess if the object is later calibrated. If omitted, default = 0.54 is used.</description>
          </Parameter>
          <Parameter name='d' default='0.17'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>the d coefficient in the abcd vol parametrization. Used as guess if the object is later calibrated. If omitted, default = 0.17 is used.</description>
          </Parameter>
          <Parameter name='aIsFixed' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the a coefficient must be kept fixed in later calibrations. If omitted, default = FALSE is used.</description>
          </Parameter>
          <Parameter name='bIsFixed' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the a coefficient must be kept fixed in later calibrations. If omitted, default = FALSE is used.</description>
          </Parameter>
          <Parameter name='cIsFixed' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the a coefficient must be kept fixed in later calibrations. If omitted, default = FALSE is used.</description>
          </Parameter>
          <Parameter name='dIsFixed' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the a coefficient must be kept fixed in later calibrations. If omitted, default = FALSE is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- Abcd (volatility) class interfaces -->
    <Member name='qlAbcdInstantaneousValue' type='QuantLib::Abcd' loopParameter='u'>
      <description>Returns the instantaneous volatility as function of residual time to maturity u=T-t: [a + b*u] * e^{-c*u} + d</description>
      <libraryFunction>operator()</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='u' const='False' exampleValue ='5.0,4.0,3.0,2.0,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>residual time(s) to maturity</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdInstantaneousCovariance' type='QuantLib::Abcd' loopParameter='u'>
      <description>Returns covariance at calendar time u between T and S rates fixing times.</description>
      <libraryFunction>instantaneousCovariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='u' const='False' exampleValue ='0.0,0.5,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>calendar time(s)</description>
          </Parameter>
          <Parameter name='T' const='False'  exampleValue ='0.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing time of first rate</description>
          </Parameter>
          <Parameter name='S' const='False' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing time of second rate</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdInstantaneousVariance' type='QuantLib::Abcd' loopParameter='u'>
      <description>Returns variance at calendar time(s) u of T-fixing rate.</description>
      <libraryFunction>instantaneousVariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='u' const='False' exampleValue ='0.0,0.5,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>calendar time(s)</description>
          </Parameter>
          <Parameter name='T' const='False' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing time of the rate</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdInstantaneousVolatility' type='QuantLib::Abcd' loopParameter='u'>
      <description>Returns volatility/ies at calendar time(s) u of T-fixing rate.</description>
      <libraryFunction>instantaneousVolatility</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='u' const='False' exampleValue ='0.0,0.5,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>calendar time(s)</description>
          </Parameter>
          <Parameter name='T' const='False' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing calendar time of the rate</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdCovariance' type='QuantLib::Abcd' loopParameter='tMax'>
      <description>Returns covariance(s) in [tMin,tMax] between T and S rate fixing times.</description>
      <libraryFunction>covariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='tMin' const='False' exampleValue ='0.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>lower bound of the covariance integral</description>
          </Parameter>
          <Parameter name='tMax' const='False' exampleValue ='0.25,0.5'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>upper bound(s) of the covariance integral(s)</description>
          </Parameter>
          <Parameter name='T' const='False' exampleValue ='0.5'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing calendar time of first rate</description>
          </Parameter>
          <Parameter name='S' const='False' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing calendar time of second rate</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdVariance' type='QuantLib::Abcd' loopParameter='tMax'>
      <description>Returns variance(s) in [tMin,tMax] of T rate fixing time.</description>
      <libraryFunction>variance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='tMin' const='False' exampleValue ='0.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>lower bound of the covariance integral</description>
          </Parameter>
          <Parameter name='tMax' const='False' exampleValue ='0.5,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>upper bound of the covariance integral</description>
          </Parameter>
          <Parameter name='T' const='False' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing calendar time of the rate</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdVolatility' type='QuantLib::Abcd' loopParameter='tMax'>
      <description>Returns volatility/ies in [tMin,tMax] of T rate fixing time.</description>
      <libraryFunction>volatility</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='tMin' const='False' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>lower bound of the covariance integral</description>
          </Parameter>
          <Parameter name='tMax' const='False' exampleValue ='0.5,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>upper bound(s) of the covariance integral(s)</description>
          </Parameter>
          <Parameter name='T' const='False' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing calendar time of the rate</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdShortTermVolatility' type='QuantLib::Abcd'>
      <description>Returns the short term volatility implied by Abcd volatility.</description>
      <libraryFunction>shortTermVolatility</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdLongTermVolatility' type='QuantLib::Abcd'>
      <description>Returns the long term volatility implied by Abcd volatility.</description>
      <libraryFunction>longTermVolatility</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdMaximumLocation' type='QuantLib::Abcd'>
      <description>Returns, if b is positive, the location of the Abcd volatility maximum.</description>
      <libraryFunction>maximumLocation</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdMaximumVolatility' type='QuantLib::Abcd'>
      <description>Returns, if b is positive, the maximum of the Abcd volatility.</description>
      <libraryFunction>maximumVolatility</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdA' type='QuantLib::Abcd'>
      <description>Returns the a coefficient in the abcd vol parametrization</description>
      <libraryFunction>a</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdB' type='QuantLib::Abcd'>
      <description>Returns the a coefficient in the abcd vol parametrization</description>
      <libraryFunction>b</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdC' type='QuantLib::Abcd'>
      <description>Returns the a coefficient in the abcd vol parametrization</description>
      <libraryFunction>c</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdD' type='QuantLib::Abcd'>
      <description>Returns the a coefficient in the abcd vol parametrization</description>
      <libraryFunction>d</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdK' type='QuantLib::Abcd'>
      <description>Returns the 'k' adjustment factors needed to match Black vols</description>
      <libraryFunction>k</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='blackVols' exampleValue ='0.2,0.2,0.2,0.2,0.2'>
            <type>QuantLib::Volatility</type>
            <tensorRank>vector</tensorRank>
            <description>Black vol vector.</description>
          </Parameter>
          <Parameter name='times' exampleValue ='0,1,2,3,4'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>Reference time for the above Black vol vector.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdError' type='QuantLib::Abcd'>
      <description>Returns the root mean squared error between the abdc implied Black vols and a given Black vol vector</description>
      <libraryFunction>error</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='blackVols' exampleValue ='0.2,0.2,0.2,0.2,0.2'>
            <type>QuantLib::Volatility</type>
            <tensorRank>vector</tensorRank>
            <description>Black vol vector.</description>
          </Parameter>
          <Parameter name='times' exampleValue ='0,1,2,3,4'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>Reference time for the above Black vol vector.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdMaxError' type='QuantLib::Abcd'>
      <description>Returs the max error between the abdc implied Black vols and a given Black vol vector</description>
      <libraryFunction>maxError</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='blackVols' exampleValue ='0.2,0.2,0.2,0.2,0.2'>
            <type>QuantLib::Volatility</type>
            <tensorRank>vector</tensorRank>
            <description>Black vol vector.</description>
          </Parameter>
          <Parameter name='times' exampleValue ='0,1,2,3,4'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>Reference time for the above Black vol vector.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdCalibration' type='QuantLib::Abcd'>
      <description>Calibrates the a, b, c, d parameters of the vol parametrization</description>
      <libraryFunction>calibration</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='blackVols' exampleValue ='0.2,0.2,0.2,0.2,0.2'>
            <type>QuantLib::Volatility</type>
            <tensorRank>vector</tensorRank>
            <description>Black vol vector.</description>
          </Parameter>
          <Parameter name='times' exampleValue ='0,1,2,3,4'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>times for the above Black vol vector.</description>
          </Parameter>
          <Parameter name='endCriteria' default='""'>
            <type>QuantLib::EndCriteria</type>
            <tensorRank>scalar</tensorRank>
            <description>EndCriteria object ID. If omitted, default = "" is used.</description>
          </Parameter>
          <Parameter name='optimizationMethod' default='""'>
            <type>QuantLib::OptimizationMethod</type>
            <tensorRank>scalar</tensorRank>
            <description>OptimizationMethod object ID. If omitted, default optimization method is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::EndCriteria::Type</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>
 
  </Functions>
</Category>
