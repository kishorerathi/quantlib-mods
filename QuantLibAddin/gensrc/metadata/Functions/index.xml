<Category name='index'>
  <description>functions to construct and use Index objects</description>
  <displayName>Indices</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <addinIncludes>
    <include>ql/indexes/swapindex.hpp</include>
    <include>qlo/index.hpp</include>
    <include>qlo/termstructures.hpp</include>
  </addinIncludes>
  <copyright>
    Copyright (C) 2006, 2007 Ferdinando Ametrano
    Copyright (C) 2006 Katiuscia Manzoni
    Copyright (C) 2005 Eric Ehlers
    Copyright (C) 2005 Plamen Neykov
  </copyright>
  <Functions>

    <!-- Index interface -->

    <Member name='qlIndexName' type='QuantLib::Index'>
      <description>Returns the name for the given Index object</description>
      <libraryFunction>name</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlIndexFixingCalendar' type='QuantLib::Index'>
      <description>Returns the calendar (e.g. TARGET) for the given Index object</description>
      <libraryFunction>fixingCalendar</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Calendar</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlIndexIsValidFixingDate' type='QuantLib::Index' loopParameter='fixingDate'>
      <description>Returns TRUE if the fixing date is a valid one for the given Index object</description>
      <libraryFunction>isValidFixingDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='fixingDate' exampleValue='10-Feb-2007'>
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>fixing date(s)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>bool</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlIndexFixing' type='QuantLib::Index' loopParameter='fixingDate'>
      <description>Returns the fixing for the given Index object. The fixing is retrieved from the time series if available, otherways it is forecasted.</description>
      <libraryFunction>fixing</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='fixingDate' exampleValue='02-Jan-2007'>
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>fixing date(s)</description>
          </Parameter>
          <Parameter name='forecastToday' default='0' const='False'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>If set to TRUE it forces the forecasting of today's fixing even if the actual fixing is already available in the time series. The default value is FALSE.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlIndexAddFixings' type='QuantLib::Index'>
      <!--<Member name='qlIndexAddFixings' type='QuantLibAddin::Index'>-->
      <description>Adds fixings for the given Index object</description>
      <libraryFunction>addFixings</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='fixingDates' libraryType='QuantLib::Date'>
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>fixing dates</description>
          </Parameter>
          <Parameter name='fixingValues' libraryType='QuantLib::Real'>
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>fixing values</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlIndexClearFixings' type='QuantLib::Index'>
      <description>Clear all fixings for the given Index object</description>
      <libraryFunction>clearFixings</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- InterestRateIndex interface -->

    <Member name='qlInterestRateIndexFamilyName' type='QuantLib::InterestRateIndex'>
      <description>Returns the family name (e.g. EURIBOR) for the given InterestRateIndex object</description>
      <libraryFunction>familyName</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlInterestRateIndexTenor' type='QuantLib::InterestRateIndex'>
      <description>Returns the tenor (i.e. length, e.g. 6M, 10Y) for the given InterestRateIndex object</description>
      <libraryFunction>tenor</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Period</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlInterestRateIndexFixingDays' type='QuantLib::InterestRateIndex'>
      <description>Returns the fixing days (e.g. 2) for the given InterestRateIndex object</description>
      <libraryFunction>fixingDays</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Natural</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlInterestRateIndexCurrency' type='QuantLib::InterestRateIndex'>
      <description>Returns the currency (e.g. EUR) for the given InterestRateIndex object</description>
      <libraryFunction>currency</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Currency</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlInterestRateIndexDayCounter' type='QuantLib::InterestRateIndex'>
      <description>Returns the DayCounter (e.g. Actual/360) for the given InterestRateIndex object</description>
      <libraryFunction>dayCounter</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::DayCounter</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlInterestRateIndexForecastFixing' type='QuantLib::InterestRateIndex' loopParameter='fixingDate'>
      <description>Returns the forecasted fixing for the given InterestRateIndex object. Today's fixing is forecasted even if the actual one is available in the time series.</description>
      <libraryFunction>forecastFixing</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='fixingDate' exampleValue='02-Jan-2007'>
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>fixing date(s)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlInterestRateIndexValueDate' type='QuantLib::InterestRateIndex' loopParameter='fixingDate'>
      <description>Returns the value date for the given fixing date for the given InterestRateIndex object</description>
      <libraryFunction>valueDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='fixingDate' exampleValue='02-Jan-2007'>
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>fixing date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlInterestRateIndexFixingDate' type='QuantLib::InterestRateIndex' loopParameter='valueDate'>
      <description>Returns the fixing date for the given value date for the given InterestRateIndex object</description>
      <libraryFunction>fixingDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='valueDate' exampleValue='02-Jan-2007'>
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>value date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlInterestRateIndexMaturity' type='QuantLib::InterestRateIndex' loopParameter='valueDate'>
      <description>Returns the maturity date for the given value date for the given InterestRateIndex object</description>
      <libraryFunction>maturityDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='valueDate' exampleValue='02-Jan-2007'>
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>value date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <!-- IborIndex interface -->

    <Member name='qlIborIndexBusinessDayConv' type='QuantLib::IborIndex'>
      <description>Returns the business day convention (e.g. Modified Following) for the given IborIndex object</description>
      <libraryFunction>businessDayConvention</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::BusinessDayConvention</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlIborIndexEndOfMonth' type='QuantLib::IborIndex'>
      <description>Returns TRUE if the given IborIndex object follows the 'end of month' convention</description>
      <libraryFunction>endOfMonth</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!--<Member name='qlIborIndexTermStructure' type='QuantLib::IborIndex'>
      <description>Returns the term structure for the given IborIndex (e.g. EURYC)</description>
      <libraryFunction>termStructure</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <SupportedPlatform name='Cpp>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>-->

    <!-- IborIndex constructor -->

    <Constructor name='qlIborIndex'>
      <libraryFunction>IborIndex</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='familyName' exampleValue='Euribor6M Actual/360'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>index name</description>
          </Parameter>
          <Parameter name='tenor' exampleValue='6M'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>index tenor (e.g. 2D for two days , 3W for three weeks, 6M for six months, 1Y for one year)</description>
          </Parameter>
          <Parameter name='fixingDays' exampleValue='2'>
            <type>QuantLib::Natural</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing days (e.g. 2)</description>
          </Parameter>
          <Parameter name='Currency'>
            <type>QuantLib::Currency</type>
            <tensorRank>scalar</tensorRank>
            <description>Index Currency</description>
          </Parameter>
          <Parameter name='calendar' exampleValue='TARGET'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET)</description>
          </Parameter>
          <Parameter name='BDayConvention'  exampleValue='Modified Following'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>business day convention (e.g. ModifiedFollowing)</description>
          </Parameter>
          <Parameter name='endOfMonth'  exampleValue='TRUE'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the index follow the 'end of month' convention</description>
          </Parameter>
          <Parameter name='dayCounter'  exampleValue='Actual/360'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>day counter (e.g. Actual360)</description>
          </Parameter>
          <!-- NULL REFERENCES NO LONGER SUPPORTED 
          <Parameter name='YieldCurve' libToHandle='YieldTermStructure' default='""'-->
          <Parameter name='YieldCurve'   exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>forecasting yield term structure</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- might we have qlGetEuriborTermStructure ?? -->
    <Procedure name='qlSetEuriborTermStructure'>
      <description>Sets the yield term structure which is linked to by the handle shared by all enumerated Euribor objects</description>
      <alias>QuantLibAddin::EuriborHandle::instance().linkEuriborHandle</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='termStructureID' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>handleToLib</superType>
            <tensorRank>scalar</tensorRank>
            <description>yield term structure to be referenced by all enumerated Euribor objects</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <!-- SwapIndex interface -->

    <Member name='qlSwapIndexFixedLegTenor' type='QuantLib::SwapIndex'>
      <description>Returns the fixed leg tenor (e.g. 1Y) for the given SwapIndex object</description>
      <libraryFunction>fixedLegTenor</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Period</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlSwapIndexFixedLegBDC' type='QuantLib::SwapIndex'>
      <description>Returns the business day convention (e.g. Modified Following) for the given SwapIndex object</description>
      <libraryFunction>fixedLegConvention</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::BusinessDayConvention</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!--<Member name='qlSwapIndexUnderlyingIndex' type='QuantLib::SwapIndex'>
      <description>Returns the underlying IborIndex for the given SwapIndex object (e.g. EURIBOR6M)</description>
      <libraryFunction>iborIndex</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <SupportedPlatform name='Cpp>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::BusinessDayConvention</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>-->

    <!-- fixedRateSchedule -->

    <!-- underlyingSwap -->

    <!-- SwapIndex constructor -->

    <Constructor name='qlSwapIndex'>
      <libraryFunction>SwapIndex</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='familyName' exampleValue='EuriborSwapFixA10Y 30/360 (BondBasis)'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>index name</description>
          </Parameter>
          <Parameter name='tenor' exampleValue='10Y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>index tenor (e.g. 2D for two days , 3W for three weeks, 6M for six months, 1Y for one year)</description>
          </Parameter>
          <Parameter name='fixingDays' exampleValue='2'>
            <type>QuantLib::Natural</type>
            <tensorRank>scalar</tensorRank>
            <description>swap rate fixing days (e.g. 2)</description>
          </Parameter>
          <Parameter name='Currency' exampleValue='EUR'>
            <type>QuantLib::Currency</type>
            <tensorRank>scalar</tensorRank>
            <description>Index Currency</description>
          </Parameter>
          <Parameter name='calendar' exampleValue='TARGET'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET)</description>
          </Parameter>
          <Parameter name='fixedLegTenor' exampleValue='1Y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>tenor of the underlying swap's fixed leg (e.g. 6M, 1Y, 3M)</description>
          </Parameter>
          <Parameter name='fixedLegBDC' exampleValue='Unadjusted'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>business day convention of the underlying swap's fixed leg (e.g. ModifiedFollowing)</description>
          </Parameter>
          <Parameter name='fixedLegDayCounter' exampleValue='30/360 (Bond Basis)'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>day counter of the underlying swap's fixed leg (e.g. 30/360::BondBasis)</description>
          </Parameter>
          <Parameter name='index' exampleValue='Euribor6M'>
            <type>QuantLib::IborIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>swap's floating ibor index object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

  </Functions>
</Category>
