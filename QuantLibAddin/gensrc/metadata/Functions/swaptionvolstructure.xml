<Category name='swaptionvolstructure'>
  <description>functions to construct and use SwaptionVolatilityStructure objects</description>
  <displayName>Swaption Volatility Term Structures</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <includes>
    <include>ql/termstructures/volatilities/swaption/swaptionvolcube2.hpp</include>
    <include>qlo/quotes.hpp</include>
    <include>qlo/optimization.hpp</include>
    <include>qlo/swaptionvolstructure.hpp</include>
    <include>qlo/index.hpp</include>
  </includes>
  <copyright>
    Copyright (C) 2006 Ferdinando Ametrano
    Copyright (C) 2006 Silvia Frasson
    Copyright (C) 2006 Mario Pucci
    Copyright (C) 2006, 2007 Giorgio Facchinetti
  </copyright>
  <Functions>

    <!-- SwaptionVolatilityStructure interface-->
    <Member name='qlSwaptionVTSVolatility' type='QuantLib::SwaptionVolatilityStructure' superType='handleToLib' loopParameter='strike'>
      <description>Returns volatility from the given SwaptionVolatilityStructure object.</description>
      <libraryFunction>volatility</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='optionDate' exampleValue ='5y'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>swaption expiry date</description>
          </Parameter>
          <Parameter name='swapTenor' exampleValue ='2y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>Underlying swap length as period (e.g. 5Y)</description>
          </Parameter>
          <Parameter name='strike' exampleValue ='0.04' const='False'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>swaption strike</description>
          </Parameter>
          <Parameter name='allowExtrapolation' const='False' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>Extrapolation Flag (TRUE allows extrapolation).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlSwaptionVTSVolatility2' type='QuantLib::SwaptionVolatilityStructure' superType='handleToLib' loopParameter='strike'>
      <description>Returns volatility from the given SwaptionVolatilityStructure object.</description>
      <libraryFunction>volatility</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='optionTenor' exampleValue ='5y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>swaption option tenor</description>
          </Parameter>
          <Parameter name='swapTenor' exampleValue ='2y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>Underlying swap length as period (e.g. 5Y)</description>
          </Parameter>
          <Parameter name='strike' exampleValue ='0.04' const='False'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>swaption strike</description>
          </Parameter>
          <Parameter name='allowExtrapolation' const='False' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>Extrapolation Flag (TRUE allows extrapolation)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlSwaptionVTSBlackVariance' type='QuantLib::SwaptionVolatilityStructure' superType='handleToLib' loopParameter='optionDate'>
      <description>Returns variance from the given SwaptionVolatilityStructure object.</description>
      <libraryFunction>blackVariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='optionDate' exampleValue ='5y'>
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>swaption expiry date</description>
          </Parameter>
          <Parameter name='swapTenor' exampleValue ='2y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying swap tenor</description>
          </Parameter>
          <Parameter name='strike' exampleValue ='0.04' const='False'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>swaption strike vector</description>
          </Parameter>
          <Parameter name='allowExtrapolation' const='False' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>Extrapolation Flag (TRUE allows extrapolation)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlSwaptionVTSBlackVariance2' type='QuantLib::SwaptionVolatilityStructure' superType='handleToLib' loopParameter='optionTenor'>
      <description>Returns variance from the given SwaptionVolatilityStructure object.</description>
      <libraryFunction>blackVariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='optionTenor' exampleValue ='5y'>
            <type>QuantLib::Period</type>
            <tensorRank>vector</tensorRank>
            <description>swaption option tenor</description>
          </Parameter>
          <Parameter name='swapTenor' exampleValue ='2y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying swap tenor</description>
          </Parameter>
          <Parameter name='strike' exampleValue ='0.04' const='False'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>swaption strike vector</description>
          </Parameter>
          <Parameter name='allowExtrapolation' const='False' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>Extrapolation Flag (TRUE allows extrapolation)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlSwaptionVTSMaxSwapTenor' type='QuantLib::SwaptionVolatilityStructure' superType='handleToLib'>
      <description>Returns the max swap tenor (i.e. length) for which the given SwaptionVolatilityStructure object can return vols.</description>
      <libraryFunction>maxSwapTenor</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Period</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlSwaptionVTSMinStrike' type='QuantLib::SwaptionVolatilityStructure' superType='handleToLib'>
      <description>Returns the minimum strike for which the given SwaptionVolatilityStructure object can return vols.</description>
      <libraryFunction>minStrike</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlSwaptionVTSMaxStrike' type='QuantLib::SwaptionVolatilityStructure' superType='handleToLib'>
      <description>Returns the maximum strike for which the given SwaptionVolatilityStructure object can return vols.</description>
      <libraryFunction>maxStrike</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlSwaptionVTSBusinessDayConvention' type='QuantLib::SwaptionVolatilityStructure' superType='handleToLib'>
      <description>Returns the business day convention used for option date calculation by the given SwaptionVolatilityStructure object.</description>
      <libraryFunction>businessDayConvention</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::BusinessDayConvention</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlSwaptionVTSOptionDateFromTenor' type='QuantLib::SwaptionVolatilityStructure' superType='handleToLib' loopParameter='optionTenor'>
      <description>Returns the option date corresponding to a given option tenor, taking calendar and business day convention into account, for the given SwaptionVolatilityStructure object.</description>
      <libraryFunction>optionDateFromTenor</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='optionTenor' exampleValue ='2y'>
            <type>QuantLib::Period</type>
            <tensorRank>vector</tensorRank>
            <description>swaption option tenor</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <!-- RelinkableHandle<SwaptionVolatilityStructure> -->
    <Constructor name='qlRelinkableHandleSwaptionVolatilityStructure'>
      <libraryFunction>RelinkableHandle&lt;QuantLib::SwaptionVolatilityStructure&gt;</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='swaptionVol' default='""'>
            <type>QuantLib::SwaptionVolatilityStructure</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>SwaptionVolatilityStructure object ID. If omitted, no YieldTermStructure is linked by the RelinkableHandle.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlRelinkableHandleSwaptionVolatilityStructureLinkTo' type='QuantLib::SwaptionVolatilityStructure' superType='objectHandle'>
      <libraryFunction>linkTo</libraryFunction>
      <description>relink handle</description>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='swaptionVol' >
            <type>QuantLib::SwaptionVolatilityStructure</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>SwaptionVolatilityStructure object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- SwaptionVolatilityStructure constructors -->
    <Constructor name='qlSwaptionVTSConstant'>
      <libraryFunction>SwaptionConstantVolatility</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='referenceDate' exampleValue='=qlSettingsEvaluationDate()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>reference date</description>
          </Parameter>
          <Parameter name='volatility'  exampleValue='12.5%'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>vol quotes</description>
          </Parameter>
          <Parameter name='dayCounter' exampleValue='Actual/365 (Fixed)'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>day counter (e.g. Actual/360)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlSwaptionVTSMatrix'>
      <libraryFunction>SwaptionVolatilityMatrix</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='calendar'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET) used for calculating the exercise dates from the expiries</description>
          </Parameter>
          <Parameter name='optionTenors' exampleValue ='2y, 5y'>
            <type>QuantLib::Period</type>
            <tensorRank>vector</tensorRank>
            <description>swaption expiries as periods</description>
          </Parameter>
          <Parameter name='swapTenors' exampleValue ='2y, 5y'>
            <type>QuantLib::Period</type>
            <tensorRank>vector</tensorRank>
            <description>underlying swap lengths</description>
          </Parameter>
          <Parameter name='volatilities' >
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>matrix</tensorRank>
            <description>vol quotes</description>
          </Parameter>
          <Parameter name='dayCounter'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>day counter (e.g. Actual/360)</description>
          </Parameter>
          <Parameter name='BusinessDayConvention' default='"Following"'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>Business day convention used for calculating the exercise dates from the expiries</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- SwaptionVolatilityDiscrete interface -->
    <Member name='qlSwaptionVTSMatrixOptionDates' type='QuantLib::SwaptionVolatilityDiscrete'>
      <description>Returns the vector of swaption exercise dates for the given SwaptionVolatilityDiscrete object.</description>
      <libraryFunction>optionDates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlSwaptionVTSMatrixOptionTenors' type='QuantLib::SwaptionVolatilityDiscrete'>
      <description>Returns the vector of swaption exercise tenors for the given SwaptionVolatilityDiscrete object.</description>
      <libraryFunction>optionTenors</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Period</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlSwaptionVTSMatrixSwapTenors' type='QuantLib::SwaptionVolatilityDiscrete'>
      <description>Returns the vector of underlying swap tenors for the given SwaptionVolatilityDiscrete object.</description>
      <libraryFunction>swapTenors</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Period</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <!-- SwaptionVolatilityMatrix interface -->
    <Member name='qlSwaptionVTSMatrixLocate' type='QuantLibAddin::SwaptionVolatilityMatrix'>
      <description>Returns the lower indexes of surrounding volatility matrix corners for the given SwaptionVolatilityMatrix object.</description>
      <libraryFunction>locate</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='optionDate' exampleValue ='5y'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>swaption expiry date</description>
          </Parameter>
          <Parameter name='swapTenor' exampleValue ='2y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>Underlying swap length as period (e.g. 5Y)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>vector</tensorRank>
        <description>lower indexes of sourrounding volatility matrix corners</description>
      </ReturnValue>
    </Member>

    <!-- SwaptionVolCube2 constructors -->
    <Constructor name='qlSwaptionVolCube2'>
      <libraryFunction>SwaptionVolCube2</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='atmVolStructure' >
            <type>QuantLib::SwaptionVolatilityStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>At-the-money volatility structure</description>
          </Parameter>
          <Parameter name='optionTenor' exampleValue ='5y'>
            <type>QuantLib::Period</type>
            <tensorRank>vector</tensorRank>
            <description>smile cube's expiries as periods</description>
          </Parameter>
          <Parameter name='swapTenor' exampleValue ='2y'>
            <type>QuantLib::Period</type>
            <tensorRank>vector</tensorRank>
            <description>smile cube's underlying swap lengths</description>
          </Parameter>
          <Parameter name='strikeSpreads' exampleValue ='.01, .02, .03'>
            <type>QuantLib::Spread</type>
            <tensorRank>vector</tensorRank>
            <description>smile cube's strike spreads over the ATM strike rate.</description>
          </Parameter>
          <Parameter name='spreadVols' >
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>matrix</tensorRank>
            <description>matrix of spread vol quotes</description>
          </Parameter>
          <Parameter name='swapIndexBase'>
            <type>QuantLib::SwapIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>Base SwapIndex object ID</description>
          </Parameter>
          <Parameter name='vegaWeightedSmileFit' exampleValue ='TRUE'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>if TRUE the smile fit is weighted using options' vega.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- SwaptionVolatilityCube interface -->
    <Member name='qlSwaptionVTSatmStrike' type='QuantLib::SwaptionVolatilityCube' loopParameter='optionDate'>
      <description>Returns the at-the-money swaption strike, for a given exercise date and underlying swap length, for the given SwaptionVolatilityCube object.</description>
      <libraryFunction>atmStrike</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='optionDate' exampleValue ='5y'>
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>swaption expiry date</description>
          </Parameter>
          <Parameter name='swapTenor' exampleValue ='2y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>Underlying swap length as period (e.g. 5Y)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlSwaptionVTSatmStrike2' type='QuantLib::SwaptionVolatilityCube' loopParameter='optionTenor'>
      <description>Returns the at-the-money swaption strike, for a given option tenor and underlying swap length, for the given SwaptionVolatilityCube object.</description>
      <libraryFunction>atmStrike</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='optionTenor' exampleValue ='5y'>
            <type>QuantLib::Period</type>
            <tensorRank>vector</tensorRank>
            <description>swaption's option tenor</description>
          </Parameter>
          <Parameter name='swapTenor' exampleValue ='2y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>Underlying swap length as period (e.g. 5Y)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <!-- SwaptionVolCube1 constructors -->
    <Constructor name='qlSwaptionVolCube1'>
      <libraryFunction>SwaptionVolCube1</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='atmVolStructure' >
            <type>QuantLib::SwaptionVolatilityStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>At-the-money volatility structure</description>
          </Parameter>
          <Parameter name='optionTenors' exampleValue ='5y'>
            <type>QuantLib::Period</type>
            <tensorRank>vector</tensorRank>
            <description>smile cube's expiries as periods</description>
          </Parameter>
          <Parameter name='swapTenors' exampleValue ='2y'>
            <type>QuantLib::Period</type>
            <tensorRank>vector</tensorRank>
            <description>smile cube's underlying swap lengths</description>
          </Parameter>
          <Parameter name='strikeSpreads' exampleValue ='.01, .02, .03'>
            <type>QuantLib::Spread</type>
            <tensorRank>vector</tensorRank>
            <description>smile cube's strike spreads over the ATM strike rate.</description>
          </Parameter>
          <Parameter name='spreadVols' >
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>matrix</tensorRank>
            <description>matrix of spread vol quotes</description>
          </Parameter>
          <Parameter name='swapIndexBase'>
            <type>QuantLib::SwapIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>Base SwapIndex object ID</description>
          </Parameter>
          <Parameter name='vegaWeightedSmileFit' exampleValue ='TRUE'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>if TRUE the smile fit is weighted using options' vega.</description>
          </Parameter>
          <Parameter name='guess' >
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>matrix</tensorRank>
            <description>matrix of parameters guess quotes.</description>
          </Parameter>
          <Parameter name='isFixed' exampleValue ='FALSE, TRUE, FALSE, FALSE'>
            <type>bool</type>
            <tensorRank>vector</tensorRank>
            <description>if TRUE parameter guess is not calibrated.</description>
          </Parameter>
          <Parameter name='isAtmCalibrated' exampleValue ='FALSE'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>if TRUE the cube is calibrated to atm matrix .</description>
          </Parameter>
          <Parameter name="endCriteria" default='""'>
            <type>QuantLib::EndCriteria</type>
            <tensorRank>scalar</tensorRank>
            <description>EndCriteria object ID (if omitted default = EndCriteria(60000, 100, 1e-8, 1e-8, 1e-8) is used)</description>
          </Parameter>
          <Parameter name='maxErrorTol' default='QuantLib::Null&lt;QuantLib::Real&gt;()'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>max error tolerance</description>
          </Parameter>
          <Parameter name="optMethod" default='""'>
            <type>QuantLib::OptimizationMethod</type>
            <tensorRank>scalar</tensorRank>
            <description>Optmization method object ID (if omitted default = Simplex(0.01) is used)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- SwaptionVolCube1 interface -->
    <Member name='qlSparseSabrParameters' type='QuantLibAddin::SwaptionVolCube1'>
      <description>returns results of Sabr calibration for the given SwaptionVolCube1 object</description>
      <libraryFunction>getSparseSabrParameters</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>any</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlDenseSabrParameters' type='QuantLibAddin::SwaptionVolCube1'>
      <description>returns results of Sabr calibration for the given SwaptionVolCube1 object</description>
      <libraryFunction>getDenseSabrParameters</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>any</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketVolCube' type='QuantLibAddin::SwaptionVolCube1'>
      <description>returns the market volatility cube for the given SwaptionVolCube1 object</description>
      <libraryFunction>getMarketVolCube</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>any</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlVolCubeAtmCalibrated' type='QuantLibAddin::SwaptionVolCube1'>
      <description>returns the volatility cube calibrated to ATM matrix for the given SwaptionVolCube1 object</description>
      <libraryFunction>getVolCubeAtmCalibrated</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>any</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <!-- SmileSectionInteface constructors -->
    <Constructor name='qlSmileSectionByCube'>
      <libraryFunction>SmileSectionByCube</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='volCube'>
            <type>QuantLib::SwaptionVolatilityCube</type>
            <tensorRank>scalar</tensorRank>
            <description>Swaption volatility cube object ID</description>
          </Parameter>
          <Parameter name='optionDate' exampleValue ='5y'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>smile's expiry as date</description>
          </Parameter>
          <Parameter name='swapTenor' exampleValue ='2y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>smile's underlying swap length</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlSmileSectionByCube2'>
      <libraryFunction>SmileSectionByCube</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='volCube'>
            <type>QuantLib::SwaptionVolatilityCube</type>
            <tensorRank>scalar</tensorRank>
            <description>Swaption volatility cube object ID</description>
          </Parameter>
          <Parameter name='optionDate' exampleValue ='5y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>smile's expiry as period</description>
          </Parameter>
          <Parameter name='swapTenor' exampleValue ='2y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>smile's underlying swap length</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlSpreadedSwaptionVolatilityStructure'>
      <libraryFunction>SpreadedSwaptionVolatilityStructure</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='SwaptionVolatilityStructure' >
            <type>QuantLib::SwaptionVolatilityStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>Swaption volatility structure object ID</description>
          </Parameter>
          <Parameter name='spread'>
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>spread</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

  </Functions>
</Category>
