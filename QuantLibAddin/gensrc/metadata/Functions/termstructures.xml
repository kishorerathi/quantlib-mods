<Category name='termstructures'>
  <description>functions to construct and use TermStructure objects</description>
  <displayName>Term Structures</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <includes>
    <include>qlo/termstructures.hpp</include>
    <include>ql/interestrate.hpp</include>
  </includes>
  <copyright>
    Copyright (C) 2005, 2006 Eric Ehlers
    Copyright (C) 2006 Ferdinando Ametrano
    Copyright (C) 2005 Plamen Neykov
    Copyright (C) 2005 Aurelien Chanudet
  </copyright>
  <Functions>

    <!-- TermStructure interface -->
    <Member name='qlTermStructureReferenceDate' type='QuantLib::TermStructure'>
      <description>Returns the reference date for the given TermStructure object</description>
      <libraryFunction>referenceDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlTermStructureCalendar' type='QuantLib::TermStructure'>
      <description>Returns the calendar used by the given TermStructure object</description>
      <libraryFunction>calendar</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Calendar</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlTermStructureMaxDate' type='QuantLib::TermStructure'>
      <description>Returns the max date for the given TermStructure object</description>
      <libraryFunction>maxDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlTermStructureDayCounter' type='QuantLib::TermStructure'>
      <description>Returns the DayCounter used by the given TermStructure object</description>
      <libraryFunction>dayCounter</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::DayCounter</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- YieldTermStructure interface -->
    <Member name='qlYieldTSDiscount' type='QuantLib::YieldTermStructure' superType='handleToLib' loopParameter='DfDates'>
      <description>Returns a discount factor from the given YieldTermStructure object</description>
      <libraryFunction>discount</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='DfDates' exampleValue ="'1Y,2Y,3Y,4Y,5Y">
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>vector of dates</description>
          </Parameter>
          <Parameter name='allowExtrapolation' const='False' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE allows extrapolation. If omitted, default = FALSE is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::DiscountFactor</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlYieldTSForwardRate' type='QuantLib::YieldTermStructure' superType='handleToLib' loopParameter='d2'>
      <description>Returns the forward interest rate from the given YieldTermStructure object</description>
      <libraryFunction>forwardRate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='d1' exampleValue ='1M'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>first date</description>
          </Parameter>
          <Parameter name='d2' exampleValue ="'2M,3M,4M,5M,6M">
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>second date</description>
          </Parameter>
          <Parameter name='resultDayCounter'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>result DayCounter</description>
          </Parameter>
          <Parameter name='compounding' const='False'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate compounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</description>
          </Parameter>
          <Parameter name='frequency' default='"Annual"' const='False'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). If omitted, default = Annual is used.</description>
          </Parameter>
          <Parameter name='allowExtrapolation' const='False' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE allows extrapolation. If omitted, default = FALSE is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::InterestRate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlYieldTSForwardRate2' type='QuantLib::YieldTermStructure' superType='handleToLib' loopParameter='date'>
      <description>Returns the forward interest rate from the given YieldTermStructure object</description>
      <libraryFunction>forwardRate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='date' exampleValue ="'2M,3M,4M,5M,6M">
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>first date</description>
          </Parameter>
          <Parameter name='Period' exampleValue ='1Y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>Period (e.g. '7D', '3M', '1Y', etc)</description>
          </Parameter>
          <Parameter name='resultDayCounter'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>result DayCounter</description>
          </Parameter>
          <Parameter name='compounding' const='False'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate compounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</description>
          </Parameter>
          <Parameter name='frequency' default='"Annual"' const='False'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). If omitted, default = Annual is used.</description>
          </Parameter>
          <Parameter name='allowExtrapolation' const='False' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE allows extrapolation. If omitted, default = Annual is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::InterestRate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlYieldTSZeroRate' type='QuantLib::YieldTermStructure' superType='handleToLib' loopParameter='dates'>
      <description>Returns the zero interest rate from the given YieldTermStructure object</description>
      <libraryFunction>zeroRate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='dates' exampleValue ="'2M,3M,4M,5M,6M">
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>date</description>
          </Parameter>
          <Parameter name='resultDayCounter'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>resultDayCounter</description>
          </Parameter>
          <Parameter name='compounding' const='False'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</description>
          </Parameter>
          <Parameter name='frequency' default='"Annual"' const='False'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). If omitted, default = Annual is used.</description>
          </Parameter>
          <Parameter name='allowExtrapolation' const='False' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE allows extrapolation. If omitted, default = FALSE is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::InterestRate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlYieldTSParRate' type='QuantLib::YieldTermStructure' superType='handleToLib'>
      <description>Returns the par interest rate from the given YieldTermStructure object</description>
      <libraryFunction>parRate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='tenor' exampleValue ='1'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>tenor in years</description>
          </Parameter>
          <Parameter name='startDate' exampleValue ='0D'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>start date</description>
          </Parameter>
          <Parameter name='frequency' default='"Annual"' const='False'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). If omitted, default = Annual is used.</description>
          </Parameter>
          <Parameter name='allowExtrapolation' const='False' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE allows extrapolation. If omitted, default = FALSE is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- RelinkableHandle<HandleYieldTermStructure> -->
    <Constructor name='qlRelinkableHandleYieldTermStructure'>
      <libraryFunction>RelinkableHandle&lt;QuantLib::YieldTermStructure&gt;</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='currentLink' default='""'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>YieldTermStructure object ID. If omitted, nothing is linked by the RelinkableHandle.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlRelinkableHandleYieldTermStructureLinkTo' type='QuantLib::YieldTermStructure' superType='objectHandle'>
      <libraryFunction>linkTo</libraryFunction>
      <description>relink handle</description>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='currentLink' >
            <type>QuantLib::YieldTermStructure</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>YieldTermStructure object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- YieldTermStructure constructors -->
    <Constructor name='qlPiecewiseYieldCurve'>
      <libraryFunction>PiecewiseYieldCurve</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='nDays' default='0'>
            <type>QuantLib::Natural</type>
            <tensorRank>scalar</tensorRank>
            <description>number of days to advance from EvaluationDate (usually zero or two): it fixes the date at which the discount factor = 1.0. If omitted, default = 0 is used.</description>
          </Parameter>
          <Parameter name='calendar'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET) to advance from global EvaluationDate</description>
          </Parameter>
          <Parameter name='rateHelpers' exampleValue ='EUROND,EURTND,EURSND,EURSWD,EUR2WD'>
            <type>string</type>
            <tensorRank>vector</tensorRank>
            <description>vector of rate-helpers</description>
          </Parameter>
          <Parameter name='dayCounter'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>day counter (e.g. Actual/360)</description>
          </Parameter>
          <Parameter name='traitsID' default='"ForwardRate"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Discount, ZeroRate, or ForwardRate. If omitted, default = Discount is used.</description>
          </Parameter>
          <Parameter name='interpolatorID' default='"Cubic"'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>Linear, LogLinear, or Cubic. If omitted, default = LogLinear is used.</description>
          </Parameter>
          <Parameter name='accuracy' default='1.0e-12'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Bootstrappin accuracy.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlDiscountCurve'>
      <libraryFunction>DiscountCurve</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='curveDates' exampleValue ="'2M,3M,4M,5M,6M">
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>dates of the curve</description>
          </Parameter>
          <Parameter name='curveDiscounts'  exampleValue ='1.0,0.95,0.9,0.85,0.8'>
            <type>QuantLib::DiscountFactor</type>
            <tensorRank>vector</tensorRank>
            <description>discount factors for the above dates</description>
          </Parameter>
          <Parameter name='dayCounter'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>day counter (e.g. Actual/360)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlZeroCurve'>
      <libraryFunction>ZeroCurve</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='curveDates' exampleValue ="'2M,3M,4M,5M,6M">
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>dates of the curve</description>
          </Parameter>
          <Parameter name='curveYields' exampleValue ='0.02,0.02,0.02,0.02,0.02'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>zero rates for the above dates</description>
          </Parameter>
          <Parameter name='dayCounter'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>day counter (e.g. Actual/360)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlForwardCurve'>
      <libraryFunction>ForwardCurve</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='curveDates' exampleValue ="'2M,3M,4M,5M,6M">
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>dates of the curve</description>
          </Parameter>
          <Parameter name='forwardYields' exampleValue ='0.02,0.02,0.02,0.02,0.02'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>forwards rates for the above dates</description>
          </Parameter>
          <Parameter name='dayCounter'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>day counter (e.g. Actual/360)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlFlatForward'>
      <libraryFunction>FlatForward</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='nDays' default='0'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>number of days to advance from EvaluationDate (usually zero or two): it fixes the date at which the discount factor = 1.0. If omitted, default = 0 is used.</description>
          </Parameter>
          <Parameter name='calendar' exampleValue ='NullCalendar'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET) to advance from global EvaluationDate</description>
          </Parameter>
          <Parameter name='rate' exampleValue='0.044'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>the curve level</description>
          </Parameter>
          <Parameter name='dayCounter' exampleValue ='Actual/365'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>day counter (e.g. Actual/360)</description>
          </Parameter>
          <Parameter name='compounding' exampleValue ='Continuous'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</description>
          </Parameter>
          <Parameter name='frequency' default='"Annual"' exampleValue ='Annual'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly). If omitted, default = Annual is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlForwardSpreadedTermStructure'>
      <libraryFunction>ForwardSpreadedTermStructure</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='YieldCurve' >
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting yield term structure object ID</description>
          </Parameter>
          <Parameter name='spread' exampleValue ='0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>scalar</tensorRank>
            <description>the spread to be applied to the forward rates of the yield curve</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlImpliedTermStructure'>
      <libraryFunction>ImpliedTermStructure</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='YieldCurve' >
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting yield term structure object ID</description>
          </Parameter>
          <Parameter name='referenceDate' exampleValue ='1D'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>the reference date the base YieldTermStructure should be shifted to</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

  </Functions>
</Category>
