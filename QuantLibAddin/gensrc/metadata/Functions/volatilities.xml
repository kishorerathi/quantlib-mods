<Category name='volatilities'>
  <description>functions to construct and use volatility objects</description>
  <displayName>Volatilities</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <addinIncludes>
    <include>qlo/volatilities.hpp</include>
    <include>ql/math/interpolations/sabrinterpolation.hpp</include>
    <include>ql/voltermstructures/equityfx/blackconstantvol.hpp</include>
    <include>ql/voltermstructures/equityfx/blackvariancesurface.hpp</include>
    <include>ql/voltermstructures/interestrate/abcdatmvolcurve.hpp</include>
  </addinIncludes>
  <serializationIncludes>
    <include>qlo/volatilities.hpp</include>
    <include>ql/math/interpolations/sabrinterpolation.hpp</include>
    <include>ql/voltermstructures/equityfx/blackconstantvol.hpp</include>
    <include>ql/voltermstructures/equityfx/blackvariancesurface.hpp</include>
  </serializationIncludes>
  <copyright>
    Copyright (C) 2007 Ferdinando Ametrano
    Copyright (C) 2005, 2006 Eric Ehlers
  </copyright>
  <Functions>

    <Procedure name='qlSabrVolatility'>
      <description>Sabr formula for smile volatility</description>
      <alias>QuantLib::sabrVolatility</alias>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Strike' exampleValue ='0.06'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>option strike</description>
          </Parameter>
          <Parameter name='Forward' exampleValue ='0.04'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying forward value</description>
          </Parameter>
          <Parameter name='ExpTime' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>expiry time (in years)</description>
          </Parameter>
          <Parameter name='Alpha' exampleValue ='0.02'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>alpha</description>
          </Parameter>
          <Parameter name='Beta' exampleValue ='0.6'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>beta</description>
          </Parameter>
          <Parameter name='Nu' exampleValue ='.02'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>nu</description>
          </Parameter>
          <Parameter name='Rho' exampleValue ='0.03'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>rho</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Constructor name='qlBlackConstantVol'>
      <libraryFunction>BlackConstantVol</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='C'/>
        <SupportedPlatform name='Calc'/>
        <SupportedPlatform name='Guile'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='SettlementDate' exampleValue ='0D'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date</description>
          </Parameter>
          <Parameter name='Calendar' exampleValue='TARGET'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET)</description>
          </Parameter>
          <Parameter name='Volatility' exampleValue ='0.2'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>volatility</description>
          </Parameter>
          <Parameter name='DayCounter'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>day counter (e.g. Actual/360)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlBlackVarianceSurface'>
      <libraryFunction>BlackVarianceSurface</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='SettlementDate' exampleValue ='0D'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date</description>
          </Parameter>
          <Parameter name='Calendar' exampleValue='TARGET'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET)</description>
          </Parameter>
          <Parameter name='Dates' exampleValue ='3m, 1y, 5y'>
            <type>QuantLib::Date</type>
            <tensorRank>vector</tensorRank>
            <description>dates</description>
          </Parameter>
          <Parameter name='Strikes' exampleValue ='0.03, 0.05, 0.10'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>strikes</description>
          </Parameter>
          <Parameter name='Volatilities'>
            <type>QuantLib::Matrix</type>
            <tensorRank>matrix</tensorRank>
            <description>volatilities</description>
          </Parameter>
          <Parameter name='DayCounter'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>day counter (e.g. Actual/360)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- VolatilityTermStructure interface -->
    <Member name='qlVolatilityTermStructureBusinessDayConvention' type='QuantLib::VolatilityTermStructure' superType='handleToLib'>
      <description>Returns the business day convention used in tenor to date conversion</description>
      <libraryFunction>businessDayConvention</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::BusinessDayConvention</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlVolatilityTermStructureOptionDateFromTenor' type='QuantLib::VolatilityTermStructure' superType='handleToLib'>
      <description>Returns the option date corrisponding to a given option tenor</description>
      <libraryFunction>optionDateFromTenor</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Tenor' exampleValue = '1Y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>option tenor</description>
          </Parameter>
          </Parameters>
        </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- BlackAtmVolCurve -->
    <Member name='qlBlackAtmVolCurveAtmVol' type='QuantLib::BlackAtmVolCurve' superType='handleToLib'>
      <description>Returns the spot at-the-money (no-smile) volatility at a given option date</description>
      <libraryFunction>atmVol</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='OptionDate' exampleValue = '1Y'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The date at which the volatility is evaluated</description>
          </Parameter>
          <Parameter name='AllowExtrapolation' const='False' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>Extrapolation Flag (TRUE allows extrapolation)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackAtmVolCurveAtmVol2' type='QuantLib::BlackAtmVolCurve' superType='handleToLib'>
      <description>Returns the spot at-the-money (no-smile) volatility at a given option tenor</description>
      <libraryFunction>atmVol</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='OptionTenor' exampleValue = '1Y'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>The time at which the volatility is evaluated</description>
          </Parameter>
          <Parameter name='AllowExtrapolation' const='False' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>Extrapolation Flag (TRUE allows extrapolation)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackAtmVolCurveAtmVol3' type='QuantLib::BlackAtmVolCurve' superType='handleToLib'>
      <description>Returns the spot at-the-money (no-smile) volatility at a given option time</description>
      <libraryFunction>atmVol</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='OptionTime' exampleValue = '1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>The time at which the volatility is evaluated</description>
          </Parameter>
          <Parameter name='AllowExtrapolation' const='False' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>Extrapolation Flag (TRUE allows extrapolation)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackAtmVolCurveAtmVariance' type='QuantLib::BlackAtmVolCurve' superType='handleToLib'>
      <description>Returns the spot at-the-money (no-smile) variance at a given option date</description>
      <libraryFunction>atmVariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='OptionDate' exampleValue = '1Y'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>The date at which the volatility is evaluated</description>
          </Parameter>
          <Parameter name='AllowExtrapolation' const='False' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>Extrapolation Flag (TRUE allows extrapolation)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackAtmVolCurveAtmVariance2' type='QuantLib::BlackAtmVolCurve' superType='handleToLib'>
      <description>Returns the spot at-the-money (no-smile) variance at a given option tenor</description>
      <libraryFunction>atmVariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='OptionTenor' exampleValue = '1Y'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>The time at which the volatility is evaluated</description>
          </Parameter>
          <Parameter name='AllowExtrapolation' const='False' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>Extrapolation Flag (TRUE allows extrapolation)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackAtmVolCurveAtmVariance3' type='QuantLib::BlackAtmVolCurve' superType='handleToLib'>
      <description>Returns the spot at-the-money (no-smile) variance at a given option time</description>
      <libraryFunction>atmVariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='OptionTime' exampleValue = '1.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>The time at which the volatility is evaluated</description>
          </Parameter>
          <Parameter name='AllowExtrapolation' const='False' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>Extrapolation Flag (TRUE allows extrapolation)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- AbcdAtmVolCurve -->
    <Member name='qlAbcdAtmVolCurveOptionTenors' type='QuantLib::AbcdAtmVolCurve' superType='handleToLib'>
      <description></description>
      <libraryFunction>optionTenors</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Period</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdAtmVolCurveOptionDates' type='QuantLib::AbcdAtmVolCurve' superType='handleToLib'>
      <description></description>
      <libraryFunction>optionDates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdAtmVolCurveOptionTimes' type='QuantLib::AbcdAtmVolCurve' superType='handleToLib'>
      <description></description>
      <libraryFunction>optionTimes</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlAbcdAtmVolCurve'>
      <libraryFunction>AbcdAtmVolCurve</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='SettlementDays' exampleValue ='2D'>
            <type>QuantLib::Natural</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement days.</description>
          </Parameter>
          <Parameter name='Calendar' exampleValue='TARGET'>
            <type>QuantLib::Calendar</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET)</description>
          </Parameter>
          <Parameter name='OptionTenors'>
            <type>QuantLib::Period</type>
            <tensorRank>vector</tensorRank>
            <description>options tenors.</description>
          </Parameter>
          <Parameter name='VolatilitiesQuotes' >
            <type>QuantLib::Quote</type>
            <superType>libToHandle</superType>
            <tensorRank>vector</tensorRank>
            <description>volatilities quotes</description>
          </Parameter>
          <Parameter name='Convention' exampleValue='Following'>
            <type>QuantLib::BusinessDayConvention</type>
            <tensorRank>scalar</tensorRank>
            <description>business day convention (e.g. Following)</description>
          </Parameter>
          <Parameter name='DayCounter' exampleValue='Actual365Fixed'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>day counter convention (e.g. Actual365Fixed)</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

  </Functions>
</Category>
