<Category name='marketmodels'>
  <description>functions to construct and use Market Models related objects</description>
  <displayName>MarketModels</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <includes>
    <include>ql/math/Optimization/method.hpp</include>
    <include>ql/MarketModels/swapforwardconversionmatrix.hpp</include>
    <include>ql/MarketModels/swapforwardmappings.hpp</include>
    <include>ql/MarketModels/CurveStates/cmswapcurvestate.hpp</include>
    <include>ql/MarketModels/CurveStates/coterminalswapcurvestate.hpp</include>
    <include>ql/MarketModels/CurveStates/lmmcurvestate.hpp</include>
    <include>qlo/optimization.hpp</include>
    <include>qlo/marketmodels.hpp</include>
    <include>qlo/sequencestatistics.hpp</include>
    <include>qlo/payoffs.hpp</include>
  </includes>
  <copyright>

    Copyright (C) 2006, 2007 Ferdinando Ametrano
    Copyright (C) 2007 Chiara Fornarola
    Copyright (C) 2006, 2007 Marco Bianchetti
    Copyright (C) 2006, 2007 Cristina Duminuco
    Copyright (C) 2006, 2007 Giorgio Facchinetti
  </copyright>
  <Functions>

    <!-- MarketModelMultiProductComposite base class interface  -->

    <Constructor name='qlMarketModelMultiProductComposite'>
      <libraryFunction>MultiProductComposite</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlMarketModelMultiProductCompositeAdd' type='QuantLib::MultiProductComposite' superType='libraryClass'>
      <description>Add new product to MarketModelComposite object</description>
      <libraryFunction>MarketModelComposite::add</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='product' >
            <type>QuantLib::MarketModelMultiProduct</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>ID of product object</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelMultiProductCompositeFinalize' type='QuantLib::MultiProductComposite' superType='libraryClass'>
      <description>finalize the MarketModelComposite object</description>
      <libraryFunction>finalize</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>
    <!-- MarketModelMultiProduct base class interface  -->
    
    <Member name='qlMarketModelMultiProductSuggestedNumeraires' type='QuantLib::MarketModelMultiProduct' superType='libraryClass'>
      <description>suggested Numeraires for the MarketModelMultiProduct object</description>
      <libraryFunction>suggestedNumeraires</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Size</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelMultiProductPossibleCashFlowTimes' type='QuantLib::MarketModelMultiProduct' superType='libraryClass'>
      <description>possible cash flow times for the MarketModelMultiProduct object</description>
      <libraryFunction>possibleCashFlowTimes</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelMultiProductNumberOfProducts' type='QuantLib::MarketModelMultiProduct' superType='libraryClass'>
      <description>number of products in the MarketModelMultiProduct object</description>
      <libraryFunction>numberOfProducts</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelMultiProductMaxNumberOfCashFlowsPerProductPerStep' type='QuantLib::MarketModelMultiProduct' superType='libraryClass'>
      <description>Max number of cashflows per product per step for the MarketModelMultiProduct object</description>
      <libraryFunction>maxNumberOfCashFlowsPerProductPerStep</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- MarketModelMultiProduct derived classes' constructors  -->

    <Constructor name='qlMarketModelOneStepForwards'>
      <libraryFunction>OneStepForwards</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='rateTimes' exampleValue ='0.0,1.0,2.0,3.0,4.0,5.0'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate fixing times</description>
          </Parameter>
          <Parameter name='accruals' exampleValue ='1.0,1.0,1.0,1.0,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>accrual factors</description>
          </Parameter>
          <Parameter name='paymentTimes' exampleValue ='1.0,2.0,3.0,4.0,5.0'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>payment times of the product</description>
          </Parameter>
          <Parameter name='strikes' exampleValue ='0.01,0.01,0.01,0.01,0.01'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>forward strikes</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlMarketModelMultiStepRatchet'>
      <libraryFunction>MultiStepRatchet</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='rateTimes' exampleValue ='0.0,1.0,2.0,3.0,4.0,5.0'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate fixing times</description>
          </Parameter>
          <Parameter name='accruals' exampleValue ='1.0,1.0,1.0,1.0,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>accrual factors between rate fixing times</description>
          </Parameter>
          <Parameter name='paymentTimes' exampleValue ='1.0,2.0,3.0,4.0,5.0'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>payment times of the product</description>
          </Parameter>
          <Parameter name='gearingOfFloor' exampleValue ='1.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>gearing of floor</description>
          </Parameter>
          <Parameter name='gearingOfFixing' exampleValue ='1.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>gearing of fixing</description>
          </Parameter>
          <Parameter name='spreadOfFloor' exampleValue ='0.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>spread of floor</description>
          </Parameter>
          <Parameter name='spreadOfFixing' exampleValue ='0.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>spread of fixing</description>
          </Parameter>
          <Parameter name='initialFloor' exampleValue ='0.01'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>initial floor</description>
          </Parameter>
          <Parameter name='payer' exampleValue ='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>payer if true</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlMarketModelOneStepOptionlets'>
      <libraryFunction>OneStepOptionlets</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='rateTimes'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate fixing times</description>
          </Parameter>
          <Parameter name='accruals'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>accrual factors</description>
          </Parameter>
          <Parameter name='paymentTimes'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>payment times of the product</description>
          </Parameter>
          <Parameter name='payoffs'>
            <type>QuantLib::Payoff</type>
            <tensorRank>vector</tensorRank>
            <description>striked type payoff object IDs</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- EvolutionDescription class costructor -->
    <Constructor name='qlEvolutionDescription'>
      <libraryFunction>EvolutionDescription</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='rateTimes' exampleValue ='0.0,1.0,2.0,3.0,4.0,5.0'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate fixing times</description>
          </Parameter>
          <Parameter name='evolutionTimes' exampleValue ='1.0,2.0,3.0,4.0,5.0'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>evolution times in the simulation</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlEvolutionDescriptionFromProduct'>
      <libraryFunction>EvolutionDescription</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='product' >
            <type>QuantLib::MarketModelMultiProduct</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>ID of product object</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- EvolutionDescription class interfaces -->
    <Member name='qlEvolutionDescriptionRateTimes' type='QuantLib::EvolutionDescription' superType='libraryClass'>
      <description>rates fixing times for the EvolutionDescription object</description>
      <libraryFunction>rateTimes</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlEvolutionDescriptionRateTaus' type='QuantLib::EvolutionDescription' superType='libraryClass'>
      <description>rate taus for the EvolutionDescription object</description>
      <libraryFunction>rateTaus</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlEvolutionDescriptionEvolutionTimes' type='QuantLib::EvolutionDescription' superType='libraryClass'>
      <description>evolution times for the EvolutionDescription object</description>
      <libraryFunction>evolutionTimes</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlEvolutionDescriptionEffectiveStopTime' type='QuantLib::EvolutionDescription' superType='libraryClass'>
      <description>for each step returns a row with the effective evolution stopping time for each rate</description>
      <libraryFunction>effectiveStopTime</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlEvolutionDescriptionFirstAliveRate' type='QuantLib::EvolutionDescription' superType='libraryClass'>
      <description>first alive rate at each evolution time for the EvolutionDescription object</description>
      <libraryFunction>firstAliveRate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Size</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlEvolutionDescriptionNumberOfRates' type='QuantLib::EvolutionDescription' superType='libraryClass'>
      <description>number of rates for the EvolutionDescription object</description>
      <libraryFunction>numberOfRates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlEvolutionDescriptionNumberOfSteps' type='QuantLib::EvolutionDescription' superType='libraryClass'>
      <description>number of steps for the EvolutionDescription object</description>
      <libraryFunction>numberOfSteps</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>
    
    <!-- EvolutionDescription object procedures -->
    
    <Procedure name='qlTerminalMeasure'>
      <description>Returns the terminal measure for the given EvolutionDescription object</description>
      <alias>QuantLib::terminalMeasure</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='EvolutionDescription' >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>ID of EvolutionDescription object</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Size</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlMoneyMarketMeasure'>
      <description>Returns the discretely compounded money market measure for the given EvolutionDescription object</description>
      <alias>QuantLib::moneyMarketMeasure</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='EvolutionDescription' >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>ID of EvolutionDescription object</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Size</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlMoneyMarketPlusMeasure'>
      <description>Returns the discretely compounded money market measure for the given EvolutionDescription object</description>
      <alias>QuantLib::moneyMarketPlusMeasure</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='EvolutionDescription' >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>ID of EvolutionDescription object</description>
          </Parameter>
          <Parameter name='offset' default='1'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>offset applied to the MoneyMarket measure. If omitted, default = 1 is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Size</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlIsInTerminalMeasure'>
      <description>Returns TRUE if the numeraire vector is Terminal measure for the given EvolutionDescription object</description>
      <alias>QuantLib::isInTerminalMeasure</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='EvolutionDescription' >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>ID of EvolutionDescription object</description>
          </Parameter>
          <Parameter name='numeraires' exampleValue ='5,5'>
            <type>QuantLib::Size</type>
            <tensorRank>vector</tensorRank>
            <description>vector of numeraires</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlIsInMoneyMarketMeasure'>
      <description>Returns TRUE if the numeraire vector is money market measure for the given EvolutionDescription object</description>
      <alias>QuantLib::isInMoneyMarketMeasure</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='EvolutionDescription' >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>ID of EvolutionDescription object</description>
          </Parameter>
          <Parameter name='numeraires' exampleValue ='5,5'>
            <type>QuantLib::Size</type>
            <tensorRank>vector</tensorRank>
            <description>vector of numeraires</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlIsInMoneyMarketPlusMeasure'>
      <description>Returns TRUE if the numeraire vector is money market measure plus for the given EvolutionDescription object</description>
      <alias>QuantLib::isInMoneyMarketPlusMeasure</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='EvolutionDescription' >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>ID of EvolutionDescription object</description>
          </Parameter>
          <Parameter name='numeraires' exampleValue ='5,5'>
            <type>QuantLib::Size</type>
            <tensorRank>vector</tensorRank>
            <description>vector of numeraires</description>
          </Parameter>
          <Parameter name='offset' default='1'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>offset applied to the MoneyMarket measure If omitted, default = 1 is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>
    
    <!-- MarketModel base class interfaces -->
    <Member name='qlMarketModelInitialRates' type='QuantLib::MarketModel'>
      <description>initial rates for the MarketModel object</description>
      <libraryFunction>initialRates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelDisplacements' type='QuantLib::MarketModel'>
      <description>rates' displacemets for the MarketModel object</description>
      <libraryFunction>displacements</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Spread</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelNumberOfRates' type='QuantLib::MarketModel'>
      <description>number of rates for the MarketModel object</description>
      <libraryFunction>numberOfRates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelNumberOfFactors' type='QuantLib::MarketModel'>
      <description>number of factors for the MarketModel object</description>
      <libraryFunction>numberOfFactors</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelNumberOfSteps' type='QuantLib::MarketModel'>
      <description>number of steps for the MarketModel object</description>
      <libraryFunction>numberOfSteps</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelPseudoRoot' type='QuantLib::MarketModel'>
      <description>Returns the pseudo root for the i-th step.</description>
      <libraryFunction>pseudoRoot</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name="index" exampleValue ='0'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>evolution step index</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelCovariance' type='QuantLib::MarketModel'>
      <description>Returns the covariance matrix for the i-th step.</description>
      <libraryFunction>covariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name="index" exampleValue ='0'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>evolution step index</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelTotalCovariance' type='QuantLib::MarketModel'>
      <description>Returns the covariance matrix from start up to the i-th step.</description>
      <libraryFunction>totalCovariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name="index" exampleValue ='0'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>evolution step index</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>
    
    <!-- MarketModel derived class constructors -->
    <Constructor name='qlExpCorrFlatVol'>
      <libraryFunction>ExpCorrFlatVol</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='LongTermCorr' exampleValue ='0.5'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Long term correlation L in rho=L+(1-L)*exp(-beta*abs(Ti-Tj))</description>
          </Parameter>
          <Parameter name='beta' exampleValue ='0.2'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>beta in rho=L+(1-L)*exp(-beta*abs(Ti-Tj))</description>
          </Parameter>
          <Parameter name='volatilities' exampleValue ='0.2,0.2,0.2,0.2,0.2'>
            <type>QuantLib::Volatility</type>
            <tensorRank>vector</tensorRank>
            <description>volatilities</description>
          </Parameter>
          <Parameter name='evolutionDescription' >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>EvolutionDescription object</description>
          </Parameter>
          <Parameter name='Factors' exampleValue ='5'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>number of factors to be retained in the simulation</description>
          </Parameter>
          <Parameter name='initialRates' exampleValue ='0.02,0.02,0.02,0.02,0.02'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>initial rates</description>
          </Parameter>
          <Parameter name='displacements' exampleValue ='0.0,0.0,0.0,0.0,0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>vector</tensorRank>
            <description>displacements</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlExpCorrAbcdVol'>
      <libraryFunction>ExpCorrAbcdVol</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='a' exampleValue ='-0.06'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>the a coefficient in the abcd vol parametrization</description>
          </Parameter>
          <Parameter name='b' exampleValue ='0.17'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>the b coefficient in the abcd vol parametrization</description>
          </Parameter>
          <Parameter name='c' exampleValue ='0.54'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>the c coefficient in the abcd vol parametrization</description>
          </Parameter>
          <Parameter name='d' exampleValue ='0.17'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>the d coefficient in the abcd vol parametrization</description>
          </Parameter>
          <Parameter name='ks' exampleValue ='1.0,1.0,1.0,1.0,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>K_i adjustment factors in the abcd vol parametrization</description>
          </Parameter>
          <Parameter name='LongTermCorr' exampleValue ='0.5'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Long term correlation L in rho=L+(1-L)*exp(-beta*abs(Ti-Tj))</description>
          </Parameter>
          <Parameter name='beta' exampleValue ='0.2'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>beta in rho=L+(1-L)*exp(-beta*abs(Ti-Tj))</description>
          </Parameter>
          <Parameter name='evolutionDescription' >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>EvolutionDescription object</description>
          </Parameter>
          <Parameter name='Factors' exampleValue ='5'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>number of factors to be retained in the simulation</description>
          </Parameter>
          <Parameter name='initialRates' exampleValue ='0.02,0.02,0.02,0.02,0.02'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>initial rates</description>
          </Parameter>
          <Parameter name='displacements' exampleValue ='0.0,0.0,0.0,0.0,0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>vector</tensorRank>
            <description>displacements</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- Abcd (volatility) class costructor -->
    <Constructor name='qlAbcd'>
      <libraryFunction>Abcd</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='a' default='-0.06'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>the a coefficient in the abcd vol parametrization. Used as guess if the object is later calibrated.  If omitted, default = -0.06 is used.</description>
          </Parameter>
          <Parameter name='b' default='0.17'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>the b coefficient in the abcd vol parametrization. Used as guess if the object is later calibrated. If omitted, default = 0.17 is used.</description>
          </Parameter>
          <Parameter name='c' default='0.54'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>the c coefficient in the abcd vol parametrization. Used as guess if the object is later calibrated. If omitted, default = 0.54 is used.</description>
          </Parameter>
          <Parameter name='d' default='0.17'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>the d coefficient in the abcd vol parametrization. Used as guess if the object is later calibrated. If omitted, default = 0.17 is used.</description>
          </Parameter>
          <Parameter name='aIsFixed' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the a coefficient must be kept fixed in later calibrations. If omitted, default = FALSE is used.</description>
          </Parameter>
          <Parameter name='bIsFixed' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the a coefficient must be kept fixed in later calibrations. If omitted, default = FALSE is used.</description>
          </Parameter>
          <Parameter name='cIsFixed' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the a coefficient must be kept fixed in later calibrations. If omitted, default = FALSE is used.</description>
          </Parameter>
          <Parameter name='dIsFixed' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the a coefficient must be kept fixed in later calibrations. If omitted, default = FALSE is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- Abcd (volatility) class interfaces -->
    <Member name='qlAbcdInstantaneousValue' type='QuantLib::Abcd' loopParameter='u'>
      <description>Returns the instantaneous volatility as function of residual time to maturity u=T-t: [a + b*u] * e^{-c*u} + d</description>
      <libraryFunction>operator()</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='u' const='False' exampleValue ='5.0,4.0,3.0,2.0,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>residual time(s) to maturity</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdInstantaneousCovariance' type='QuantLib::Abcd' loopParameter='u'>
      <description>Returns covariance at calendar time u between T and S rates fixing times.</description>
      <libraryFunction>instantaneousCovariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='u' const='False' exampleValue ='0.0,0.5,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>calendar time(s)</description>
          </Parameter>
          <Parameter name='T' const='False'  exampleValue ='0.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing time of first rate</description>
          </Parameter>
          <Parameter name='S' const='False' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing time of second rate</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdInstantaneousVariance' type='QuantLib::Abcd' loopParameter='u'>
      <description>Returns variance at calendar time(s) u of T-fixing rate.</description>
      <libraryFunction>instantaneousVariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='u' const='False' exampleValue ='0.0,0.5,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>calendar time(s)</description>
          </Parameter>
          <Parameter name='T' const='False' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing time of the rate</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdInstantaneousVolatility' type='QuantLib::Abcd' loopParameter='u'>
      <description>Returns volatility/ies at calendar time(s) u of T-fixing rate.</description>
      <libraryFunction>instantaneousVolatility</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='u' const='False' exampleValue ='0.0,0.5,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>calendar time(s)</description>
          </Parameter>
          <Parameter name='T' const='False' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing calendar time of the rate</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdCovariance' type='QuantLib::Abcd' loopParameter='tMax'>
      <description>Returns covariance(s) in [tMin,tMax] between T and S rate fixing times.</description>
      <libraryFunction>covariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='tMin' const='False' exampleValue ='0.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>lower bound of the covariance integral</description>
          </Parameter>
          <Parameter name='tMax' const='False' exampleValue ='0.25,0.5'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>upper bound(s) of the covariance integral(s)</description>
          </Parameter>
          <Parameter name='T' const='False' exampleValue ='0.5'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing calendar time of first rate</description>
          </Parameter>
          <Parameter name='S' const='False' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing calendar time of second rate</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdVariance' type='QuantLib::Abcd' loopParameter='tMax'>
      <description>Returns variance(s) in [tMin,tMax] of T rate fixing time.</description>
      <libraryFunction>variance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='tMin' const='False' exampleValue ='0.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>lower bound of the covariance integral</description>
          </Parameter>
          <Parameter name='tMax' const='False' exampleValue ='0.5,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>upper bound of the covariance integral</description>
          </Parameter>
          <Parameter name='T' const='False' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing calendar time of the rate</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdVolatility' type='QuantLib::Abcd' loopParameter='tMax'>
      <description>Returns volatility/ies in [tMin,tMax] of T rate fixing time.</description>
      <libraryFunction>volatility</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='tMin' const='False' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>lower bound of the covariance integral</description>
          </Parameter>
          <Parameter name='tMax' const='False' exampleValue ='0.5,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>upper bound(s) of the covariance integral(s)</description>
          </Parameter>
          <Parameter name='T' const='False' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>fixing calendar time of the rate</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdShortTermVolatility' type='QuantLib::Abcd'>
      <description>Returns the short term volatility implied by Abcd volatility.</description>
      <libraryFunction>shortTermVolatility</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdLongTermVolatility' type='QuantLib::Abcd'>
      <description>Returns the long term volatility implied by Abcd volatility.</description>
      <libraryFunction>longTermVolatility</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdMaximumLocation' type='QuantLib::Abcd'>
      <description>Returns, if b is positive, the location of the Abcd volatility maximum.</description>
      <libraryFunction>maximumLocation</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdMaximumVolatility' type='QuantLib::Abcd'>
      <description>Returns, if b is positive, the maximum of the Abcd volatility.</description>
      <libraryFunction>maximumVolatility</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Volatility</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdA' type='QuantLib::Abcd'>
      <description>Returns the a coefficient in the abcd vol parametrization</description>
      <libraryFunction>a</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdB' type='QuantLib::Abcd'>
      <description>Returns the a coefficient in the abcd vol parametrization</description>
      <libraryFunction>b</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdC' type='QuantLib::Abcd'>
      <description>Returns the a coefficient in the abcd vol parametrization</description>
      <libraryFunction>c</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdD' type='QuantLib::Abcd'>
      <description>Returns the a coefficient in the abcd vol parametrization</description>
      <libraryFunction>d</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdK' type='QuantLib::Abcd'>
      <description>Returns the 'k' adjustment factors needed to match Black vols</description>
      <libraryFunction>k</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='blackVols' exampleValue ='0.2,0.2,0.2,0.2,0.2'>
            <type>QuantLib::Volatility</type>
            <tensorRank>vector</tensorRank>
            <description>Black vol vector.</description>
          </Parameter>
          <Parameter name='times' vectorIterator='begin' exampleValue ='0,1,2,3,4'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>Reference time for the above Black vol vector.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdError' type='QuantLib::Abcd'>
      <description>Returns the root mean squared error between the abdc implied Black vols and a given Black vol vector</description>
      <libraryFunction>error</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='blackVols' exampleValue ='0.2,0.2,0.2,0.2,0.2'>
            <type>QuantLib::Volatility</type>
            <tensorRank>vector</tensorRank>
            <description>Black vol vector.</description>
          </Parameter>
          <Parameter name='times' vectorIterator='begin' exampleValue ='0,1,2,3,4'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>Reference time for the above Black vol vector.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdMaxError' type='QuantLib::Abcd'>
      <description>Returs the max error between the abdc implied Black vols and a given Black vol vector</description>
      <libraryFunction>maxError</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='blackVols' exampleValue ='0.2,0.2,0.2,0.2,0.2'>
            <type>QuantLib::Volatility</type>
            <tensorRank>vector</tensorRank>
            <description>Black vol vector.</description>
          </Parameter>
          <Parameter name='times' vectorIterator='begin' exampleValue ='0,1,2,3,4'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>Reference time for the above Black vol vector.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlAbcdCapletCalibration' type='QuantLib::Abcd'>
      <description>Calibrates the a, b, c, d parameters of the vol parametrization</description>
      <libraryFunction>capletCalibration</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='blackVols' exampleValue ='0.2,0.2,0.2,0.2,0.2'>
            <type>QuantLib::Volatility</type>
            <tensorRank>vector</tensorRank>
            <description>Black vol vector.</description>
          </Parameter>
          <Parameter name='times' vectorIterator='begin' exampleValue ='0,1,2,3,4'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>Reference time for the above Black vol vector.</description>
          </Parameter>
          <Parameter name='endCriteria' default='""'>
            <type>QuantLib::EndCriteria</type>
            <tensorRank>scalar</tensorRank>
            <description>EndCriteria object ID. If omitted, default = "" is used.</description>
          </Parameter>
          <Parameter name='optimizationMethod' default='""'>
            <type>QuantLib::OptimizationMethod</type>
            <tensorRank>scalar</tensorRank>
            <description>OptimizationMethod object ID. If omitted, default = "Simplex" is used.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::EndCriteria::Type</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- PiecewiseConstantAbcdVariance class constructor -->
    <Constructor name='qlPiecewiseConstantAbcdVariance'>
      <libraryFunction>PiecewiseConstantAbcdVariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='a' default='-0.06'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>coefficient in abcd vol parametrization. Used as guess if the object is later calibrated. If omitted, default = -0.06 is used. </description>
          </Parameter>
          <Parameter name='b' default='0.17'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>coefficient in the abcd vol parametrization. Used as guess if the object is later calibrated. If omitted, default = 0.17 is used.</description>
          </Parameter>
          <Parameter name='c' default='0.54'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>coefficient in the abcd vol parametrization. Used as guess if the object is later calibrated. If omitted, default = 0.54 is used.</description>
          </Parameter>
          <Parameter name='d' default='0.17'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>coefficient in the abcd vol parametrization. Used as guess if the object is later calibrated. If omitted, default = 0.17 is used.</description>
          </Parameter>
          <Parameter name='ResetIndex'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>Index that defines the reset time of rate.</description>
          </Parameter>
          <Parameter name='evolutionDescription' >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>EvolutionDescription object</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- PiecewiseConstantAbcdVariance class interfaces -->
    <Member name='qlPiecewiseConstantAbcdVariances' type='QuantLib::PiecewiseConstantAbcdVariance'>
      <description>Returns the piecewise constant abcd variances.</description>
      <libraryFunction>variances</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlpiecewiseConstantVolatilities' type='QuantLib::PiecewiseConstantAbcdVariance'>
      <description>Returns the piecewise constant abcd instantaneous volatilities.</description>
      <libraryFunction>piecewiseConstantVolatilities</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>


    <!-- SwapForwardConversionMatrix class constructor and interfaces -->

    <!--<Constructor name='qlSwapCovarianceApproximator'>
      <libraryFunction>SwapCovarianceApproximator</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='initial_Curve_State' >
            <type>QuantLib::CurveState</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>ID of CurveState object</description>
          </Parameter>
          <Parameter name='expiry'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>Index of first expiry date</description>
          </Parameter>
          <Parameter name='maturity'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>Index of last maturity date</description>
          </Parameter>
          <Parameter name='displacement'>
            <type>QuantLib::Spread</type>
            <tensorRank>scalar</tensorRank>
            <description>Swap rate displacement (one single value)</description>
          </Parameter>
          <Parameter name='forwardCovarianceMatrix'>
            <type>QuantLib::Matrix</type>
            <tensorRank>matrix</tensorRank>
            <description>Forward covariance matrix</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlSwapCovarianceApproximatorSwapCovarianceMatrix' type='QuantLibAddin::SwapCovarianceApproximator'>
      <description>Given the forward covariance matrix, it returns the approximated swap covariance matrix corresponding to the (sub)set of coterminal swaps between expiry and maturity.</description>
      <libraryFunction>swapCovarianceMatrix</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>-->
    
    <!-- SwapFromFRACorrelationStructure class constructor -->
    <Constructor name='qlSwapFromFRACorrelationStructure'>
      <libraryFunction>SwapFromFRACorrelationStructure</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='longTermCorr' exampleValue ='0.5'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Long term correlation</description>
          </Parameter>
          <Parameter name='beta' exampleValue ='0.2'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>decay factor</description>
          </Parameter>
          <Parameter name='curveState' >
            <type>QuantLib::CurveState</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>curveState</description>
          </Parameter>
          <Parameter name='evolution'  >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>Evolution Description</description>
          </Parameter>
          <Parameter name='numberOfFactors' exampleValue ='5'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>number of factors</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- SwapFromFRACorrelationStructure class interfaces -->
    <Member name='qlSwapFromFRACorrelationStructurePseudoRoot' type='QuantLib::SwapFromFRACorrelationStructure'>
      <description>Returns the pseudo-root of the equivalent covariance swap rates matrix</description>
      <libraryFunction>pseudoRoot</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='timeIndex' exampleValue ='0'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>time index.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Procedure name='qlCapletCoterminalCalibration'>
      <description>Calibrate ...</description>
      <alias>QuantLibAddin::capletCoterminalCalibration</alias>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='correlations'>
            <type>QuantLib::TimeDependantCorrelationStructure</type>
            <tensorRank>scalar</tensorRank>
            <description>correlations ID</description>
          </Parameter>
          <Parameter name='swapVariances'>
            <type>QuantLib::PiecewiseConstantVariance</type>
            <tensorRank>vector</tensorRank>
            <description>PiecewiseConstantVariances ID</description>
          </Parameter>
          <Parameter name='capletVols' exampleValue ='0.1,0.1,0.1,0.1,0.1'>
            <type>QuantLib::Volatility</type>
            <tensorRank>vector</tensorRank>
            <description>caplet volatilities</description>
          </Parameter>
          <Parameter name='curveState' >
            <type>QuantLib::CurveState</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>CurveState object ID</description>
          </Parameter>
          <Parameter name='displacement' exampleValue ='0.0,0.0,0.0,0.0,0.0'>
            <type>QuantLib::Volatility</type>
            <tensorRank>scalar</tensorRank>
            <description>displacement</description>
          </Parameter>
          <Parameter name='alpha' exampleValue ='0.01'>
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>alpha</description>
          </Parameter>
          <Parameter name='timeIndex' exampleValue ='0'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>timeIndex</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlCoterminalSwapForwardJacobian'>
      <description>Returns the jacobian between coterminal swap rates and forward rates</description>
      <alias>QuantLib::SwapForwardMappings::coterminalSwapForwardJacobian</alias>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='curveState' >
            <type>QuantLib::CurveState</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>CurveState object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlCoterminalSwapZedMatrix'>
      <description>Returns the Z matrix to switch base from forward to coterminal swap rates</description>
      <alias>QuantLib::SwapForwardMappings::coterminalSwapZedMatrix</alias>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='curveState' >
            <type>QuantLib::CurveState</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>CurveState object ID</description>
          </Parameter>
          <Parameter name='displacement' exampleValue ='0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>scalar</tensorRank>
            <description>displacement spread</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Procedure>

    <!-- CurveState base class interfaces -->
    <Member name='qlCurveStateRateTimes' type='QuantLib::CurveState' superType='libraryClass'>
      <description>return the rate times of the CurveState object</description>
      <libraryFunction>rateTimes</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCurveStateRateTaus' type='QuantLib::CurveState' superType='libraryClass'>
      <description>return the rate taus of the CurveState object</description>
      <libraryFunction>rateTaus</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCurveStateForwardRates' type='QuantLib::CurveState' superType='libraryClass'>
      <description>Returns the current forward rates of the CurveState object</description>
      <libraryFunction>forwardRates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCurveStateCoterminalSwapRates' type='QuantLib::CurveState' superType='libraryClass'>
      <description>Returns the current swap rates of the CurveState object</description>
      <libraryFunction>coterminalSwapRates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCurveStateCMSwapRates' type='QuantLib::CurveState' superType='libraryClass'>
      <description>Returns the current swap rates of the CurveState object</description>
      <libraryFunction>cmSwapRates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='spanningForwards' exampleValue ='5'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>number of forwards underlying the CMS</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <!--<Constructor name='qlCurveState'>
      <libraryFunction>CurveState</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='rateTimes' vectorIterator='beginAndEnd'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate fixing times</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>-->

    <!-- CMSwapCurveState derived class constructor -->
    <Constructor name='qlCMSwapCurveState'>
      <libraryFunction>CMSwapCurveState</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='rateTimes' exampleValue ='0.0,1.0,2.0,3.0,4.0,5.0'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate fixing times</description>
          </Parameter>
          <Parameter name='spanningForwards' exampleValue ='5'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>number of forwards underlying the CMS</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- CMSwapCurveState class interfaces -->
    <Member name='qlCMSwapCurveStateSetOnCMSwapRates' type='QuantLib::CMSwapCurveState' superType='libraryClass'>
      <description>set the CurveState object on given vector of coterminal swaps</description>
      <libraryFunction>setOnCMSwapRates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='CMSwapRates' exampleValue ='0.02,0.02,0.02,0.02,0.02'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>Coterminal swap rates</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- CoterminalSwapCurveState derived class constructor -->
    <Constructor name='qlCoterminalSwapCurveState'>
      <libraryFunction>CoterminalSwapCurveState</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='rateTimes' exampleValue ='0.0,1.0,2.0,3.0,4.0,5.0'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate fixing times</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- CoterminalSwapCurveState class interfaces -->
    <Member name='qlCoterminalSwapCurveStateSetOnCoterminalSwapRates' type='QuantLib::CoterminalSwapCurveState' superType='libraryClass'>
      <description>set the CurveState object on given vector of coterminal swaps</description>
      <libraryFunction>setOnCoterminalSwapRates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='CoterminalSwaps' exampleValue ='0.02,0.02,0.02,0.02,0.02'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>Coterminal swap rates</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- LMMCurveState derived class constructor -->
    <Constructor name='qlLMMCurveState'>
      <libraryFunction>LMMCurveState</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='rateTimes' exampleValue ='0.0,1.0,2.0,3.0,4.0,5.0'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate fixing times</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- LMMCurveState class interfaces -->
    <Member name='qlLMMCurveStateSetOnForwardRates' type='QuantLib::LMMCurveState' superType='libraryClass'>
      <description>set the CurveState object on given vector of forward rates</description>
      <libraryFunction>setOnForwardRates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='rates' exampleValue ='0.02,0.02,0.02,0.02,0.02'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>forward rates</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLMMCurveStateSetOnDiscountRatios' type='QuantLib::LMMCurveState' superType='libraryClass'>
      <description>set the CurveState object on given vector of discount ratios</description>
      <libraryFunction>setOnDiscountRatios</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='discountRatios' exampleValue ='1.0,1.0,1.0,1.0,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>discount ratios</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>


    <!-- LMMDriftCalculator derived class constructor -->
    <Constructor name='qlLMMDriftCalculator'>
      <libraryFunction>LMMDriftCalculator</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='pseudo_square_root'>
            <type>QuantLib::Matrix</type>
            <tensorRank>matrix</tensorRank>
            <description>Pseudo square root of the covariance matrix</description>
          </Parameter>
          <Parameter name='displacements' exampleValue ='0.0,0.0,0.0,0.0,0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>vector</tensorRank>
            <description>displacements</description>
          </Parameter>
          <Parameter name='taus' exampleValue ='0.5,0.5,0.5,0.5,0.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>taus</description>
          </Parameter>
          <Parameter name='numeraire' exampleValue ='5'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>numeraire</description>
          </Parameter>
          <Parameter name='alive' exampleValue ='1'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>index of the first rates still alive</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- LMMDriftCalculator class interfaces -->
    <Member name='qlLMMDriftCalculatorComputePlain' type='QuantLibAddin::LMMDriftCalculator'>
      <description>Full factor drift computation using the LMMDriftCalculator object</description>
      <libraryFunction>computePlain</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='curveState' >
            <type>QuantLib::LMMCurveState</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>LMMCurveState object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLMMDriftCalculatorComputeReduced' type='QuantLibAddin::LMMDriftCalculator'>
      <description>Reduced factor (Joshi algorithm) drift computation using the LMMDriftCalculator object</description>
      <libraryFunction>computeReduced</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='curveState' >
            <type>QuantLib::LMMCurveState</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>LMMCurveState object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLMMDriftCalculatorCompute' type='QuantLibAddin::LMMDriftCalculator'>
      <description>Reduced factor (Joshi algorithm) drift computation using the LMMDriftCalculator object</description>
      <libraryFunction>compute</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='curveState' >
            <type>QuantLib::LMMCurveState</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>LMMCurveState object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <!-- LMMNormalDriftCalculator derived class constructor -->
    <Constructor name='qlLMMNormalDriftCalculator'>
      <libraryFunction>LMMNormalDriftCalculator</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='pseudo_square_root'>
            <type>QuantLib::Matrix</type>
            <tensorRank>matrix</tensorRank>
            <description>Pseudo square root of the covariance matrix</description>
          </Parameter>
          <Parameter name='taus' exampleValue ='0.5,0.5,0.5,0.5,0.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>taus</description>
          </Parameter>
          <Parameter name='numeraire' exampleValue ='5'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>numeraire</description>
          </Parameter>
          <Parameter name='alive' exampleValue ='1'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>index of the first rates still alive</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- LMMNormalDriftCalculator class interfaces -->
    <Member name='qlLMMNormalDriftCalculatorComputePlain' type='QuantLibAddin::LMMNormalDriftCalculator'>
      <description>Full factor drift computation using the LMMNormalDriftCalculator object</description>
      <libraryFunction>computePlain</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='curveState' >
            <type>QuantLib::LMMCurveState</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>LMMCurveState object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLMMNormalDriftCalculatorComputeReduced' type='QuantLibAddin::LMMNormalDriftCalculator'>
      <description>Reduced factor (Joshi algorithm) drift computation using the LMMNormalDriftCalculator object</description>
      <libraryFunction>computeReduced</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='curveState' >
            <type>QuantLib::LMMCurveState</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>LMMCurveState object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLMMNormalDriftCalculatorCompute' type='QuantLibAddin::LMMNormalDriftCalculator'>
      <description>Reduced factor (Joshi algorithm) drift computation using the LMMNormalDriftCalculator object</description>
      <libraryFunction>compute</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='curveState' >
            <type>QuantLib::LMMCurveState</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>LMMCurveState object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <!-- CMSMMDriftCalculator derived class constructor -->
    <Constructor name='qlCMSMMDriftCalculator'>
      <libraryFunction>CMSMMDriftCalculator</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='pseudo_square_root'>
            <type>QuantLib::Matrix</type>
            <tensorRank>matrix</tensorRank>
            <description>Pseudo square root of the covariance matrix</description>
          </Parameter>
          <Parameter name='displacements' exampleValue ='0.0,0.0,0.0,0.0,0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>vector</tensorRank>
            <description>displacements</description>
          </Parameter>
          <Parameter name='taus' exampleValue ='0.5,0.5,0.5,0.5,0.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>taus</description>
          </Parameter>
          <Parameter name='numeraire' exampleValue ='5'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>numeraire</description>
          </Parameter>
          <Parameter name='alive' exampleValue ='1'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>index of the first rates still alive</description>
          </Parameter>
          <Parameter name='spanningFwds' exampleValue ='5'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>number of forwards to be spanned</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- CMSMMDriftCalculator class interfaces -->
    <Member name='qlCMSMMDriftCalculatorCompute' type='QuantLibAddin::CMSMMDriftCalculator'>
      <description>Full factor drift computation using the CMSMMDriftCalculator object</description>
      <libraryFunction>compute</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='curveState' >
            <type>QuantLib::CMSwapCurveState</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>CMSwapCurveState object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <!-- SMMDriftCalculator derived class constructor -->
    <Constructor name='qlSMMDriftCalculator'>
      <libraryFunction>SMMDriftCalculator</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='pseudo_square_root'>
            <type>QuantLib::Matrix</type>
            <tensorRank>matrix</tensorRank>
            <description>Pseudo square root of the covariance matrix</description>
          </Parameter>
          <Parameter name='displacements' exampleValue ='0.0,0.0,0.0,0.0,0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>vector</tensorRank>
            <description>displacements</description>
          </Parameter>
          <Parameter name='taus' exampleValue ='0.5,0.5,0.5,0.5,0.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>taus</description>
          </Parameter>
          <Parameter name='numeraire' exampleValue ='5'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>numeraire</description>
          </Parameter>
          <Parameter name='alive' exampleValue ='1'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>index of the first rates still alive</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- SMMDriftCalculator class interfaces -->
    <Member name='qlSMMDriftCalculatorCompute' type='QuantLibAddin::SMMDriftCalculator'>
      <description>Full factor drift computation using the SMMDriftCalculator object</description>
      <libraryFunction>compute</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='curveState' >
            <type>QuantLib::CoterminalSwapCurveState</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>CoterminalSwapCurveState object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <!-- BrownianGeneratorFactory derived classes constructor  -->
    <Constructor name='qlMTBrownianGeneratorFactory'>
      <libraryFunction>MTBrownianGeneratorFactory</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='seed' default='0'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>seed for random sequence generator</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- MarketModelEvolver base class interfaces  -->
    <Member name='qlMarketModelEvolverStartNewPath' type='QuantLib::MarketModelEvolver'>
      <description>start a new path for the MarketModelEvolver object</description>
      <libraryFunction>startNewPath</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelEvolverAdvanceStep' type='QuantLib::MarketModelEvolver'>
      <description>advance a single step in the current path for the MarketModelEvolver object</description>
      <libraryFunction>advanceStep</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelEvolverCurrentStep' type='QuantLib::MarketModelEvolver'>
      <description>returns the current step index in the current path for the MarketModelEvolver object</description>
      <libraryFunction>currentStep</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Size</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelEvolverNumeraires' type='QuantLib::MarketModelEvolver'>
      <description>returns the current step index in the current path for the MarketModelEvolver object</description>
      <libraryFunction>numeraires</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Size</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <!-- MarketModelEvolver derived classes constructors  -->
    <Constructor name='qlForwardRatePcEvolver'>
      <libraryFunction>ForwardRatePcEvolver</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='marketModel'>
            <type>QuantLib::MarketModel</type>
            <tensorRank>scalar</tensorRank>
            <description>MarketModel object ID</description>
          </Parameter>
          <Parameter name='brownianGeneratorFactory'>
            <type>QuantLib::BrownianGeneratorFactory</type>
            <tensorRank>scalar</tensorRank>
            <description>Brownian generator factory</description>
          </Parameter>
          <Parameter name='numeraires' exampleValue ='5,5,5,5,5'>
            <type>QuantLib::Size</type>
            <tensorRank>vector</tensorRank>
            <description>numeraire vector</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlForwardRateIpcEvolver'>
      <libraryFunction>ForwardRateIpcEvolver</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='marketModel'>
            <type>QuantLib::MarketModel</type>
            <tensorRank>scalar</tensorRank>
            <description>MarketModel object ID</description>
          </Parameter>
          <Parameter name='brownianGeneratorFactory'>
            <type>QuantLib::BrownianGeneratorFactory</type>
            <tensorRank>scalar</tensorRank>
            <description>Brownian generator factory</description>
          </Parameter>
          <Parameter name='numeraires' exampleValue ='5,5,5,5,5'>
            <type>QuantLib::Size</type>
            <tensorRank>vector</tensorRank>
            <description>numeraire vector</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlForwardRateNormalPcEvolver'>
      <libraryFunction>ForwardRateNormalPcEvolver</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='marketModel'>
            <type>QuantLib::MarketModel</type>
            <tensorRank>scalar</tensorRank>
            <description>MarketModel object ID</description>
          </Parameter>
          <Parameter name='brownianGeneratorFactory'>
            <type>QuantLib::BrownianGeneratorFactory</type>
            <tensorRank>scalar</tensorRank>
            <description>Brownian generator factory</description>
          </Parameter>
          <Parameter name='numeraires' exampleValue ='5,5,5,5,5'>
            <type>QuantLib::Size</type>
            <tensorRank>vector</tensorRank>
            <description>numeraire vector</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- AccountingEngine class constructor -->
    <Constructor name='qlAccountingEngine'>
      <libraryFunction>AccountingEngine</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='marketModelEvolver'>
            <type>QuantLib::MarketModelEvolver</type>
            <tensorRank>scalar</tensorRank>
            <description>MarketModelEvolver object ID</description>
          </Parameter>
          <Parameter name='product' >
            <type>QuantLib::MarketModelMultiProduct</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>MarketModelMultiProduct object ID</description>
          </Parameter>
          <Parameter name='initialNumeraireValue'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>initial numeraire value</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- AccountingEngine class interfaces -->
    <Member name='qlAccountingEngineMultiplePathValues' type='QuantLib::AccountingEngine'>
      <description>return multiple path values</description>
      <libraryFunction>multiplePathValues</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='sequenceStatistics' >
            <type>QuantLib::SequenceStatistics</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>Sequence Statistics object ID</description>
          </Parameter>
          <Parameter name='paths' exampleValue ='8191'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>number of paths</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- LmExtLinearExponentialVolModel constructor  -->
    
    <Constructor name='qlMarketModelLmExtLinearExponentialVolModel'>
      <libraryFunction>LmExtLinearExponentialVolModel</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='fixingTimes' libraryType='QuantLib::Time' exampleValue ='0.0,1.0,2.0,3.0,4.0,5.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>rate fixing times</description>
          </Parameter>
          <Parameter name='a' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>a parameter</description>
          </Parameter>
          <Parameter name='b' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>b parameter</description>
          </Parameter>
          <Parameter name='c' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>c parameter</description>
          </Parameter>
          <Parameter name='d' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>d parameter</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- LmLinearExponentialCorrelationModel constructor  -->

    <Constructor name='qlMarketModelLmLinearExponentialCorrelationModel'>
      <libraryFunction>LmLinearExponentialCorrelationModel</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='size' exampleValue ='4'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>size</description>
          </Parameter>
          <Parameter name='rho' exampleValue ='0.5'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>rho</description>
          </Parameter>
          <Parameter name='beta' exampleValue ='.6'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>beta</description>
          </Parameter>
          <Parameter name='factors' default='QuantLib::Null&lt;QuantLib::Size&gt;()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>factors</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>
    
    <!-- Discount bond ratios procedures -->
    <Procedure name='qlForwardsFromDiscountRatios'>
      <description>Returns the forward rates implied from discount bond ratios</description>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='firstValidIndex' exampleValue ='1'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>marks the first non expired discount bond</description>
          </Parameter>
          <Parameter name='DiscountRatios' exampleValue ='1.0,1.0,1.0,1.0,1.0'>
            <type>QuantLib::DiscountFactor</type>
            <tensorRank>vector</tensorRank>
            <description>vector of discount bond ratios</description>
          </Parameter>
          <Parameter name='taus' exampleValue ='0.5,0.5,0.5,0.5,0.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate time intervals</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlCoterminalSwapRatesFromDiscountRatios'>
      <description>Returns the coterminal swap rates implied from discount bond ratios</description>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='firstValidIndex' exampleValue ='1'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>marks the first non expired discount bond</description>
          </Parameter>
          <Parameter name='DiscountRatios' exampleValue ='1.0,1.0,1.0,1.0,1.0'>
            <type>QuantLib::DiscountFactor</type>
            <tensorRank>vector</tensorRank>
            <description>vector of discount bond ratios</description>
          </Parameter>
          <Parameter name='taus' exampleValue ='0.5,0.5,0.5,0.5,0.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate time intervals</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlCoterminalSwapAnnuitiesFromDiscountRatios'>
      <description>Returns the coterminal swap annuities implied from discount bond ratios</description>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='firstValidIndex' exampleValue ='1'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>marks the first non expired discount bond</description>
          </Parameter>
          <Parameter name='DiscountRatios' exampleValue ='1.0,1.0,1.0,1.0,1.0'>
            <type>QuantLib::DiscountFactor</type>
            <tensorRank>vector</tensorRank>
            <description>vector of discount bond ratios</description>
          </Parameter>
          <Parameter name='taus' exampleValue ='0.5,0.5,0.5,0.5,0.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate time intervals</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlConstantMaturitySwapRatesFromDiscountRatios'>
      <description>Returns constant maturity swap rates from discount ratios</description>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='spanningForwards' exampleValue ='10'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>number of forward rates spanned by the constant maturity swap</description>
          </Parameter>
          <Parameter name='firstValidIndex' exampleValue ='0.001'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>marks the first non expired discount bond</description>
          </Parameter>
          <Parameter name='DiscountRatios' exampleValue ='1.0,1.0,1.0,1.0,1.0'>
            <type>QuantLib::DiscountFactor</type>
            <tensorRank>vector</tensorRank>
            <description>vector of discount bond ratios</description>
          </Parameter>
          <Parameter name='taus' exampleValue ='0.5,0.5,0.5,0.5,0.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate time intervals</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlConstantMaturitySwapAnnuitiesFromDiscountRatios'>
      <description>Returns constant maturity swap annuities from discount ratios</description>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='spanningForwards' exampleValue ='5'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>number of forward rates spanned by the constant maturity swap</description>
          </Parameter>
          <Parameter name='firstValidIndex' exampleValue ='1'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>marks the first non expired discount bond</description>
          </Parameter>
          <Parameter name='DiscountRatios' exampleValue ='1.0,1.0,1.0,1.0,1.0'>
            <type>QuantLib::DiscountFactor</type>
            <tensorRank>vector</tensorRank>
            <description>vector of discount bond ratios</description>
          </Parameter>
          <Parameter name='taus' exampleValue ='0.5,0.5,0.5,0.5,0.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate time intervals</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

  </Functions>
</Category>
