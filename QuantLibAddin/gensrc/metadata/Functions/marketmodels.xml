<Category name='marketmodels'>
  <description>functions to construct and use Market Models related objects</description>
  <displayName>MarketModels</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <includes>
    <include>ql/models/marketmodels/correlations/correlations.hpp</include>
    <include>ql/math/optimization/method.hpp</include>
    <include>ql/models/marketmodels/swapforwardmappings.hpp</include>
    <include>ql/models/marketmodels/historicalcorrelation.hpp</include>
    <include>qlo/Enumerations/Factories/indexfactory.hpp</include>
    <include>qlo/optimization.hpp</include>
    <include>qlo/index.hpp</include>
    <include>qlo/marketmodels.hpp</include>
    <include>qlo/products.hpp</include>
    <include>qlo/curvestate.hpp</include>
    <include>qlo/marketmodelevolvers.hpp</include>
    <include>qlo/evolutiondescription.hpp</include>
    <include>qlo/sequencestatistics.hpp</include>
    <include>qlo/payoffs.hpp</include>
  </includes>
  
  <copyright>
    Copyright (C) 2006, 2007 Ferdinando Ametrano
    Copyright (C) 2007 Chiara Fornarola
    Copyright (C) 2006, 2007 Marco Bianchetti
    Copyright (C) 2006, 2007 Cristina Duminuco
    Copyright (C) 2006, 2007 Giorgio Facchinetti
  </copyright>
  
  <Functions>

    <Procedure name="qlExponentialCorrelations">
      <description>Returns the correlation matrix (time independent long term + beta exponential functional form).</description>
      <alias>QuantLib::exponentialCorrelations</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='rateTimes' exampleValue ='0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate fixing times</description>
          </Parameter>
          <Parameter name='longTermCorr' exampleValue ='0.5'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Long term correlation</description>
          </Parameter>
          <Parameter name='beta' exampleValue ='0.2'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>exponential decay factor</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name="qlExponentialCorrelationsTimeDependent">
      <description>Returns the correlation matrix (time dependent long term + beta + gamma exponential functional form).</description>
      <alias>QuantLib::exponentialCorrelationsTimeDependent</alias>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='rateTimes' exampleValue ='0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate fixing times</description>
          </Parameter>
          <Parameter name='longTermCorr' exampleValue ='0.5'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Long term correlation </description>
          </Parameter>
          <Parameter name='beta' exampleValue ='0.2'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>exponential decay factor</description>
          </Parameter>
          <Parameter name='gamma' exampleValue ='0.9'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>exponent for time to go</description>
          </Parameter>
          <Parameter name='time' exampleValue ='0.0'>
            <type>QuantLib::Time</type>
            <tensorRank>scalar</tensorRank>
            <description>time t </description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Procedure>

    <Constructor name='qlTimeHomogeneousForwardCorrelation'>
      <libraryFunction>TimeHomogeneousForwardCorrelation</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='fwdCorrelation' >
            <type>QuantLib::Matrix</type>
            <tensorRank>matrix</tensorRank>
            <description>forward correlations</description>
          </Parameter>
          <Parameter name='rateTimes' >
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate times</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlTimeHomogeneousTimeDependentForwardCorrelation'>
      <libraryFunction>TimeHomogeneousTimeDependentForwardCorrelation</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='rateTimes' >
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate times</description>
          </Parameter>
          <Parameter name='longTermCorr' exampleValue ='0.5'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Long term correlation </description>
          </Parameter>
          <Parameter name='beta' exampleValue ='0.2'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>exponential decay factor</description>
          </Parameter>
          <Parameter name='gamma' exampleValue ='0.9'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>exponent for time to go</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>


    <!-- MarketModel base class interfaces -->
    <Member name='qlMarketModelInitialRates' type='QuantLib::MarketModel' superType='libraryClass'>
      <description>initial rates for the MarketModel object</description>
      <libraryFunction>initialRates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelDisplacements' type='QuantLib::MarketModel' superType='libraryClass'>
      <description>rates' displacemets for the MarketModel object</description>
      <libraryFunction>displacements</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Spread</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelNumberOfRates' type='QuantLib::MarketModel' superType='libraryClass'>
      <description>number of rates for the MarketModel object</description>
      <libraryFunction>numberOfRates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelNumberOfFactors' type='QuantLib::MarketModel' superType='libraryClass'>
      <description>number of factors for the MarketModel object</description>
      <libraryFunction>numberOfFactors</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelNumberOfSteps' type='QuantLib::MarketModel' superType='libraryClass'>
      <description>number of steps for the MarketModel object</description>
      <libraryFunction>numberOfSteps</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelPseudoRoot' type='QuantLib::MarketModel' superType='libraryClass'>
      <description>Returns the pseudo root for the i-th step.</description>
      <libraryFunction>pseudoRoot</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name="index" exampleValue ='0'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>evolution step index</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelCovariance' type='QuantLib::MarketModel' superType='libraryClass'>
      <description>Returns the covariance matrix for the i-th step.</description>
      <libraryFunction>covariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name="index" exampleValue ='0'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>evolution step index</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlMarketModelTotalCovariance' type='QuantLib::MarketModel' superType='libraryClass'>
      <description>Returns the covariance matrix from start up to the i-th step.</description>
      <libraryFunction>totalCovariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name="index" exampleValue ='0'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>evolution step index</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <!-- MarketModel derived class constructors -->
    <Constructor name='qlFlatVol'>
      <libraryFunction>FlatVol</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='volatilities' exampleValue ='0.2,0.2,0.2,0.2,0.2'>
            <type>QuantLib::Volatility</type>
            <tensorRank>vector</tensorRank>
            <description>volatilities</description>
          </Parameter>
          <Parameter name='correlations'>
            <type>QuantLib::PiecewiseConstantCorrelation</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>PiecewiseConstantCorrelation object ID</description>
          </Parameter>
          <Parameter name='evolutionDescription' >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>EvolutionDescription object</description>
          </Parameter>
          <Parameter name='Factors' exampleValue ='5'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>number of factors to be retained in the simulation</description>
          </Parameter>
          <Parameter name='initialRates' exampleValue ='0.02,0.02,0.02,0.02,0.02'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>initial rates</description>
          </Parameter>
          <Parameter name='displacements' exampleValue ='0.0,0.0,0.0,0.0,0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>vector</tensorRank>
            <description>displacements</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlAbcdVol'>
      <libraryFunction>AbcdVol</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='a' exampleValue ='-0.06'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>the a coefficient in the abcd vol parametrization</description>
          </Parameter>
          <Parameter name='b' exampleValue ='0.17'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>the b coefficient in the abcd vol parametrization</description>
          </Parameter>
          <Parameter name='c' exampleValue ='0.54'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>the c coefficient in the abcd vol parametrization</description>
          </Parameter>
          <Parameter name='d' exampleValue ='0.17'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>the d coefficient in the abcd vol parametrization</description>
          </Parameter>
          <Parameter name='ks' exampleValue ='1.0,1.0,1.0,1.0,1.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>K_i adjustment factors in the abcd vol parametrization</description>
          </Parameter>
          <Parameter name='correlations'>
            <type>QuantLib::PiecewiseConstantCorrelation</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>PiecewiseConstantCorrelation object ID</description>
          </Parameter>
          <Parameter name='evolutionDescription' >
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>EvolutionDescription object</description>
          </Parameter>
          <Parameter name='Factors' exampleValue ='5'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>number of factors to be retained in the simulation</description>
          </Parameter>
          <Parameter name='initialRates' exampleValue ='0.02,0.02,0.02,0.02,0.02'>
            <type>QuantLib::Rate</type>
            <tensorRank>vector</tensorRank>
            <description>initial rates</description>
          </Parameter>
          <Parameter name='displacements' exampleValue ='0.0,0.0,0.0,0.0,0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>vector</tensorRank>
            <description>displacements</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- MarketModelFactory derived class constructors -->
    <Constructor name='qlFlatVolFactory'>
      <libraryFunction>FlatVolFactory</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='LongTermCorr' exampleValue ='0.5'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>Long term correlation L in rho=L+(1-L)*exp(-beta*abs(Ti-Tj))</description>
          </Parameter>
          <Parameter name='beta' exampleValue ='0.2'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>beta in rho=L+(1-L)*exp(-beta*abs(Ti-Tj))</description>
          </Parameter>
          <Parameter name='times' exampleValue ='0.1,0.2,0.3,0.4,0.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>times</description>
          </Parameter>
          <Parameter name='volatilities' exampleValue ='0.2,0.2,0.2,0.2,0.2'>
            <type>QuantLib::Volatility</type>
            <tensorRank>vector</tensorRank>
            <description>volatilities</description>
          </Parameter>
          <Parameter name='YieldCurve' >
            <type>QuantLib::YieldTermStructure</type>
            <superType>libToHandle</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting yield term structure object ID</description>
          </Parameter>
          <Parameter name='displacement' default='0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>scalar</tensorRank>
            <description>displacement</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>



    <Member name='qlPiecewiseConstantVarianceVariances' type='QuantLib::PiecewiseConstantVariance'>
      <description>Returns the piecewise constant variances.</description>
      <libraryFunction>variances</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlPiecewiseConstantVarianceVolatilities' type='QuantLib::PiecewiseConstantVariance'>
      <description>Returns the piecewise constant volatilities.</description>
      <libraryFunction>volatilities</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlPiecewiseConstantVarianceRateTimes' type='QuantLib::PiecewiseConstantVariance'>
      <description>Returns the rate time of the PiecewiseConstantVariance object.</description>
      <libraryFunction>rateTimes</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlPiecewiseConstantVarianceVariance' type='QuantLib::PiecewiseConstantVariance'>
      <description>Returns the piecewise constant variance at a given time index.</description>
      <libraryFunction>variance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='timeIndex' exampleValue ='0'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>time index.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlPiecewiseConstantVarianceVolatility' type='QuantLib::PiecewiseConstantVariance'>
      <description>Returns the piecewise constant volatility at a given time index.</description>
      <libraryFunction>volatility</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='timeIndex' exampleValue ='0'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>time index.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>


    <Member name='qlPiecewiseConstantVarianceTotalVariance' type='QuantLib::PiecewiseConstantVariance'>
      <description>Returns the total variance at a given time index of the PiecewiseConstantVariance object.</description>
      <libraryFunction>totalVariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='timeIndex' exampleValue ='0'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>time index.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlPiecewiseConstantVarianceTotalVolatility' type='QuantLib::PiecewiseConstantVariance'>
      <description>Returns the total variance at a given time index of the PiecewiseConstantVariance object.</description>
      <libraryFunction>totalVolatility</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='timeIndex' exampleValue ='0'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>time index.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>


    <Constructor name='qlPiecewiseConstantAbcdVariance'>
      <libraryFunction>PiecewiseConstantAbcdVariance</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='a' default='-0.06'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>coefficient in abcd vol parametrization. Used as guess if the object is later calibrated. If omitted, default = -0.06 is used. </description>
          </Parameter>
          <Parameter name='b' default='0.17'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>coefficient in the abcd vol parametrization. Used as guess if the object is later calibrated. If omitted, default = 0.17 is used.</description>
          </Parameter>
          <Parameter name='c' default='0.54'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>coefficient in the abcd vol parametrization. Used as guess if the object is later calibrated. If omitted, default = 0.54 is used.</description>
          </Parameter>
          <Parameter name='d' default='0.17'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>coefficient in the abcd vol parametrization. Used as guess if the object is later calibrated. If omitted, default = 0.17 is used.</description>
          </Parameter>
          <Parameter name='ResetIndex' exampleValue='0'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>Index that defines the reset time of rate.</description>
          </Parameter>
          <Parameter name='rateTimes' exampleValue ='0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0,4.5,5.0,5.5'>
            <type>QuantLib::Time</type>
            <tensorRank>vector</tensorRank>
            <description>rate fixing times</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlPiecewiseConstantCorrelationCorrelation' type='QuantLib::PiecewiseConstantCorrelation' superType='libraryClass'>
      <description>Returns the pseudo-root of the equivalent covariance swap rates matrix</description>
      <libraryFunction>correlation</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='timeIndex' exampleValue ='0'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>time index.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlPiecewiseConstantCorrelationTimes' type='QuantLib::PiecewiseConstantCorrelation' superType='libraryClass'>
      <description>Piecewise Constant Correlation Times</description>
      <libraryFunction>times</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlPiecewiseConstantCorrelationNumberOfRates' type='QuantLib::PiecewiseConstantCorrelation' superType='libraryClass'>
      <description>Piecewise Constant Correlation Number of Rates</description>
      <libraryFunction>numberOfRates</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Size</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlCotSwapFromFwdCorrelation'>
      <libraryFunction>CotSwapFromFwdCorrelation</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='correlationMatrix'>
            <type>QuantLib::Matrix</type>
            <tensorRank>matrix</tensorRank>
            <description>FRA correlation matrix</description>
          </Parameter>
          <Parameter name='curveState' exampleValue ='CurveStateID'>
            <type>QuantLib::CurveState</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>curveState</description>
          </Parameter>
          <Parameter name='displacement' default='0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>scalar</tensorRank>
            <description>displacement</description>
          </Parameter>
          <Parameter name='evolution' exampleValue ='EvolutionDescriptionID'>
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>Evolution Description</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- Caplet calibration of a Coterminal Swap Market Model -->

    <Constructor name='qlCapletCoterminalSwaptionCalibration'>
      <libraryFunction>CapletCoterminalSwaptionCalibration</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='evolution' exampleValue ='EvolutionDescriptionID'>
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>Evolution Description</description>
          </Parameter>
          <Parameter name='correlations'>
            <type>QuantLib::PiecewiseConstantCorrelation</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>PiecewiseConstantCorrelation object ID</description>
          </Parameter>
          <Parameter name='swapPiecewiseConstantVariances'>
            <type>QuantLib::PiecewiseConstantVariance</type>
            <tensorRank>vector</tensorRank>
            <description>PiecewiseConstantVariance IDs</description>
          </Parameter>
          <Parameter name='capletVols' exampleValue ='0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1'>
            <type>QuantLib::Volatility</type>
            <tensorRank>vector</tensorRank>
            <description>caplet volatilities</description>
          </Parameter>
          <Parameter name='curveState' exampleValue ='CurveStateID'>
            <type>QuantLib::CurveState</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>CurveState object ID</description>
          </Parameter>
          <Parameter name='displacement' default='0.0'>
            <type>QuantLib::Volatility</type>
            <tensorRank>scalar</tensorRank>
            <description>displacement</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlCapletCoterminalSwaptionCalibrationCalibrate' type='QuantLib::CapletCoterminalSwaptionCalibration' superType='libraryClass'>
      <description>calibrate</description>
      <libraryFunction>calibrate</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='numberOfFactors' example='3'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>number of factors</description>
          </Parameter>
          <Parameter name='maxIter' default='2'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>maximum number of iterations</description>
          </Parameter>
          <Parameter name='capletVolTol' default='0.0001'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>caplet vol tolerance</description>
          </Parameter>
          <Parameter name='alphas' exampleValue ='0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01'>
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>alphas</description>
          </Parameter>
          <Parameter name='lowestRoot' default='TRUE'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE for lowest root, FALSE for the root nearest to 1.0</description>
          </Parameter>
          <Parameter name='useFullApprox' exampleValue='TRUE'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE for using Full Approximation</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCapletCoterminalSwaptionNegativeDiscriminants' type='QuantLib::CapletCoterminalSwaptionCalibration' superType='libraryClass'>
      <description>negativeDiscriminants</description>
      <libraryFunction>negativeDiscriminants</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Size</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCapletCoterminalSwaptionRmsError' type='QuantLib::CapletCoterminalSwaptionCalibration' superType='libraryClass'>
      <description>rmsError</description>
      <libraryFunction>rmsError</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCapletCoterminalSwaptionSwapPseudoRoot' type='QuantLib::CapletCoterminalSwaptionCalibration' superType='libraryClass'>
      <description>swapPseudoRoot</description>
      <libraryFunction>swapPseudoRoot</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='index' exampleValue='0'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>index</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>



    <Constructor name='qlCapletCoterminalSwaptionCalibration2'>
      <libraryFunction>CapletCoterminalSwaptionCalibration2</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='evolution' exampleValue ='EvolutionDescriptionID'>
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>Evolution Description</description>
          </Parameter>
          <Parameter name='correlations'>
            <type>QuantLib::PiecewiseConstantCorrelation</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>PiecewiseConstantCorrelation object ID</description>
          </Parameter>
          <Parameter name='swapPiecewiseConstantVariances'>
            <type>QuantLib::PiecewiseConstantVariance</type>
            <tensorRank>vector</tensorRank>
            <description>PiecewiseConstantVariance IDs</description>
          </Parameter>
          <Parameter name='capletVols' exampleValue ='0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1'>
            <type>QuantLib::Volatility</type>
            <tensorRank>vector</tensorRank>
            <description>caplet volatilities</description>
          </Parameter>
          <Parameter name='curveState' exampleValue ='CurveStateID'>
            <type>QuantLib::CurveState</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>CurveState object ID</description>
          </Parameter>
          <Parameter name='displacement' default='0.0'>
            <type>QuantLib::Volatility</type>
            <tensorRank>scalar</tensorRank>
            <description>displacement</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlCapletCoterminalSwaptionCalibration2Calibrate' type='QuantLib::CapletCoterminalSwaptionCalibration2' superType='libraryClass'>
      <description>calibrate</description>
      <libraryFunction>calibrate</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='numberOfFactors' example='3'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>number of factors</description>
          </Parameter>
          <Parameter name='maxIter' default='2'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>maximum number of iterations</description>
          </Parameter>
          <Parameter name='capletVolTol' default='0.0001'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>caplet vol tolerance</description>
          </Parameter>
          <Parameter name='maxIterInner' default='100'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>maximum number of iterations for inner solving</description>
          </Parameter>
          <Parameter name='innerTol' default='1e-8'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>tolerance used in the inner solving</description>
          </Parameter>
          <Parameter name='maximizeHomogeneity' default='TRUE'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE for maximizing homogeneity</description>
          </Parameter>
          <Parameter name='alphaInitial' exampleValue ='0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01,0.01'>
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>alphaInitial</description>
          </Parameter>
          <Parameter name='alphaMax' default ='1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0'>
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>alphaMax</description>
          </Parameter>
          <Parameter name='alphaMin' default ='-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0,-1.0'>
            <type>QuantLib::Real</type>
            <tensorRank>vector</tensorRank>
            <description>alphaMin</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCapletCoterminalSwaption2RmsError' type='QuantLib::CapletCoterminalSwaptionCalibration2' superType='libraryClass'>
      <description>rmsError</description>
      <libraryFunction>rmsError</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCapletCoterminalSwaption2SwapPseudoRoot' type='QuantLib::CapletCoterminalSwaptionCalibration2' superType='libraryClass'>
      <description>swapPseudoRoot</description>
      <libraryFunction>swapPseudoRoot</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='index' exampleValue='0'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>index</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>


    <Constructor name='qlCapletCoterminalSwaptionCalibration3'>
      <libraryFunction>CapletCoterminalSwaptionCalibration3</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='evolution' exampleValue ='EvolutionDescriptionID'>
            <type>QuantLib::EvolutionDescription</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>Evolution Description</description>
          </Parameter>
          <Parameter name='correlations'>
            <type>QuantLib::PiecewiseConstantCorrelation</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>PiecewiseConstantCorrelation object ID</description>
          </Parameter>
          <Parameter name='swapPiecewiseConstantVariances'>
            <type>QuantLib::PiecewiseConstantVariance</type>
            <tensorRank>vector</tensorRank>
            <description>PiecewiseConstantVariance IDs</description>
          </Parameter>
          <Parameter name='capletVols' exampleValue ='0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1'>
            <type>QuantLib::Volatility</type>
            <tensorRank>vector</tensorRank>
            <description>caplet volatilities</description>
          </Parameter>
          <Parameter name='curveState' exampleValue ='CurveStateID'>
            <type>QuantLib::CurveState</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>CurveState object ID</description>
          </Parameter>
          <Parameter name='displacement' default='0.0'>
            <type>QuantLib::Volatility</type>
            <tensorRank>scalar</tensorRank>
            <description>displacement</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlCapletCoterminalSwaptionCalibration3Calibrate' type='QuantLib::CapletCoterminalSwaptionCalibration3' superType='libraryClass'>
      <description>calibrate</description>
      <libraryFunction>calibrate</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='numberOfFactors' example='3'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>number of factors</description>
          </Parameter>
          <Parameter name='maxIter' default='2'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>maximum number of iterations</description>
          </Parameter>
          <Parameter name='capletVolTol' default='0.0001'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>caplet vol tolerance</description>
          </Parameter>
          <Parameter name='maxIterInner' default='100'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>maximum number of iterations for inner solving</description>
          </Parameter>
          <Parameter name='innerTol' default='1e-8'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>tolerance used in the inner solving</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCapletCoterminalSwaption3DeformationSize' type='QuantLib::CapletCoterminalSwaptionCalibration3' superType='libraryClass'>
      <description>deformationSize</description>
      <libraryFunction>deformationSize</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCapletCoterminalSwaption3RmsError' type='QuantLib::CapletCoterminalSwaptionCalibration3' superType='libraryClass'>
      <description>rmsError</description>
      <libraryFunction>rmsError</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlCapletCoterminalSwaption3SwapPseudoRoot' type='QuantLib::CapletCoterminalSwaptionCalibration3' superType='libraryClass'>
      <description>swapPseudoRoot</description>
      <libraryFunction>swapPseudoRoot</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='index' exampleValue='0'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>index</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <!-- Forward Libor Market Model <-> Coterminal Swap Market Model -->

    <Procedure name='qlCoterminalSwapForwardJacobian'>
      <description>Returns the jacobian between coterminal swap rates and forward rates</description>
      <alias>QuantLib::SwapForwardMappings::coterminalSwapForwardJacobian</alias>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='curveState' >
            <type>QuantLib::CurveState</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>CurveState object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlCoterminalSwapZedMatrix'>
      <description>Returns the Z matrix to switch base from forward to coterminal swap rates</description>
      <alias>QuantLib::SwapForwardMappings::coterminalSwapZedMatrix</alias>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='curveState' >
            <type>QuantLib::CurveState</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>CurveState object ID</description>
          </Parameter>
          <Parameter name='displacement' default='0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>scalar</tensorRank>
            <description>displacement</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Procedure>
   
    <!-- BrownianGeneratorFactory derived classes constructor  -->
    <Constructor name='qlMTBrownianGeneratorFactory'>
      <libraryFunction>MTBrownianGeneratorFactory</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='seed' default='0'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>seed for random sequence generator</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>


    <!-- AccountingEngine class constructor -->
    <Constructor name='qlAccountingEngine'>
      <libraryFunction>AccountingEngine</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='marketModelEvolver'>
            <type>QuantLib::MarketModelEvolver</type>
            <tensorRank>scalar</tensorRank>
            <description>MarketModelEvolver object ID</description>
          </Parameter>
          <Parameter name='product' >
            <type>QuantLib::MarketModelMultiProduct</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>MarketModelMultiProduct object ID</description>
          </Parameter>
          <Parameter name='initialNumeraireValue'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>initial numeraire value</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- AccountingEngine class interfaces -->
    <Member name='qlAccountingEngineMultiplePathValues' type='QuantLib::AccountingEngine'>
      <description>return multiple path values</description>
      <libraryFunction>multiplePathValues</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='sequenceStatistics' >
            <type>QuantLib::SequenceStatistics</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>Sequence Statistics object ID</description>
          </Parameter>
          <Parameter name='paths' exampleValue ='8191'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>number of paths</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <!-- LmExtLinearExponentialVolModel constructor  -->

    <Constructor name='qlMarketModelLmExtLinearExponentialVolModel'>
      <libraryFunction>LmExtLinearExponentialVolModel</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='fixingTimes' libraryType='QuantLib::Time' exampleValue ='0.0,1.0,2.0,3.0,4.0,5.0'>
            <type>double</type>
            <tensorRank>vector</tensorRank>
            <description>rate fixing times</description>
          </Parameter>
          <Parameter name='a' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>a parameter</description>
          </Parameter>
          <Parameter name='b' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>b parameter</description>
          </Parameter>
          <Parameter name='c' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>c parameter</description>
          </Parameter>
          <Parameter name='d' exampleValue ='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>d parameter</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- LmLinearExponentialCorrelationModel constructor  -->

    <Constructor name='qlMarketModelLmLinearExponentialCorrelationModel'>
      <libraryFunction>LmLinearExponentialCorrelationModel</libraryFunction>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='size' exampleValue ='4'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>size</description>
          </Parameter>
          <Parameter name='rho' exampleValue ='0.5'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>rho</description>
          </Parameter>
          <Parameter name='beta' exampleValue ='.6'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>beta</description>
          </Parameter>
          <Parameter name='factors' default='QuantLib::Null&lt;QuantLib::Size&gt;()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>factors</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Procedure name='qlHistCorrZeroYieldLinear'>
      <description>Returns historical correlations between forward rates using a ZeroYield, Linear boostrapped curve</description>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='startDate'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>beginning of the time series</description>
          </Parameter>
          <Parameter name='endDate'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>end of the time series</description>
          </Parameter>
          <Parameter name='step' exampleValue='1D'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>time series' time step</description>
          </Parameter>
          <Parameter name='iborIndex'>
            <type>QuantLib::IborIndex</type>
            <tensorRank>scalar</tensorRank>
            <description>floating rate index</description>
          </Parameter>
          <Parameter name='initialGap' exampleValue='3M'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>initialGap</description>
          </Parameter>
          <Parameter name='horizon' exampleValue='30Y'>
            <type>QuantLib::Period</type>
            <tensorRank>scalar</tensorRank>
            <description>bootstrap horizon</description>
          </Parameter>
          <Parameter name='iborIndexes'>
            <type>QuantLib::IborIndex</type>
            <tensorRank>vector</tensorRank>
            <description>Ibor indexes</description>
          </Parameter>
          <Parameter name='swapIndexes'>
            <type>QuantLib::SwapIndex</type>
            <tensorRank>vector</tensorRank>
            <description>Swap indexes</description>
          </Parameter>
          <Parameter name='DayCounter' exampleValue='Actual/365 (Fixed)'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>yield curve DayCounter</description>
          </Parameter>
          <Parameter name='bootstrapAccuracy' exampleValue='10e-12'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>boostrap accuracy</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Matrix</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlRateVolDifferences'>
      <description>Compute the differences between all implied forwards volatilities</description>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='marketModel1' >
            <type>QuantLib::MarketModel</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>First Market Model</description>
          </Parameter>
          <Parameter name='marketModel2'>
            <type>QuantLib::MarketModel</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>Second Market Model</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlRateInstVolDifferences'>
      <description>Compute the differences between volatilities at each evolution step</description>
      <functionCategory>QuantLib</functionCategory>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel' calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='marketModel1' >
            <type>QuantLib::MarketModel</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>First Market Model</description>
          </Parameter>
          <Parameter name='marketModel2'>
            <type>QuantLib::MarketModel</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>Second Market Model</description>
          </Parameter>
          <Parameter name='index' exampleValue='2'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>Forward Rate index</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Procedure>

  </Functions>
</Category>
