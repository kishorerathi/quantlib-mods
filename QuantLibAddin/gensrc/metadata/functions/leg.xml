<Category name='leg'>
  <description>functions to construct and use Leg objects.</description>
  <displayName>Leg</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <serializationIncludes>
    <include>qlo/couponvectors.hpp</include>
  </serializationIncludes>
  <addinIncludes>
    <include>qlo/couponvectors.hpp</include>
    <include>qlo/conundrumpricer.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>ql/termstructures/yieldtermstructure.hpp</include>
  </addinIncludes>
  <copyright>
    Copyright (C) 2006, 2007, 2009 Ferdinando Ametrano
    Copyright (C) 2006, 2007 Cristina Duminuco
    Copyright (C) 2006, 2007 Giorgio Facchinetti
    Copyright (C) 2005 Aurelien Chanudet
  </copyright>

  <Functions>

    <!-- Leg interface -->
    <Member name='qlLegStartDate' type='QuantLibAddin::Leg'>
      <description>Returns the start (i.e. first accrual) date for the given Leg object.</description>
      <libraryFunction>startDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegMaturityDate' type='QuantLibAddin::Leg'>
      <description>Returns the maturity (i.e. last payment) date for the given Leg object.</description>
      <libraryFunction>startDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegIsExpired' type='QuantLibAddin::Leg'>
      <description>Returns TRUE is the Leg is expired</description>
      <libraryFunction>isExpired</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>





    <Member name='qlLegPreviousCashFlowDate' type='QuantLibAddin::Leg'>
      <description>Returns the previous cash flow date.</description>
      <libraryFunction>previousCashFlowDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegNextCashFlowDate' type='QuantLibAddin::Leg'>
      <description>Returns the next cash flow date.</description>
      <libraryFunction>nextCashFlowDate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Date</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegPreviousCashFlowAmount' type='QuantLibAddin::Leg'>
      <description>Returns the previous cash flow amount.</description>
      <libraryFunction>previousCashFlowAmount</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegnextCashFlowAmount' type='QuantLibAddin::Leg'>
      <description>Returns the next cash flow amount.</description>
      <libraryFunction>nextCashFlowAmount</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>



    <Member name='qlLegPreviousCouponRate' type='QuantLibAddin::Leg'>
      <description>Returns the previous coupon. Depending on (the Leg and) the given date it can be historic, deterministic or expected in a stochastic sense. When the bond settlement date is used the coupon is the last paid one.</description>
      <libraryFunction>previousCouponRate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegNextCouponRate' type='QuantLibAddin::Leg'>
      <description>Returns the next coupon. Depending on (the Leg and) the given date it can be historic, deterministic or expected in a stochastic sense. When the bond settlement date is used the coupon is the already-fixed not-yet-paid one.</description>
      <libraryFunction>nextCouponRate</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegAccruedAmount' type='QuantLibAddin::Leg'>
      <description>Returns the accrued amount. Depending on (the Leg and) the given date it can be historic, deterministic or expected in a stochastic sense. When the bond settlement date is used the coupon is the already-fixed not-yet-paid one.</description>
      <libraryFunction>accruedAmount</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>





    <Member name='qlLegNPV' type='QuantLibAddin::Leg'>
      <description>Returns the net present value for the given Leg object.</description>
      <libraryFunction>npv</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='DiscountCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>net present value date: all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegBPS' type='QuantLibAddin::Leg'>
      <description>Returns the basis point sensitivity for the given Leg object.</description>
      <libraryFunction>bps</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='DiscountCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>net present value date: all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegAtmRate' type='QuantLibAddin::Leg'>
      <description>Returns the at-the-money rate for the given Leg object, i.e. the fixed rate for which an equivalent vector of fixed-rate cash flows would have the same NPV.</description>
      <libraryFunction>atmRate</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='DiscountCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>underlyingClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>net present value date: all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
          <Parameter name='NPV' default='QuantLib::Null&lt;QuantLib::Real&gt;()'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>target net present value. If missing the NPV is calculated using the provided discount curve</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>




    <Member name='qlLegNPVFromYield' type='QuantLibAddin::Leg'>
      <description>Returns the net present value for the given Leg object.</description>
      <libraryFunction>npv</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Yield' exampleValue='0.03'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield (a.k.a. IRR).</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>net present value date: all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegBPSFromYield' type='QuantLibAddin::Leg'>
      <description>Returns the basis point sensitivity for the given Leg object.</description>
      <libraryFunction>bps</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Yield' exampleValue='0.03'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield (a.k.a. IRR).</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>net present value date: all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegYield' type='QuantLibAddin::Leg'>
      <description>Returns the Internal rate of return for the given Leg object.</description>
      <libraryFunction>yield</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='NPV' exampleValue='100.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Net present (dirty) value.</description>
          </Parameter>
          <Parameter name='DayCounter' exampleValue='Actual/Actual (ISMA)'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Irr DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' default='"Continuous"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' default='"Annual"' const='False'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>net present value date: all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
          <Parameter name='Accuracy' default='1.0e-10'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>tolerance.</description>
          </Parameter>
          <Parameter name='MaxIterations' default='100'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>max number of iterations.</description>
          </Parameter>
          <Parameter name='Guess' default='0.05'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>guess.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegDuration' type='QuantLibAddin::Leg'>
      <description>Returns the Cash-flow duration for the given Leg object.</description>
      <libraryFunction>duration</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Yield' exampleValue='0.03'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield (a.k.a. IRR).</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='DurationType' default='"Modified"'>
            <type>QuantLib::Duration::Type</type>
            <tensorRank>scalar</tensorRank>
            <description>Duration type.</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>net present value date: all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Time</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegConvexity' type='QuantLibAddin::Leg'>
      <description>Returns the Cash-flow convexity for the given Leg object.</description>
      <libraryFunction>convexity</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Yield' exampleValue='0.03'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield (a.k.a. IRR).</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>net present value date: all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegBasisPointValue' type='QuantLibAddin::Leg'>
      <description>Returns the basisPointValue for the given Leg object.</description>
      <libraryFunction>basisPointValue</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Yield' exampleValue='0.03'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield (a.k.a. IRR).</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>net present value date: all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegYieldValueBasisPoint' type='QuantLibAddin::Leg'>
      <description>Returns the yieldValueBasisPoint for the given Leg object.</description>
      <libraryFunction>yieldValueBasisPoint</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Yield' exampleValue='0.03'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield (a.k.a. IRR).</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>net present value date: all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>






    <Member name='qlLegNPVFromZSpread' type='QuantLibAddin::Leg'>
      <description>Returns the net present value for the given Leg object.</description>
      <libraryFunction>npv</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='DiscountCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='ZSpread' const='False' exampleValue='-0.005'>
            <type>QuantLib::Spread</type>
            <tensorRank>scalar</tensorRank>
            <description>Z-spread.</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/Actual (ISDA)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Yield DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' const='False' default='"Compounded"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' const='False' default='"Annual"'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>net present value date: all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Real</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegZSpread' type='QuantLibAddin::Leg'>
      <description>Returns the z-spread for the given Leg object.</description>
      <libraryFunction>zSpread</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='NPV' exampleValue='100.0'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>Net present (dirty) value.</description>
          </Parameter>
          <Parameter name='DiscountCurve' exampleValue='EURYC'>
            <type>QuantLib::YieldTermStructure</type>
            <superType>libraryClass</superType>
            <tensorRank>scalar</tensorRank>
            <description>discounting YieldTermStructure object ID.</description>
          </Parameter>
          <Parameter name='DayCounter' exampleValue='Actual/Actual (ISMA)'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Irr DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' default='"Continuous"'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' default='"Annual"' const='False'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
          <Parameter name='IncludeSettlDate' const='False' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if cashflows paid at the settlement date must be taken into account.</description>
          </Parameter>
          <Parameter name='SettlementDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>settlement date: cashflows before this date are not taken into account. If missing it defaults to the current evaluation date.</description>
          </Parameter>
          <Parameter name='NpvDate' const='False' default='QuantLib::Date()'>
            <type>QuantLib::Date</type>
            <tensorRank>scalar</tensorRank>
            <description>net present value date: all cashflows are discounted to this date. If missing it is assumed equal to the settlement date</description>
          </Parameter>
          <Parameter name='Accuracy' default='1.0e-10'>
            <type>QuantLib::Real</type>
            <tensorRank>scalar</tensorRank>
            <description>tolerance.</description>
          </Parameter>
          <Parameter name='MaxIterations' default='100'>
            <type>QuantLib::Size</type>
            <tensorRank>scalar</tensorRank>
            <description>max number of iterations.</description>
          </Parameter>
          <Parameter name='Guess' default='0.0'>
            <type>QuantLib::Spread</type>
            <tensorRank>scalar</tensorRank>
            <description>guess.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Spread</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>












    <Member name='qlLegAnalysis' type='QuantLibAddin::Leg'>
      <description>Returns the flow analysis for the given Leg object.</description>
      <libraryFunction>analysis</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>any</type>
        <tensorRank>matrix</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlLegSetCouponPricers' type='QuantLibAddin::Leg'>
      <description>Set the coupon pricer at the given Leg object.</description>
      <libraryFunction>setCouponPricers</libraryFunction>
      <SupportedPlatforms>
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='FloatingRateCouponPricer'>
            <type>QuantLibAddin::FloatingRateCouponPricer</type>
            <tensorRank>vector</tensorRank>
            <description>FloatingRate coupon pricer object ID.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>void</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlMultiPhaseLeg'>
      <libraryFunction>MultiPhaseLeg</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='LegIDs'>
            <type>QuantLibAddin::Leg</type>
            <tensorRank>vector</tensorRank>
            <description>leg object IDs, one for each phase.</description>
          </Parameter>
          <Parameter name='ToBeSorted' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>TRUE if the CashFlows in the merged Leg must be sorted according to date/amount.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlInterestRateRate' type='QuantLib::InterestRate' superType='libraryClass'>
      <description>Returns the rate in the given InterestRate object.</description>
      <libraryFunction>rate</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Rate</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlInterestRateDayCounter' type='QuantLib::InterestRate' superType='libraryClass'>
      <description>Returns the DayCounter in the given InterestRate object.</description>
      <libraryFunction>dayCounter</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::DayCounter</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlInterestRateCompounding' type='QuantLib::InterestRate' superType='libraryClass'>
      <description>Returns the Compounding in the given InterestRate object.</description>
      <libraryFunction>compounding</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Compounding</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlInterestRateFrequency' type='QuantLib::InterestRate' superType='libraryClass'>
      <description>Returns the Frequency in the given InterestRate object.</description>
      <libraryFunction>frequency</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <!--SupportedPlatform name='Cpp'/-->
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>QuantLib::Frequency</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlInterestRate'>
      <libraryFunction>InterestRate</libraryFunction>
      <SupportedPlatforms>
        <!--SupportedPlatform name='Excel' calcInWizard='false'/-->
        <SupportedPlatform name='Excel'/>
        <SupportedPlatform name='Cpp'/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='Rate' exampleValue='0.04'>
            <type>QuantLib::Rate</type>
            <tensorRank>scalar</tensorRank>
            <description>rate.</description>
          </Parameter>
          <Parameter name='DayCounter' default='"Actual/365 (Fixed)"'>
            <type>QuantLib::DayCounter</type>
            <tensorRank>scalar</tensorRank>
            <description>Irr DayCounter ID.</description>
          </Parameter>
          <Parameter name='Compounding' default='"Continuous"' const='False'>
            <type>QuantLib::Compounding</type>
            <tensorRank>scalar</tensorRank>
            <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt}).</description>
          </Parameter>
          <Parameter name='Frequency' default='"Annual"' const='False'>
            <type>QuantLib::Frequency</type>
            <tensorRank>scalar</tensorRank>
            <description>frequency (e.g. Annual, Semiannual, Every4Month, Quarterly, Bimonthly, Monthly).</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

  </Functions>

</Category>
