<Category name='schedule'>
  <description>functions to construct and use Schedule objects</description>
  <displayName>Schedules</displayName>
  <xlFunctionWizardCategory>QuantLib - Date</xlFunctionWizardCategory>
  <copyright>
    Copyright (C) 2006 Ferdinando Ametrano
    Copyright (C) 2005 Aurelien Chanudet
  </copyright>
  <Functions>

    <Constructor name='qlSchedule'>
      <libraryFunction>Schedule</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='effectiveDate' libraryType='QuantLib::Date' exampleValue='2M'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>effective date</description>
          </Parameter>
          <Parameter name='terminationDate' libraryType='QuantLib::Date' exampleValue='122M'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>termination date</description>
          </Parameter>
          <Parameter name='tenor' libraryType='QuantLib::Period' exampleValue='1Y'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>tenor (e.g. 2D for two days , 3W for three weeks, 6M for six months, 1Y for one year)</description>
          </Parameter>
          <Parameter name='calendar' enumeration='QuantLib::Calendar'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>holiday calendar (e.g. TARGET)</description>
          </Parameter>
          <Parameter name='convention' enumeration='QuantLib::BusinessDayConvention'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>accrual dates business day convention</description>
          </Parameter>
          <Parameter name='termDateConv' enumeration='QuantLib::BusinessDayConvention'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>termination date business day convention</description>
          </Parameter>
          <Parameter name='backward' default='true'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>backward generation of the schedule. TRUE by default.</description>
          </Parameter>
          <Parameter name='endOfMonth' default='false'>
            <type>bool</type>
            <tensorRank>scalar</tensorRank>
            <description>end of month convention. FALSE by default.</description>
          </Parameter>
          <Parameter name='firstDate' libraryType='QuantLib::Date' default='QuantLib::Date()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>stub date, if there is an irregular starting period. NA by default.</description>
          </Parameter>
          <Parameter name='nextToLastDate' libraryType='QuantLib::Date' default='QuantLib::Date()'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>stub date, if there an irregular final period. NA by default.</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Member name='qlScheduleDates' libraryClass='Schedule'>
      <description>returns the dates for the given Schedule object</description>
      <libraryFunction>dates</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
        </Parameters>
      </ParameterList>
      <ReturnValue libraryType='QuantLib::Date'>
        <type>long</type>
        <tensorRank>vector</tensorRank>
      </ReturnValue>
    </Member>

  </Functions>
</Category>
