<?xml version='1.0'?>
<!-- DOCTYPE functiongroup SYSTEM 'functiongroup.dtd' -->
<functiongroup>
<headeronly>false</headeronly>
<desc>functions to construct QuantLib instrument objects</desc>
<displayname>Instruments</displayname>

<functions>

<function call_type='QL_OBJECT'>
<name>QL_BOND_ACCRUED</name>
<codename>qlAccrued</codename>
<desc>Accrued: If no settlement is given the default bond settlement is used for calculation.</desc>
<constructor>false</constructor>
<qlfunction>accruedAmount</qlfunction>
<parameters>
    <param class='FixedCouponBond'>
        <name>handle</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>handle of the Fixed Coupon Bond object</desc>
    </param>
    <param ql_type='QuantLib::Date'>
        <name>settlementDate</name>
        <type>long</type>
        <tensorrank>scalar</tensorrank>
        <desc>settlement date</desc>
    </param>
</parameters>
<returnval>
    <type>double</type>
    <tensorrank>scalar</tensorrank>
    <desc>the accrual</desc>
</returnval>
</function>

<function call_type='QL_OBJECT'>
<name>QL_BOND_CLEAN_PRICE</name>
<codename>qlCleanPrice</codename>
<desc>If no settlement is given the default bond settlement is used for calculation.</desc>
<constructor>false</constructor>
<qlfunction>cleanPrice</qlfunction>
<parameters>
    <param class='FixedCouponBond'>
        <name>handle</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>handle of the Fixed Coupon Bond object</desc>
    </param>
    <param>
        <name>yield</name>
        <type>double</type>
        <tensorrank>scalar</tensorrank>
        <desc>bond yield</desc>
    </param>
    <param ql_type='QuantLib::Compounding'>
        <name>compounding</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</desc>
    </param>
    <param ql_type='QuantLib::Date'>
        <name>settlementDate</name>
        <type>long</type>
        <tensorrank>scalar</tensorrank>
        <desc>settlement date</desc>
    </param>
</parameters>
<returnval>
    <type>double</type>
    <tensorrank>scalar</tensorrank>
    <desc>the clean price</desc>
</returnval>
</function>

<function call_type='QL_OBJECT'>
<name>QL_BOND_DIRTY_PRICE</name>
<codename>qlDirtyPrice</codename>
<desc>dirty price: If no settlement is given the default bond settlement is used for calculation.</desc>
<constructor>false</constructor>
<qlfunction>dirtyPrice</qlfunction>
<parameters>
    <param class='FixedCouponBond'>
        <name>handle</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>handle of the Fixed Coupon Bond object</desc>
    </param>
    <param>
        <name>yield</name>
        <type>double</type>
        <tensorrank>scalar</tensorrank>
        <desc>bond yield</desc>
    </param>
    <param ql_type='QuantLib::Compounding'>
        <name>compounding</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</desc>
    </param>
    <param ql_type='QuantLib::Date'>
        <name>settlementDate</name>
        <type>long</type>
        <tensorrank>scalar</tensorrank>
        <desc>settlement date</desc>
    </param>
</parameters>
<returnval>
    <type>double</type>
    <tensorrank>scalar</tensorrank>
    <desc>the dirty price</desc>
</returnval>
</function>

<function call_type='QL_OBJECT'>
<name>QL_BOND_TH_CLEAN_PRICE</name>
<codename>qlThCleanPrice</codename>
<desc>theoretical clean price: The default bond settlement is used for calculation.</desc>
<constructor>false</constructor>
<qlfunction>cleanPrice</qlfunction>
<parameters>
    <param class='FixedCouponBond'>
        <name>handle</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>handle of the Fixed Coupon Bond object</desc>
    </param>
    <param ignore='yes'>
        <name>trigger</name>
        <type>any</type>
        <tensorrank>scalar</tensorrank>
        <desc>dep tracking trigger</desc>
    </param>
</parameters>
<returnval>
    <type>double</type>
    <tensorrank>scalar</tensorrank>
    <desc>the theoretical clean price</desc>
</returnval>
</function>

<function call_type='QL_OBJECT'>
<name>QL_BOND_TH_DIRTY_PRICE</name>
<codename>qlThDirtyPrice</codename>
<desc>theoretical dirty price: The default bond settlement is used for calculation.</desc>
<constructor>false</constructor>
<qlfunction>dirtyPrice</qlfunction>
<parameters>
    <param class='FixedCouponBond'>
        <name>handle</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>handle of the Fixed Coupon Bond object</desc>
    </param>
    <param ignore='yes'>
        <name>trigger</name>
        <type>any</type>
        <tensorrank>scalar</tensorrank>
        <desc>dep tracking trigger</desc>
    </param>
</parameters>
<returnval>
    <type>double</type>
    <tensorrank>scalar</tensorrank>
    <desc>the theoretical dirty price</desc>
</returnval>
</function>

<function call_type='QL_OBJECT'>
<name>QL_BOND_TH_YIELD</name>
<codename>qlThBondYield</codename>
<desc>theoretical bond yield: The default bond settlement and theoretical price are used for calculation.</desc>
<constructor>false</constructor>
<qlfunction>yield</qlfunction>
<parameters>
    <param class='FixedCouponBond'>
        <name>handle</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>handle of the Fixed Coupon Bond object</desc>
    </param>
    <param ql_type='QuantLib::Compounding'>
        <name>Compounding</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</desc>
    </param>
    <param ignore='yes'>
        <name>trigger</name>
        <type>any</type>
        <tensorrank>scalar</tensorrank>
        <desc>dep tracking trigger</desc>
    </param>
</parameters>
<returnval>
    <type>double</type>
    <tensorrank>scalar</tensorrank>
    <desc>the theoretical yield</desc>
</returnval>
</function>

<function call_type='QL_OBJECT'>
<name>QL_BOND_YIELD</name>
<codename>qlYield</codename>
<desc>Yield: If no settlement is given the default bond settlement is used for calculation.</desc>
<constructor>false</constructor>
<qlfunction>yield</qlfunction>
<parameters>
    <param class='FixedCouponBond'>
        <name>handle</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>handle of the Fixed Coupon Bond object</desc>
    </param>
    <param>
        <name>cleanPrice</name>
        <type>double</type>
        <tensorrank>scalar</tensorrank>
        <desc>Clean Price</desc>
    </param>
    <param ql_type='QuantLib::Compounding'>
        <name>compounding</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</desc>
    </param>
    <param ql_type='QuantLib::Date'>
        <name>settlementDate</name>
        <type>long</type>
        <tensorrank>scalar</tensorrank>
        <desc>settlement date</desc>
    </param>
</parameters>
<returnval>
    <type>double</type>
    <tensorrank>scalar</tensorrank>
    <desc>the dirty price</desc>
</returnval>
</function>

<function>
<name>QL_FIXED_COUPON_BOND</name>
<codename>qlFixedCouponBond</codename>
<desc>construct and return a handle to a Fixed Coupon Bond object</desc>
<constructor>true</constructor>
<qlfunction>FixedCouponBond</qlfunction>
<parameters>
    <param>
        <name>issueDate</name>
        <type>long</type>
        <tensorrank>scalar</tensorrank>
        <desc>issue date</desc>
    </param>
    <param>
        <name>firstCouponDate</name>
        <type>long</type>
        <tensorrank>scalar</tensorrank>
        <desc>first coupon date</desc>
    </param>
    <param>
        <name>maturityDate</name>
        <type>long</type>
        <tensorrank>scalar</tensorrank>
        <desc>maturity date</desc>
    </param>
    <param>
        <name>settlementDays</name>
        <type>long</type>
        <tensorrank>scalar</tensorrank>
        <desc>settlement days</desc>
    </param>
    <param>
        <name>coupon</name>
        <type>double</type>
        <tensorrank>vector</tensorrank>
        <desc>coupons</desc>
    </param>
    <param>
        <name>nominal</name>
        <type>double</type>
        <tensorrank>vector</tensorrank>
        <desc>nominals</desc>
    </param>
    <param>
        <name>Redemption</name>
        <type>double</type>
        <tensorrank>scalar</tensorrank>
        <desc>Redemption</desc>
    </param>
    <param>
        <name>frequencyID</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>frequency ID</desc>
    </param>
    <param>
        <name>dayCounterID</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>day counter ID</desc>
    </param>
    <param>
        <name>BDayConv</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>business day convention</desc>
    </param>
    <param>
        <name>calendarID</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>calendar ID</desc>
    </param>
        <param>
        <name>startFromEnd</name>
        <type>bool</type>
        <tensorrank>scalar</tensorrank>
        <desc>build schedule backwards (start from maturity)</desc>
    </param>
    <param>
        <name>longFinal</name>
        <type>bool</type>
        <tensorrank>scalar</tensorrank>
        <desc>long first/last period</desc>
    </param>
    <param class='YieldTermStructure'>
        <name>DiscountCurve</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>handle of the Yield Curve used for discounting</desc>
    </param>
</parameters>
<returnval>
    <type>string</type>
    <tensorrank>scalar</tensorrank>
    <desc>handle of newly created object</desc>
</returnval>
</function>

<function>
<name>QL_ZERO_COUPON_BOND</name>
<codename>qlZeroCouponBond</codename>
<desc>construct and return a handle to a ZeroCouponBond object</desc>
<constructor>true</constructor>
<qlfunction>ZeroCouponBond</qlfunction>
<parameters>
    <param>
        <name>issueDate</name>
        <type>long</type>
        <tensorrank>scalar</tensorrank>
        <desc>issue date</desc>
    </param>
    <param>
        <name>maturityDate</name>
        <type>long</type>
        <tensorrank>scalar</tensorrank>
        <desc>maturity date</desc>
    </param>
    <param>
        <name>settlementDays</name>
        <type>long</type>
        <tensorrank>scalar</tensorrank>
        <desc>settlement days</desc>
    </param>
    <param>
        <name>dayCounterID</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>day counter ID</desc>
    </param>
    <param>
        <name>calendarID</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>calendar ID</desc>
    </param>
    <param>
        <name>conventionID</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>convention ID</desc>
    </param>
    <param>
        <name>redemption</name>
        <type>double</type>
        <tensorrank>scalar</tensorrank>
        <desc>redemption</desc>
    </param>
    <param class='ZeroCurve'>
        <name>handleZeroCurve</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>handle of the Zero Curve object</desc>
    </param>
</parameters>
<returnval>
    <type>string</type>
    <tensorrank>scalar</tensorrank>
    <desc>handle of newly created object</desc>
</returnval>
</function>

<function call_type='QL_OBJECT'>
<name>QL_NPV</name>
<codename>qlNPV</codename>
<desc>NPV</desc>
<constructor>false</constructor>
<qlfunction>NPV</qlfunction>
<parameters>
    <param class='Instrument'>
        <name>handle</name>
        <type>string</type>
        <tensorrank>scalar</tensorrank>
        <desc>handle of instrument object</desc>
    </param>
    <param ignore='yes'>
        <name>trigger</name>
        <type>double</type>
        <tensorrank>scalar</tensorrank>
        <desc>dependency tracking trigger</desc>
    </param>
</parameters>
<returnval>
    <type>double</type>
    <tensorrank>scalar</tensorrank>
    <desc>NPV</desc>
</returnval>
</function>

</functions>
</functiongroup>

