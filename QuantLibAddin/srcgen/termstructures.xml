<Category name='termstructures'>
<description>functions to construct QuantLib term structure objects</description>
<displayName>Term Structures</displayName>
<Functions>

<!--Procedure name='qlRateHelperSelection'>
<description>select rate helpers for bootstrapping</description>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='rateHelpers'>
        <type>string</type>
        <tensorRank>vector</tensorRank>
        <description>vector of rate-helper handles</description>
    </Parameter>
    <Parameter name='includeFlag'>
        <type>bool</type>
        <tensorRank>vector</tensorRank>
        <description>inclusion boolean</description>
    </Parameter>
    <Parameter name='trigger' ignore='true'>
      <type>any</type>
      <tensorRank>scalar</tensorRank>
      <description>dependency tracking trigger</description>
    </Parameter>
    <Parameter name='nFutures'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>number of futures to be included</description>
    </Parameter>
</Parameters>
<ReturnValue>
    <type>string</type>
    <tensorRank>vector</tensorRank>
    <description>list of instance names matching regex</description>
</ReturnValue>
</Procedure-->

<Constructor name='qlDepositRateHelper'>
<libraryFunction>DepositRateHelper</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='quote'>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
        <description>quote</description>
    </Parameter>
    <Parameter name='maturity'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>maturity</description>
    </Parameter>
    <Parameter name='timeUnits'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>time units applying to above maturity</description>
    </Parameter>
    <Parameter name='fixingDays'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>fixing days (e.g. 2)</description>
    </Parameter>
    <Parameter name='calendar'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>calendar (e.g. TARGET)</description>
    </Parameter>
    <Parameter name='convention'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>business day convention (e.g. ModifiedFollowing)</description>
    </Parameter>
    <Parameter name='dayCounter'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>day counter (e.g. Actual360)</description>
    </Parameter>
</Parameters>
</Constructor>

<Constructor name='qlFuturesRateHelper'>
<libraryFunction>FuturesRateHelper</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='price'>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
        <description>future price</description>
    </Parameter>
    <Parameter name='IMM'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>IMM expiry shortcut</description>
    </Parameter>
    <Parameter name='months'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>future contract lenght in months</description>
    </Parameter>
    <Parameter name='DayCounter'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>day counter (e.g. Thirty360)</description>
    </Parameter>
    <Parameter name='bDayConvention'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>business day convention (e.g. ModifiedFollowing)</description>
    </Parameter>
	<Parameter name='calendar'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>calendar (e.g. TARGET)</description>
    </Parameter>
    <Parameter name='decade'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>base decade for the IMM shortcut (e.g. 2000 for H4 -> March 2004)</description>
    </Parameter>
</Parameters>
</Constructor>

<Member name='qlEarliestDate' getObject='true' libraryClass='RateHelper'>
  <description>retrieve a RateHelper's earliest date</description>
  <libraryFunction>earliestDate</libraryFunction>
  <functionCategory>QuantLib</functionCategory>
  <Parameters/>
  <ReturnValue return_func='serialNumber'>
    <type>long</type>
    <tensorRank>scalar</tensorRank>
    <description>earliest date</description>
  </ReturnValue>
</Member>

<Member name='qlLatestDate' getObject='true' libraryClass='RateHelper'>
  <description>retrieve a RateHelper's latest date</description>
  <libraryFunction>latestDate</libraryFunction>
  <functionCategory>QuantLib</functionCategory>
  <Parameters/>
  <ReturnValue return_func='serialNumber'>
    <type>long</type>
    <tensorRank>scalar</tensorRank>
    <description>latest date</description>
  </ReturnValue>
</Member>

<Member name='qlReferenceQuote' getObject='true' libraryClass='RateHelper'>
  <description>retrieve a RateHelper's reference quote</description>
  <libraryFunction>referenceQuote</libraryFunction>
  <functionCategory>QuantLib</functionCategory>
  <Parameters/>
	<ReturnValue>
		<type>double</type>
		<tensorRank>scalar</tensorRank>
		<description>reference quote</description>
	</ReturnValue>
</Member>

<Constructor name='qlPiecewiseFlatForward'>
<libraryFunction>PiecewiseFlatForward</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='settlementDate'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>settlement date (e.g. evaluationDate + 2)</description>
    </Parameter>
    <Parameter name='rateHelpers'>
        <type>string</type>
        <tensorRank>vector</tensorRank>
        <description>vector of rate-helper handles</description>
    </Parameter>
    <Parameter name='dayCounter'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>day counter (e.g. Actual360)</description>
    </Parameter>
    <Parameter name='trigger' ignore='true'>
      <type>any</type>
      <tensorRank>scalar</tensorRank>
      <description>dependency tracking trigger</description>
    </Parameter>
</Parameters>
</Constructor>

<Member name='qlSetQuote' libraryClass='RateHelper'>
<description>update quote of existing Rate Helper object</description>
<libraryFunction>setQuote</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='Quote'>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
        <description>the new qoute</description>
    </Parameter>
</Parameters>
<ReturnValue>
    <type>double</type>
    <tensorRank>scalar</tensorRank>
    <description>diff new quote - old quote</description>
</ReturnValue>
</Member>

<Constructor name='qlSwapRateHelper'>
<libraryFunction>SwapRateHelper</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='quote'>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
        <description>quote</description>
    </Parameter>
    <Parameter name='maturity'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>maturity</description>
    </Parameter>
    <Parameter name='timeUnits'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>time units applying to above maturity</description>
    </Parameter>
    <Parameter name='fixingDays'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>fixing days (e.g. 2)</description>
    </Parameter>
	<Parameter name='calendar'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>calendar (e.g. TARGET)</description>
    </Parameter>
    <Parameter name='fixedLegFrequency'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>fixed leg frequency (e.g. Annual)</description>
    </Parameter>
    <Parameter name='fixedLegConvention'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>fixed leg convention (e.g. Unadjusted)</description>
    </Parameter>
    <Parameter name='fixedLegDayCounter'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>fixed leg day counter (e.g. Thirty360)</description>
    </Parameter>
    <Parameter name='floatingLegFrequency'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>floating leg frequency (e.g. Quarterly, Semiannual, etc.)</description>
    </Parameter>
    <Parameter name='floatingLegConvention'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>floating leg convention (e.g. ModifiedFollowing)</description>
    </Parameter>
    <Parameter name='floatingLegDayCounter'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>floating leg day counter (e.g. Thirty360)</description>
    </Parameter>
</Parameters>
</Constructor>

<Constructor name='qlZeroCurve'>
<libraryFunction>ZeroCurve</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='curveDates'>
        <type>long</type>
        <tensorRank>vector</tensorRank>
        <description>dates of the zero curve</description>
    </Parameter>
    <Parameter name='curveYields'>
        <type>double</type>
        <tensorRank>vector</tensorRank>
        <description>yields of the zero curve</description>
    </Parameter>
    <Parameter name='dayCounterID'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>day counter ID</description>
    </Parameter>
</Parameters>
</Constructor>

<Constructor name='qlForwardCurve'>
<libraryFunction>ForwardCurve</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='curveDates'>
        <type>long</type>
        <tensorRank>vector</tensorRank>
        <description>dates of the zero curve</description>
    </Parameter>
    <Parameter name='forwardYields'>
        <type>double</type>
        <tensorRank>vector</tensorRank>
        <description>forwards of the yield curve</description>
    </Parameter>
    <Parameter name='dayCounter'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>day counter (e.g. Actual360)</description>
    </Parameter>
</Parameters>
</Constructor>

<Constructor name='qlForwardSpreadedTermStructure'>
<libraryFunction>ForwardSpreadedTermStructure</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='YieldTermStructure' class='YieldTermStructure' default='""'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>handle to the Yield Curve to be spreaded</description>
    </Parameter>
    <Parameter name='spread'>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
        <description>the spread to be applied to the forward rates of the yield curve</description>
    </Parameter>
</Parameters>
</Constructor>

  <Member name='qlDiscount' getObject='true' libraryClass='PiecewiseFlatForward' loopParameter='DfDates'>
    <description>Return a vector of discount factors corresponding to a vector of dates for a given yield term structure</description>
    <libraryFunction>discount</libraryFunction>
    <functionCategory>QuantLib</functionCategory>
    <Parameters>
      <Parameter name='DfDates' ql_type='QuantLib::Date'>
        <type>any</type>
        <tensorRank>vector</tensorRank>
        <description>vector of dates</description>
      </Parameter>
      <Parameter name='iPol'>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
        <description>Interpolate Flag</description>
      </Parameter>
      <Parameter name='trigger' ignore='true'>
        <type>any</type>
        <tensorRank>scalar</tensorRank>
        <description>dependency tracking trigger</description>
      </Parameter>
    </Parameters>
    <ReturnValue>
      <type>any</type>
      <tensorRank>vector</tensorRank>
      <description>vector of discount factors</description>
    </ReturnValue>
  </Member>

  <Member name='qlForwardRate' getObject='true' libraryClass='YieldTermStructure' loopParameter='d2'>
    <description>return a vector of implied forward interest rates between input date d1 and input date vector d2</description>
    <libraryFunction>forwardRate</libraryFunction>
    <functionCategory>QuantLib</functionCategory>
    <Parameters>
      <Parameter name='d1' ql_type='QuantLib::Date'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>date 1</description>
      </Parameter>
      <Parameter name='d2' ql_type='QuantLib::Date'>
        <type>any</type>
        <tensorRank>vector</tensorRank>
        <description>date 2</description>
      </Parameter>
      <Parameter name='resultDayCounterID' ql_type='QuantLib::DayCounter'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>resultDayCounter</description>
      </Parameter>
      <Parameter name='compID' ql_type='QuantLib::Compounding'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>comp</description>
      </Parameter>
      <Parameter name='freqID' ql_type='QuantLib::Frequency' default='"Annual"'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>freq</description>
      </Parameter>
      <Parameter name='extrapolate' default='false'>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
        <description>extrapolate</description>
      </Parameter>
      <Parameter name='trigger' ignore='true'>
        <type>any</type>
        <tensorRank>scalar</tensorRank>
        <description>dependency tracking trigger</description>
      </Parameter>
    </Parameters>
    <ReturnValue return_func='rate'>
      <type>any</type>
      <tensorRank>vector</tensorRank>
      <description>interest rate</description>
    </ReturnValue>
  </Member>

  <Member name='qlZeroRate' getObject='true' libraryClass='YieldTermStructure' loopParameter='dates'>
    <description>return a vector of implied zero-yield rates for given input dates</description>
    <libraryFunction>zeroRate</libraryFunction>
    <functionCategory>QuantLib</functionCategory>
    <Parameters>
      <Parameter name='dates' ql_type='QuantLib::Date'>
        <type>any</type>
        <tensorRank>vector</tensorRank>
        <description>date</description>
      </Parameter>
      <Parameter name='resultDayCounterID' ql_type='QuantLib::DayCounter'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>resultDayCounter</description>
      </Parameter>
      <Parameter name='compID' ql_type='QuantLib::Compounding'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>comp</description>
      </Parameter>
      <Parameter name='freqID' ql_type='QuantLib::Frequency' default='"Annual"'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>freq</description>
      </Parameter>
      <Parameter name='extrapolate' default='false'>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
        <description>extrapolate</description>
      </Parameter>
      <Parameter name='trigger' ignore='true'>
        <type>any</type>
        <tensorRank>scalar</tensorRank>
        <description>dependency tracking trigger</description>
      </Parameter>
    </Parameters>
    <ReturnValue return_func='rate'>
      <type>any</type>
      <tensorRank>vector</tensorRank>
      <description>interest rate</description>
    </ReturnValue>
  </Member>

  <Member name='qlParRate' getObject='true' libraryClass='YieldTermStructure' loopParameter='tenor'>
    <description>return a vector of implied par rates corresponding to input vector of tenors for given date/payment frequency</description>
    <libraryFunction>parRate</libraryFunction>
    <functionCategory>QuantLib</functionCategory>
    <Parameters>
      <Parameter name='tenor'>
        <type>any</type>
        <tensorRank>vector</tensorRank>
        <description>tenor</description>
      </Parameter>
      <Parameter name='startDate' ql_type='QuantLib::Date'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>start date</description>
      </Parameter>
      <Parameter name='freqID' ql_type='QuantLib::Frequency' default='"Annual"'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>freq</description>
      </Parameter>
      <Parameter name='extrapolate' default='false'>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
        <description>extrapolate</description>
      </Parameter>
      <Parameter name='trigger' ignore='true'>
        <type>any</type>
        <tensorRank>scalar</tensorRank>
        <description>dependency tracking trigger</description>
      </Parameter>
    </Parameters>
    <ReturnValue>
      <type>any</type>
      <tensorRank>vector</tensorRank>
      <description>interest rate</description>
    </ReturnValue>
  </Member>

  <Member name='qlReferenceDate' getObject='true' libraryClass='YieldTermStructure'>
    <description>return the earliest date at which the YieldTermStructure is defined (i.e. discount factor = 1.0)</description>
    <libraryFunction>referenceDate</libraryFunction>
    <functionCategory>QuantLib</functionCategory>
    <Parameters/>
	<ReturnValue return_func='serialNumber'>
		<type>long</type>
		<tensorRank>scalar</tensorRank>
		<description>earliest date</description>
	</ReturnValue>
  </Member>

  <Member name='qlMaxDate' getObject='true' libraryClass='YieldTermStructure'>
    <description>return the latest date at which the YieldTermStructure is defined (not considering extrapolation feature)</description>
    <libraryFunction>maxDate</libraryFunction>
    <functionCategory>QuantLib</functionCategory>
    <Parameters/>
	<ReturnValue return_func='serialNumber'>
		<type>long</type>
		<tensorRank>scalar</tensorRank>
		<description>latest date</description>
	</ReturnValue>
  </Member>

</Functions>
</Category>

