<Category name='instruments'>
<description>functions to construct QuantLib instrument objects</description>
<displayName>Instruments</displayName>

<Functions>

<Member name='qlBondAccrued' getObject='true'>
<description>Accrued: If no settlement is given the default bond settlement is used for calculation.</description>
<libraryFunction>accruedAmount</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='handle' libraryClass='FixedCouponBond'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>handle of the Fixed Coupon Bond object</description>
    </Parameter>
    <Parameter name='settlementDate' ql_type='QuantLib::Date'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>settlement date</description>
    </Parameter>
</Parameters>
<ReturnValue>
    <type>double</type>
    <tensorRank>scalar</tensorRank>
    <description>the accrual</description>
</ReturnValue>
</Member>

<Member name='qlBondCleanPrice' getObject='true'>
<description>If no settlement is given the default bond settlement is used for calculation.</description>
<libraryFunction>cleanPrice</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='handle' libraryClass='FixedCouponBond'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>handle of the Fixed Coupon Bond object</description>
    </Parameter>
    <Parameter name='yield'>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
        <description>bond yield</description>
    </Parameter>
    <Parameter name='compounding' ql_type='QuantLib::Compounding'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</description>
    </Parameter>
    <Parameter name='settlementDate' ql_type='QuantLib::Date'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>settlement date</description>
    </Parameter>
</Parameters>
<ReturnValue>
    <type>double</type>
    <tensorRank>scalar</tensorRank>
    <description>the clean price</description>
</ReturnValue>
</Member>

<Member name='qlBondDirtyPrice' getObject='true'>
<description>dirty price: If no settlement is given the default bond settlement is used for calculation.</description>
<libraryFunction>dirtyPrice</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='handle' libraryClass='FixedCouponBond'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>handle of the Fixed Coupon Bond object</description>
    </Parameter>
    <Parameter name='yield'>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
        <description>bond yield</description>
    </Parameter>
    <Parameter name='compounding' ql_type='QuantLib::Compounding'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</description>
    </Parameter>
    <Parameter name='settlementDate' ql_type='QuantLib::Date'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>settlement date</description>
    </Parameter>
</Parameters>
<ReturnValue>
    <type>double</type>
    <tensorRank>scalar</tensorRank>
    <description>the dirty price</description>
</ReturnValue>
</Member>

<Member name='qlBondThCleanPrice' getObject='true'>
<description>theoretical clean price: The default bond settlement is used for calculation.</description>
<libraryFunction>cleanPrice</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='handle' libraryClass='FixedCouponBond'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>handle of the Fixed Coupon Bond object</description>
    </Parameter>
    <Parameter name='trigger' ignore='true'>
        <type>any</type>
        <tensorRank>scalar</tensorRank>
        <description>dep tracking trigger</description>
    </Parameter>
</Parameters>
<ReturnValue>
    <type>double</type>
    <tensorRank>scalar</tensorRank>
    <description>the theoretical clean price</description>
</ReturnValue>
</Member>

<Member name='qlBondThDirtyPrice' getObject='true'>
<description>theoretical dirty price: The default bond settlement is used for calculation.</description>
<libraryFunction>dirtyPrice</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='handle' libraryClass='FixedCouponBond'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>handle of the Fixed Coupon Bond object</description>
    </Parameter>
    <Parameter name='trigger' ignore='true'>
        <type>any</type>
        <tensorRank>scalar</tensorRank>
        <description>dep tracking trigger</description>
    </Parameter>
</Parameters>
<ReturnValue>
    <type>double</type>
    <tensorRank>scalar</tensorRank>
    <description>the theoretical dirty price</description>
</ReturnValue>
</Member>

<Member name='qlBondThYield' getObject='true'>
<description>theoretical bond yield: The default bond settlement and theoretical price are used for calculation.</description>
<libraryFunction>yield</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='handle' libraryClass='FixedCouponBond'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>handle of the Fixed Coupon Bond object</description>
    </Parameter>
    <Parameter name='Compounding' ql_type='QuantLib::Compounding'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</description>
    </Parameter>
    <Parameter name='trigger' ignore='true'>
        <type>any</type>
        <tensorRank>scalar</tensorRank>
        <description>dep tracking trigger</description>
    </Parameter>
</Parameters>
<ReturnValue>
    <type>double</type>
    <tensorRank>scalar</tensorRank>
    <description>the theoretical yield</description>
</ReturnValue>
</Member>

<Member name='qlBondYield' getObject='true'>
<description>Yield: If no settlement is given the default bond settlement is used for calculation.</description>
<libraryFunction>yield</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='handle' libraryClass='FixedCouponBond'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>handle of the Fixed Coupon Bond object</description>
    </Parameter>
    <Parameter name='cleanPrice'>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
        <description>Clean Price</description>
    </Parameter>
    <Parameter name='compounding' ql_type='QuantLib::Compounding'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>Interest rate coumpounding rule (Simple:1+rt, Compounded:(1+r)^t, Continuous:e^{rt})</description>
    </Parameter>
    <Parameter name='settlementDate' ql_type='QuantLib::Date'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>settlement date</description>
    </Parameter>
</Parameters>
<ReturnValue>
    <type>double</type>
    <tensorRank>scalar</tensorRank>
    <description>the dirty price</description>
</ReturnValue>
</Member>

<Constructor name='qlFixedCouponBond'>
<description>construct and return a handle to a Fixed Coupon Bond object</description>
<libraryFunction>FixedCouponBond</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='issueDate'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>issue date</description>
    </Parameter>
    <Parameter name='firstCouponDate'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>first coupon date</description>
    </Parameter>
    <Parameter name='maturityDate'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>maturity date</description>
    </Parameter>
    <Parameter name='settlementDays'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>settlement days</description>
    </Parameter>
    <Parameter name='coupon'>
        <type>double</type>
        <tensorRank>vector</tensorRank>
        <description>coupons</description>
    </Parameter>
    <Parameter name='nominal'>
        <type>double</type>
        <tensorRank>vector</tensorRank>
        <description>nominals</description>
    </Parameter>
    <Parameter name='Redemption'>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
        <description>Redemption</description>
    </Parameter>
    <Parameter name='frequencyID'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>frequency ID</description>
    </Parameter>
    <Parameter name='dayCounterID'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>day counter ID</description>
    </Parameter>
    <Parameter name='BDayConv'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>business day convention</description>
    </Parameter>
    <Parameter name='calendarID'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>calendar ID</description>
    </Parameter>
        <Parameter name='startFromEnd'>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
        <description>build schedule backwards (start from maturity)</description>
    </Parameter>
    <Parameter name='longFinal'>
        <type>bool</type>
        <tensorRank>scalar</tensorRank>
        <description>long first/last period</description>
    </Parameter>
    <Parameter name='DiscountCurve' libraryClass='YieldTermStructure' default='""'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>handle of the Yield Curve used for discounting</description>
    </Parameter>
</Parameters>
</Constructor>

<Constructor name='qlZeroCouponBond'>
<description>construct and return a handle to a ZeroCouponBond object</description>
<libraryFunction>ZeroCouponBond</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='issueDate'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>issue date</description>
    </Parameter>
    <Parameter name='maturityDate'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>maturity date</description>
    </Parameter>
    <Parameter name='settlementDays'>
        <type>long</type>
        <tensorRank>scalar</tensorRank>
        <description>settlement days</description>
    </Parameter>
    <Parameter name='dayCounterID'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>day counter ID</description>
    </Parameter>
    <Parameter name='calendarID'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>calendar ID</description>
    </Parameter>
    <Parameter name='conventionID'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>convention ID</description>
    </Parameter>
    <Parameter name='redemption'>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
        <description>redemption</description>
    </Parameter>
    <Parameter name='handleZeroCurve' libraryClass='ZeroCurve'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>handle of the Zero Curve object</description>
    </Parameter>
</Parameters>
</Constructor>

<Member name='qlNPV' getObject='true'>
<description>NPV</description>
<libraryFunction>NPV</libraryFunction>
<functionCategory>QuantLib</functionCategory>
<Parameters>
    <Parameter name='handle' libraryClass='Instrument'>
        <type>string</type>
        <tensorRank>scalar</tensorRank>
        <description>handle of instrument object</description>
    </Parameter>
    <Parameter name='trigger' ignore='true'>
        <type>any</type>
        <tensorRank>scalar</tensorRank>
        <description>dependency tracking trigger</description>
    </Parameter>
</Parameters>
<ReturnValue>
    <type>double</type>
    <tensorRank>scalar</tensorRank>
    <description>NPV</description>
</ReturnValue>
</Member>

</Functions>
</Category>

