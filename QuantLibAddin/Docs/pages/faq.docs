
/*
 Copyright (C) 2005, 2006, 2007 Eric Ehlers

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software developed by the QuantLib Group; you can
 redistribute it and/or modify it under the terms of the QuantLib License;
 either version 1.0, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 QuantLib License for more details.

 You should have received a copy of the QuantLib License along with this
 program; if not, please email quantlib-dev@lists.sf.net

 The QuantLib License is also available at <http://quantlib.org/license.shtml>
 The members of the QuantLib Group are listed in the QuantLib License
*/

/*! \page faq Frequently Asked Questions

This is the FAQ for %QuantLibAddin and QuantLibXL, which are subprojects of
QuantLib.  Please see also the 
<a href="http://quantlib.org/faq.shtml">general QuantLib FAQ</a>
and the 
<a href="http://quantlib.org/developerFAQ.shtml">QuantLib developer FAQ</a>.

\ref faq_section_general\n
- \ref faq_item_whats_qla\n
- \ref faq_item_whats_qlxl\n
- \ref faq_item_help\n

\ref faq_sec_installation\n
- \ref faq_item_installation\n

\ref faq_sec_compilation\n
- \ref faq_item_bstr\n

\ref faq_sec_usage\n
- \ref faq_item_start\n
- \ref faq_item_vba\n

\ref faq_sec_troubleshooting\n
- \ref faq_item_startup\n
- \ref faq_item_wizard\n

\ref faq_sec_debugging\n
- \ref faq_item_debugexcel\n
- \ref faq_item_debuglinux\n

\section faq_section_general General

\subsection faq_item_whats_qla What is QuantLibAddin?

QuantLibAddin is an interface allowing 
<a href="http://quantlib.org">QuantLib</a> (an open source analytics library
for quantitative finance) to be deployed to end user environments such as
spreadsheets.

<h3>QuantLib</h3>

QuantLib is a C++ library implementing classes to represent entities such as
term structures and instruments.  On its own, QuantLib doesn't do anything.
For example, there's a class called PiecewiseYieldCurve which implements a
member function to perform bootstrapping, but there's no button a user might
press to invoke this function.  QuantLib is a library which must be wrapped in
an application layer and delivered to the end user in the form of an
executable.

<h3>ObjectHandler</h3>

A primary task of the application layer is to solve the problem of where to
store QuantLib objects once they are created.  This is particularly tricky on
an end user environment such as a spreadsheet, which has no native mechanism
for storing and retrieving objects independently of the spreadsheet itself.
%QuantLibAddin uses <a href="http://www.objecthandler.org">ObjectHandler</a>
as its object repository.  The core of %QuantLibAddin is a library called
QuantLibObjects, which wraps QuantLib objects in a form that allows them to be
stored in the ObjectHandler repository.

<h3>QuantLibAddin</h3>

Additionally %QuantLibAddin implements an interface, a library of functions,
which the end business user invokes to access the underlying QuantLib objects.
For example on a spreadsheet when the user enters formula
qlPiecewiseYieldCurve() into a cell, a QuantLib yield curve is instantiated in
the ObjectHandler repository and a reference to that object is returned to the
calling cell.  %QuantLibAddin supports this interface on a variety of end user
platforms such as Microsoft Excel and OpenOffice.org Calc.  

\subsection faq_item_whats_qlxl What is QuantLibXL?

QuantLibXL is the Excel implementation of the QuantLibAddin interface.
QuantLibXL is an Excel Addin, a C++ binary in the XLL format, allowing QuantLib
functions to be accessed from cell formulas.

<h3>Background</h3>

The name QuantLibXL was originally applied to an Excel addin which supplemented
QuantLib releases 0.3.3 through 0.3.8.  That project was discontinued.

QuantLib releases 0.3.10 and later have been accompanied by a release of
%QuantLibAddin.  All %QuantLibAddin releases have included an Excel addin.
Beginning with %QuantLibAddin version 0.3.13, the QuantLibXL name has been
resurrected and given to the %QuantLibAddin build for the Excel platform.  The
%QuantLibAddin/QuantLibXL projects are structured as follows:
- <a href="http://www.quantlibxl.org">http://www.quantlibxl.org</a> -
    A compiled, documented Excel addin, for end business users
- <a href="http://www.quantlibaddin.org">http://www.quantlibaddin.org</a> -
    Core project, for people who are interested in 
    - compiling %QuantLibAddin/QuantLibXL from source code
    - implementations of %QuantLibAddin on platforms other than Excel, such
       as OpenOffice.org Calc

The table below summarizes the differences between the old QuantLibXL project
versus the new %QuantLibAddin project, including the Excel addin which has taken
over the QuantLibXL name:

<table>
<tr>
<td><b>Feature</b></td>
<td><b>QuantLibXL 0.3.8</b></td>
<td><b>%QuantLibAddin/QuantLibXL 0.3.13+</b></td>
</tr>
<tr>
<td><b>Design</b></td>
<td>Procedural and stateless.  Each function returns a value, no state persists within the library</td>
<td>Object oriented and stateful.  Calling a function instantiates an object in the repository - objects may be interrogated, updated, or passed as inputs to constructors/member functions of other objects.</td>
</tr>
<tr>
<td><b>Lifecycle</b></td>
<td>Stable, discontinued.  Last updated for QuantLib 0.3.8</td>
<td>Stable application which at the time of this writing is under active development</td>
</tr>
<tr>
<td><b>Platforms</b></td>
<td>Microsoft Excel</td>
<td>Microsoft Excel, OpenOffice.org Calc (Windows and Linux), Guile, C/C++</td>
</tr>
</table>

\subsection faq_item_help Where do I go for help?

Send email to <a href="mailto:quantlib-users@lists.sf.net">quantlib-users@lists.sf.net</a>.

%QuantLibAddin is the product of collaboration from many volunteers.  Not all
%of them follow the mailing list and some questions go unanswered, sorry about
%that.  Try writing in Italian ;-)

\section faq_sec_installation Installation

\subsection faq_item_installation How do I compile and/or install QuantLibAddin/QuantLibXL?

\li If you want an installer delivering a compiled QuantLibXL Addin and
documentation for use with Microsoft Excel, visit
<a href="http://www.quantlibxl.org">www.quantlibxl.org</a>.
\li If you want to compile QuantLibXL from source code, visit
<a href="http://www.quantlibaddin.org/build_tutorial.html">http://www.quantlibaddin.org/build_tutorial.html</a>.
\li If you want to build QuantLibAddin for use on platforms other than
Microsoft Excel, visit
<a href="http://www.quantlibaddin.org/installation.html">http://www.quantlibaddin.org/installation.html</a>.

\section faq_sec_compilation Compilation

\subsection faq_item_bstr Why does my compilation fail with an error message about ConvertStringToBSTR?

Several users have reported that their %QuantLibAddin or QuantLibXL build fails
with an error message such as:
\verbatim
Creating library
.\buildStatic\vc80\Release/QuantLibAddinStatic-vc80-mt-s-0_9_0.lib and object
.\buildStatic\vc80\Release/QuantLibAddinStatic-vc80-mt-s-0_9_0.exp
log4cxxs-vc80-mt-s.lib(msxml.obj) : error LNK2019: unresolved external symbol
"wchar_t * __stdcall _com_util::ConvertStringToBSTR(char const *)"
(?ConvertStringToBSTR@_com_util@@ YGPA_WPBD@Z) referenced in function "public:
__thiscall _bstr_t::Data_t::Data_t(char const *)"
(??0Data_t@_bstr_t@@QAE@PBD@Z)
\endverbatim

Apparently the fix is
\li Set "C/C++ -> Language -> Treat wchar_t as Built-In Type" to "No".
\li Add comsupp.lib to the additional dependencies of the linker.

There is some confusion on this issue.  The table below summarizes the relevant
compiler flag:
<table>
<tr><td><b>Label</b></td><td><b>Flag</b></td><td><b>Library</b></td></tr>
<tr><td>Treat wchar_t as Built-In Type = No</td><td>/Zc:wchar_t-</td><td>comsupp.lib</td></tr>
<tr><td>Treat wchar_t as Built-In Type = Yes</td><td>/Zc:wchar_t</td><td>comsuppw.lib</td></tr>
</table>

For most users the flag defaults to No and the project builds successfully.
Some users report that it's necessary to manually set the value of the flag to
No.  Some users have indicated that this change is necessary only for the
log4cxx project, others have had to make the change in other projects as well
e.g. %QuantLibAddin.

Normally for whatever value of the flag, VC should automatically pick up the
corresponding library.  Some users report that this is not the case and that
it's necessary to manually specify the linker dependency.

It may be that VC8 Express behaves differently than the commercial release of
VC8.

If you experience this error and can provide a definitive description of the
fix it would be much appreciated.

\section faq_sec_usage Usage

\subsection faq_item_start How do I start QuantLibXL?

\li Start Excel
\li Load the Addin: \b QuantLibXL\\xll\\QuantLibXL-vc80-mt-s-0_9_0.xll
\li Load a client worksheet e.g. \b QuantLibXL\\Workbooks\\StandaloneExamples\\YC_SwapDemo.xls
\li Hit \b Ctrl-Alt-F9 to force a recalculation of the workbook

\subsection faq_item_vba How do I call QuantLibXL functions from Excel VBA?

QuantLibXL can be invoked from VBA, for example here is a subroutine to price
an option:

\verbatim
Sub priceEuropeanOption()

On Error GoTo Catch

    Dim blackVolHandle As String
    Dim blackScholesHandle As String
    Dim exerciseHandle As String
    Dim payoffHandle As String
    Dim engineHandle As String
    Dim optionHandle As String
    Dim npv As Double
    Call Application.Run("qlSettingsSetEvaluationDate", 35930)
    blackVolHandle = Application.Run("qlBlackConstantVol", _
        "volatility", 35932, 0.2, "Actual/365 (Fixed)")
    blackScholesHandle = Application.Run( _
        "qlGeneralizedBlackScholesProcess", "process", _
        blackVolHandle, 36, "Actual/365 (Fixed)", 35932, _
        0.06, 0)
    exerciseHandle = Application.Run("qlEuropeanExercise", _
        "exercise", 36297)
    payoffHandle = Application.Run("qlStrikedTypePayoff", _
        "payoff", "Vanilla", "Put", 40)
    engineHandle = Application.Run("qlPricingEngine", _
        "engine", "AE")
    optionHandle = Application.Run("qlVanillaOption", _
        "option", blackScholesHandle, payoffHandle, _
        exerciseHandle, engineHandle)
    npv = Application.Run("qlInstrumentNPV", optionHandle)
    Debug.Print "NPV = " & npv

    Exit Sub

Catch:

Debug.Print "QuantLibXL Error: " + Err.Description
MsgBox Err.Description, vbCritical, "QuantLibXL Error"

End Sub
\endverbatim

\section faq_sec_troubleshooting Troubleshooting

\subsection faq_item_startup Why does Excel display an error message when I load QuantLibXL?

When you try to load an XLL into Excel, you may get a warning message
such as "This file is not in a recognizable format" or "XYZ.XLL is
not a valid add-in".  Excel may attempt to load the XLL as a text file.
These errors indicate that the XLL has a runtime dependency which is
not satisfied.

If you compiled your XLL on one machine, and are trying to use it on another,
ensure that the C runtime library is present on the target machine.  For
example an XLL compiled in VC8 using runtime library Release Multithreaded DLL
has a runtime dependency on files MSVCP80.DLL and MSVCR80.DLL.

If you're using AddinExcelDynamic, note that the ObjectHandler XLL must be
loaded into Excel before the AddinExcelDynamic XLL.

Microsoft Visual C++ includes the utility DEPENDS.EXE which can be used
to identify the runtime dependencies of a binary.

\subsection faq_item_wizard Why does Excel crash when I use the Function Wizard?

The Function Wizard (launched by clicking the "fx" button next to the Formula
Bar) allows the user to specify function inputs by clicking in selected cell
ranges.  The Function Wizard calls the underlying cell formula repeatedly every
time the inputs change - so the formula will get invoked repeatedly with
incomplete or nonsensical inputs.  Any bug in the validation of the inputs may
cause the formula to malfunction or crash.  Try calling the function without
using the Function Wizard - for example, format the call to the function in
Notepad, and paste the formula directly into a cell.

There is a technique which an Excel Addin can use to detect whether a function
is called from the Function Wizard.  The function could be designed to return a
default value in this case.  Previous versions of QuantLibXL employed this
approach.  However the test for the Function Wizard was found to degrade
performance severely and its use has been discontinued.  Unfortunately some
QuantLibXL functions are known to crash when called from the Function Wizard.

\section faq_sec_debugging Debugging

\subsection faq_item_debugexcel How do I debug QuantLibXL?

\li compile QuantLibXL with the Debug configuration
\li start Excel and load QuantLibXL and a client worksheet
\li Go into Microsoft Visual Studio
\li do <strong>Build/Debug/Attach to Process</strong>
\li Select Excel from the list of processes.
\li From VC, open up a file containing the source code you'd like to debug -
for example file
<strong>%QuantLibXL\\qlxl\\Functions\\volatilities.cpp</strong>
\li Identify a function you'd like to debug, for example \b qlBlackConstantVol().
Put the cursor on a line in the function and hit F9 to set a breakpoint on the
line
\li Back in Excel, trigger the breakpoint - select the cell containing the
relevant formula, e.g. \b qlBlackConstantVol(), hit F2 to force the cell to
recalc
\li Back in VC, execution should now be stopped on the breakpoint and you can
debug from there, e.g.\n F10 - advance a line\n F11 - step into a function\n
F5 - run until the next breakpoint or until completion\n etc.

\subsection faq_item_debuglinux How do I debug a QuantLibAddin Linux executable at the command line?

This section describes how to debug a standalone C++ %QuantLibAddin client
linux program with the \b gdb command line debugger, using program \b
%QuantLibAddin/Clients/C++/QLADemo as an example.

<h3>Compiling for Debug</h3>

By default %QuantLibAddin compiles with flags <strong>-g -O2</strong>
which is good for general purpose use but does not give ideal results
in gdb:
\li certain variables get optimized away - so you're looking at a line
in the source code, but it's invisible to the debugger
\li the debugger may step into the source code of the Standard Template
Library, even if you try to tell it not to

gdb performs better when run against programs which are compiled with flag
\b -gdwarf-2.  So before debugging the %QuantLibAddin executable, it's
best to first reconfigure and recompile all relevant binaries - QuantLib,
log4cxx, ObjectHandler, and %QuantLibAddin.  cd to the top level directory
for each project, and run configure with the appropriate flags:
\verbatim
./configure CXXFLAGS="-gdwarf-2 -Wall"
\endverbatim
Then recompile.

<h3>The Executable</h3>

The program we want to debug is QLADemo.
File \b %QuantLibAddin/Clients/C++/QLADemo is a
shell script wrapper for the underlying executable
<strong>%QuantLibAddin/Clients/C++/.libs/lt-QLADemo</strong> which is
created the first time the wrapper is invoked.  So run the wrapper
once to create the executable, then cd into the .libs directory.

<h3>Debugging</h3>

Now you can debug the program in the usual way e.g.

\li <tt>gdb lt-QLADemo</tt> - to start the debugger
\li <tt>b(reak) main</tt> - to set a breakpoint in function <tt>main</tt>
\li <tt>r(un)</tt> - to start the program
\li <tt>l(ist)</tt> - to list lines of code surrounding the breakpoint
\li <tt>n(ext)</tt> - to advance to the next line
\li <tt>s(tep)</tt> - to step into a function
\li <tt>c(ontinue)</tt> - to continue to another breakpoint
\li <tt>p(rint)</tt> - to display a variable's value

etc.

*/

