
/*
 Copyright (C) 2005, 2006 Eric Ehlers

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software developed by the QuantLib Group; you can
 redistribute it and/or modify it under the terms of the QuantLib License;
 either version 1.0, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 QuantLib License for more details.

 You should have received a copy of the QuantLib License along with this
 program; if not, please email quantlib-dev@lists.sf.net

 The QuantLib License is also available at http://quantlib.org/license.html
 The members of the QuantLib Group are listed in the QuantLib License
*/

/*! \page faq Frequently Asked Questions

This is the FAQ for %QuantLibAddin, which is a subproject of QuantLib.  
Please see also the 
<a href="http://quantlib.org/reference/faq.html">general QuantLib FAQ</a>
and the 
<a href="http://quantlib.org/developerFAQ.shtml">QuantLib developer FAQ</a>.

\ref faq_usage\n
- \ref faq_loaded\n
- \ref faq_bugfix_excel
- \ref faq_bugfix_vc
- \ref faq_wizard\n
- \ref faq_removeexcel\n
- \ref faq_prereqs\n
- \ref faq_startup_error\n
- \ref faq_startup_crash\n
- \ref faq_vba_usage\n
- \ref faq_debugexcel\n
- \ref faq_debuglinux\n

\ref faq_design\n
- \ref faq_excel

\section faq_usage Usage

\section faq_loaded Ensure Everything is Loaded Correctly

Please follow the steps below when loading %QuantLibAddin for Excel:

\li start Excel
\li load a client worksheet e.g.
\b %QuantLibAddin\\Clients\\Excel\\QLADemo.xls
\li load the QuantLib Excel Addin from directory
\b %QuantLibAddin\\Addins\\Excel\\xll.  The name of the file
depends upon how it was compiled. For example when compiled
with VC6 configuration "Win32 Debug CRTDLL" the addin is called
<strong>%QuantLibAddinStatic-vc6-mt-gd-0_3_12.xll</strong>
\li You may need to hit \b Ctrl-Alt-F9 to force recalculation of all
cells in all open workbooks

\section faq_bugfix_excel Install All Bug Fixes for Your Version of Microsoft Excel

Initial releases of certain versions of  Microsoft Excel suffer from
bugs which cause Excel Addins to malfunction.  Please visit the
<a href="http://office.microsoft.com">Microsoft Office web page</a> and
check for any bug fixes which may be available for your copy of Office.
(You need to use the Internet Explorer browser to visit this page).

\section faq_bugfix_vc Install All Bug Fixes for Your Version of Microsoft Visual C++

Initial releases of certain versions of Microsoft Visual C++ suffer from
bugs which cause problems building and using Excel Addins.  Please visit
the Microsoft website and check for any bug fixes which may be available
for your version of VC.

In particular early releases of VC6 suffer from a bug which causes the
command "Debug/Attach to Process" to display an empty list of processes
and VC6 users should install Service Pack 6.

\section faq_wizard Avoid the Excel Function Wizard

The Excel Function Wizard can exacerbate a bug in an Addin, so if an
Addin is malfunctioning, avoiding the Function Wizard may make it easier
to troubleshoot the problem.

The Function Wizard (launched by clicking the "fx" button next to the
Formula Bar) allows the user to specify function inputs by clicking in
selected cell ranges.  The Function Wizard calls the underlying cell
formula repeatedly every time the inputs change - so the formula will
get invoked repeatedly with incomplete or nonsensical inputs.  Any bug
in the validation of the inputs may cause the formula to malfunction
or crash.  Try calling the function without using the Function Wizard -
for example, format the call to the function in Notepad, and paste the
formula directly into a cell.

A well written Addin anticipates the use of the Function Wizard in one
of two ways:
\li It is possible for the Addin to determine when it's being invoked from
the Function Wizard, possibly changing its behavior accordingly, e.g. by
returning a default value.  This topic is discussed in more detail at
<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/office97/html/SF822.asp">this link on the Microsoft web site</a>
\li The Addin can validate its inputs, and ensure that it will always
behave sensibly even for incomplete or invalid inputs

%QuantLibAddin adopts the second approach.

\section faq_removeexcel Remove Excel from the Equation

A %QuantLibAddin problem that is unrelated to Excel can be diagnosed
more easily if it can be recreated outside of an Excel Addin.  Create a
standalone C++ program which replicates the behavior of the Excel Addin,
and see if the problem can be recreated and resolved there.

\section faq_prereqs Build and Execute Prerequisite Examples

If you're having trouble getting %QuantLibAddin to build, try compiling
and executing simpler example projects.  For example the following list
constitutes a progression in build complexity:
\li ObjectHandler project ExampleCpp
\li ObjectHandler project ExampleXLL (static or dynamic)
\li %QuantLibAddin project ClientCppDemo
\li %QuantLibAddin project AddinExcel (static or dynamic)

\section faq_startup_error Excel Displays an Error Message when the Addin is Loaded

When you try to load an XLL into Excel, you may get a warning message
such as "This file is not in a recognizable format" or "<filename>.xll is
not a valid add-in".  Excel may attempt to load the XLL as a text file.
These errors indicate that the XLL has a runtime dependency which is
not satisfied.

If you compiled your XLL on one machine, and are trying to use it on
another, please ensure that the C runtime library is present on the
target machine.  For example an XLL compiled in VC6 using runtime library
Release Multithreaded DLL has a runtime dependency on files MSVCP60.DLL
and MSVCRT.DLL.

If you're using AddinExcelDynamic, please note that the ObjectHandler XLL
must be loaded into Excel before the AddinExcelDynamic XLL.

Microsoft Visual C++ includes the utility DEPENDS.EXE which can be used
to identify the runtime dependencies of a binary.

\section faq_startup_crash Excel Crashes when the Addin is Loaded

There are various bugs which can cause an Addin to crash Excel at startup,
for example:
\li Any bug in the Addin code which causes an access violation as the
Addin is loaded
\li Addins compiled with configuration Debug, option "Program Database
for Edit and Continue", can crash when opened as described in
<a href="http://support.microsoft.com/kb/198477">Microsoft Knowledge Base Article ID 198477</a>

Because the addin crashes when loading the only way to debug this problem
is to set an unresolved breakpoint, the VC debugger doesn't support this
feature, you can use WinDbg.  In WinDbg, hit Ctrl-S and ensure that the
sympath includes the path containing the PDB file that was created when
you compiled the addin e.g.

\verbatim
C:\Program Files\QuantLibAddin\Addins\Excel\build\vc6\DebugCRTDLL;
SRV*C:\websymbols*http://msdl.microsoft.com/download/symbols
\endverbatim

Start Excel and WinDbg, before loading the addin, hit F6 and
attach WinDbg to Excel, then set the breakpoint e.g.
\verbatim
bu QuantLibAddin_vc6_mt_gd_0_3_12!xlAutoOpen
\endverbatim

You can then debug as the addin loads.
\section faq_vba_usage Using QuantLibAddin from Excel VBA

%QuantLibAddin can be invoked from Excel VBA, for example here is a
subroutine to price an option:

\verbatim
Sub priceEuropeanOption()
    Dim blackVolHandle As String
    Dim blackScholesHandle As String
    Dim optionHandle As String
    Dim npv As Double
    blackVolHandle = Application.Run("qlBlackConstantVol", 
        "blackconstantvol", 40250, 0.2, "Actual360")
    blackScholesHandle = Application.Run("qlBlackScholesProcess", 
        "stoch1", blackVolHandle, 36, "Actual360", 40250, 0.06, 0)
    optionHandle = Application.Run("qlVanillaOption", "eur1", 
        blackScholesHandle, "Put", "Vanilla", 35, "European", 
        43903, 0, "JR", 801)
    npv = Application.Run("qlNPV", optionHandle)
    Debug.Print npv
End Sub
\endverbatim

\section faq_debugexcel Debugging QuantLibAddin under Excel

\li start Excel and load the QuantLib Excel Addin and a client worksheet
e.g. QLADemo.xls
\li Go into Microsoft Visual Studio and close any workspace which may
be open
\li do <strong>Build/Debug/Attach to Process</strong>
\li Select Excel from the list of processes.  (If the list of processes
is empty: please refer to section \ref bugfix_vc)
\li From VC, open up a file containing the source
code you'd like to debug - for example file
<strong>%QuantLibAddin\\Addins\\Excel\\volatilities.cpp</strong>
\li Identify a function you'd like to debug, for example \b
qlBlackConstantVol.  Put the cursor on a line in the function and hit
F9 to set a breakpoint on the line
\li Back in Excel, trigger the breakpoint - select the cell containing
the relevant formula, e.g. \b qlBlackConstantVol, hit F2 to force the
cell to recalc
\li Back in VC, execution should now be stopped on the breakpoint and
you can debug from there, e.g.\n F10 - advance a line\n F11 - step into a
function\n F5  - run until the next breakpoint or until completion\n etc.

\section faq_debuglinux Debugging A QuantLibAddin Linux Executable at the Command Line

This section describes how to debug a standalone C++ %QuantLibAddin client
linux program with the \b gdb command line debugger, using program \b
%QuantLibAddin/Clients/C++/QLADemo as an example.

\subsection compiling Compiling for Debug

By default %QuantLibAddin compiles with flags <strong>-g -O2</strong>
which is good for general purpose use but does not give ideal results
in gdb:
\li certain variables get optimized away - so you're looking at a line
in the source code, but it's invisible to the debugger
\li the debugger may step into the source code of the Standard Template
Library, even if you try to tell it not to

gdb performs better when run against programs which are compiled with flag
\b -gdwarf-2.  So before debugging the %QuantLibAddin executable, it's
best to first reconfigure and recompile all relevant binaries - QuantLib,
log4cxx, ObjectHandler, and %QuantLibAddin.  cd to the top level directory
for each project, and run configure with the appropriate flags:
\verbatim
./configure CXXFLAGS="-gdwarf-2 -Wall"
\endverbatim
Then recompile.

\subsection executable The Executable

The program we want to debug is QLADemo.
File \b %QuantLibAddin/Clients/C++/QLADemo is a
shell script wrapper for the underlying executable
<strong>%QuantLibAddin/Clients/C++/.libs/lt-QLADemo</strong> which is
created the first time the wrapper is invoked.  So run the wrapper
once to create the executable, then cd into the .libs directory.

\subsection debugging Debugging

Now you can debug the program in the usual way e.g.

\li <tt>gdb lt-QLADemo</tt> - to start the debugger
\li <tt>b(reak) main</tt> - to set a breakpoint in function <tt>main</tt>
\li <tt>r(un)</tt> - to start the program
\li <tt>l(ist)</tt> - to list lines of code surrounding the breakpoint
\li <tt>n(ext)</tt> - to advance to the next line
\li <tt>s(tep)</tt> - to step into a function
\li <tt>c(ontinue)</tt> - to continue to another breakpoint
\li <tt>p(rint)</tt> - to display a variable's value

etc.

\section faq_design Design

\section faq_excel What's the difference between QuantLibXL and QuantLibAddin?

<table>
<tr>
<td><b>Feature</b></td>
<td><b>QuantLibXL</b></td>
<td><b>%QuantLibAddin</b></td>
</tr>
<tr>
<td><b>Design</b></td>
<td>Procedural and stateless.  Each function returns a value, no state persists within the library</td>
<td>Object oriented and stateful.  Calling a function instantiates an object in the repository - objects may be interrogated, updated, or passed as inputs to constructors/member functions of other objects.</td>
</tr>
<tr>
<td><b>Lifecycle</b></td>
<td>Stable, discontinued.  Last updated for QuantLib 0.3.8</td>
<td>Prototype which at the time of this writing is under active development</td>
</tr>
<tr>
<td><b>Platforms</b></td>
<td>Microsoft Excel</td>
<td>Microsoft Excel, OpenOffice.org Calc (Windows and Linux), Guile, C/C++</td>
</tr>
</table>

*/

