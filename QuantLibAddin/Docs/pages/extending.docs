
/*
 Copyright (C) 2005 Eric Ehlers

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software developed by the QuantLib Group; you can
 redistribute it and/or modify it under the terms of the QuantLib License;
 either version 1.0, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 QuantLib License for more details.

 You should have received a copy of the QuantLib License along with this
 program; if not, please email quantlib-dev@lists.sf.net

 The QuantLib License is also available at http://quantlib.org/license.html
 The members of the QuantLib Group are listed in the QuantLib License
*/

/*! \page extending Extending QuantLibAddin

\section overview Overview

This document explains how to add new functionality to QuantLibAddin.  QuantLibAddin functions are categorized into groups. Section \ref newfunc describes the most common case where a new function is added to an existing group.  Section \ref newgroup describes the less common task of creating a new group.  As an example the text discusses new function \b QL_FIXED_COUPON_BOND in group \b Instruments.

The steps below call for creating new files in the library, when the instructions then say "add new file xxx to project workspaces", this means to update all project workspaces supported by QuantLibAddin - currently VC 6/7/8, Borland, and Mingw - to reflect the existence of the new file.  For autoconf, the Makefile.am file in the current directory must also be updated.

\section newfunc Creating New Functions

\subsection quantlibaddin QuantLibAddin
In directory QuantLibAddin/qla, add a new class, descended from Object, wrapping the QuantLib class which you wish to add to QuantLibAddin.  In this example, we create new files ...
\verbatim
	QuantLibAddin/qla/fixedcouponbond.cpp
	QuantLibAddin/qla/fixedcouponbond.hpp
\endverbatim
... and implement new class \c QuantLibAddin::FixedCouponBond, which wraps \c QuantLib::FixedCouponBond.  Workspaces for the core QuantLibAddin project must be updated to pick up the new files.

File <tt>%generalutils.hpp</tt> in the qla directory can be \c #included to pick up additional utility functions.

\subsection clientscpp Clients/C++
As QuantLibAddin is itself a C++ Addin which can be loaded directly to standalone C++ client applications, it's best to test the new functionality in a standalone program before autogenerating the source for the spreadsheets. Edit the file
\verbatim
	QuantLibAddin/Clients/C++/instruments.cpp
\endverbatim
adding some example code to demonstrate the use of the new function.

\subsection autogen1 Autogen
Edit file
\verbatim
	QuantLibAddin/Autogen/instruments.xml
\endverbatim
And provide the definition of the new function.  In this example we define function \c QL_FIXED_COUPON_BOND:

\verbatim
<function>
<name>QL_FIXED_COUPON_BOND</name>
<codename>qlFixedCouponBond</codename>
<desc>construct and return a handle to a FixedCouponBond object</desc>
<qlfunction>FixedCouponBond</qlfunction>
<constructor>true</constructor>
<parameters>
    <param>
        <name>issueDate</name>
        <type>long</type>
        <tensorrank>scalar</tensorrank>
        <desc>issue date</desc>
    </param>
    <param>
        <name>datedDate</name>
        <type>long</type>
        <tensorrank>scalar</tensorrank>
        <desc>dated date</desc>
    </param>
    
    ...
    
</parameters>
<returnval>
    <type>any</type>
    <tensorrank>vector</tensorrank>
    <desc>vector of properties describing Instrument</desc>
</returnval>
</function>
</pre>
\endverbatim

Elements describing the function:
\li \b name - this is the name of the new function as it will appear in the Addins, e.g. \c QL_FIXED_COUPON_BOND
\li \b codename - the name of the new function as it will appear in autogenerated addin source code, e.g. \c qlFixedCouponBond
\li \b desc - the description of the function (displayed in spreadsheet help windows) - must not exceed Excel's maximum string length of 255 bytes
\li \b constructor - boolean, \c true indicates that the function constructs an \c Object in \c ObjectHandler, \c false indicates that the function invokes a method of an existing \c Object (in which case the first parameter of the function must be the handle of the \c Object to be accessed).
\li \b qlfunction - the name of the QuantLib function to be called.  If \c constructor is true, this will be a constructor, otherwise it's a member function.  In this example the value is \c FixedCouponBond
\li \b parameters - list of parameters to the function
\li \b returnval - description of the value returned by the function

Elements describing each function parameter:
\li \b name - the name of the parameter - displayed in spreadsheet help
\li \b type - the datatype of the parameter - \c long/double/string/any
\li \b tensorrank - whether the input is \c scalar/vector/matrix
\li \b desc - a description of the parameter - displayed in spreadsheet help

\b NB If the function parameter is a handle to an \c Object stored in \c ObjectHandler, then the parameter should be declared as type \c string, and the type should be supplemented with attribute \c class equal to the class name of the \c Object.  For example, to declare an input parameter which is a handle to an \c Object of class \c Foo:
\verbatim
    <param>
        <name>handleFoo</name>
        <type class="Foo">string</type>
        <tensorrank>scalar</tensorrank>
        <desc>handle of a Foo Object in ObjectHandler</desc>
    </param>
\endverbatim

Elements describing each function's return value:
\li \b type - the datatype of the return value - \c long/double/string/any
\li \b tensorrank - whether the return value is \c scalar/vector/matrix
\li \b desc - description of the return value - displayed in spreadsheet help

For constructors the return value is usually a vector of anys.

Rebuild the Autogen project to generate the source for the Addins.

\subsection addins1 Addins (C/Excel/Calc)
Rebuild the Addins.

\subsection clients1 Clients (C/Excel/Calc)
Amend the client files ...
\verbatim
	QuantLibAddin/Clients/Excel/instruments.xls
	QuantLibAddin/Clients/Calc/instruments.sxc
	QuantLibAddin/Clients/C/instruments.c
\endverbatim
... to demonstrate the use of the new function.

\section newgroup Creating New Groups

\subsection autogen2 Autogen
\li create file
\verbatim
	QuantLibAddin/Autogen/instruments.xml
\endverbatim
\li add any new function definitions to the file
\li add the file to project workspaces
\li rebuild the Autogen project to generate new source files

\subsection addins2 Addins (C/Excel/Calc)
\li update project workspaces to pick up the new autogenerated files

\b NB: Autogenerated files are not maintained in CVS, but are shipped with releases

\subsection clients2 Clients (C/C++)
\li create new workspaces for standalone client programs.  For example, for the new \c Instruments group, the new VC 6 project workspaces are
\verbatim
	QuantLibAddin/Clients/C/ClientCInstruments.dsp
	QuantLibAddin/Clients/C++/ClientCPPInstruments.dsp
\endverbatim
\li Create the new standalone programs, e.g.
\verbatim
	QuantLibAddin/Clients/C/instruments.c
	QuantLibAddin/Clients/C++/instruments.cpp
\endverbatim

\subsection clients3 Clients (Excel/Calc)
\li Create new spreadsheets for the group, e.g.
\verbatim
	QuantLibAddin/Clients/Excel/instruments.xls
	QuantLibAddin/Clients/Calc/instruments.sxc
\endverbatim

*/

