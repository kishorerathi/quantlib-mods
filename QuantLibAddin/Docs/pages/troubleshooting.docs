
/*
 Copyright (C) 2005 Eric Ehlers

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software developed by the QuantLib Group; you can
 redistribute it and/or modify it under the terms of the QuantLib License;
 either version 1.0, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 QuantLib License for more details.

 You should have received a copy of the QuantLib License along with this
 program; if not, please email quantlib-dev@lists.sf.net

 The QuantLib License is also available at http://quantlib.org/license.html
 The members of the QuantLib Group are listed in the QuantLib License
*/

/*! \page troubleshooting Troubleshooting QuantLibAddin

\section overview Overview

This document provides support on diagnosing and resolving problems with QuantLibAddin.  Emphasis is placed on QuantLibAddin for Microsoft Excel and much of the information is relevant for troubleshooting Excel addins in general.

\ref loaded\n
\ref bugfixes\n
\ref wizard\n
\ref removeexcel\n
\ref crashes\n
\ref debugexcel\n
\ref debuglinux\n

\section loaded Ensure Everything is Loaded Correctly

Please follow the steps below when loading QuantLibAddin for Excel:

\li start Excel
\li load a client worksheet, e.g. \b QuantLibAddin\\Clients\\Excel\\QLADemo.xls
\li load the QuantLib Excel Addin from directory \b QuantLibAddin\\Addins\\Excel\\xll.  The name of the file depends upon how it was compiled. For example when compiled with Microsoft Visual Studio version 6, configuration "Win32 Debug", the addin is called <strong>QuantLibAddin-vc6-mt-sgd.xll</strong>.
\li You may need to hit \b Ctrl-Alt-F9 to force recalculation of all cells in all open workbooks.

\section bugfixes Install All Bug Fixes for Your Version of Microsoft Excel

Initial releases of certain versions of  Microsoft Excel suffer from bugs which cause Excel Addins to malfunction.  Please visit the <a href="http://office.microsoft.com">Microsoft Office web page</a> and check for any bug fixes which may be available for your copy of Office.  (You need to use the Internet Explorer browser to visit this page).

\section wizard Avoid the Excel Function Wizard

The Excel Function Wizard can exacerbate a bug in an Addin, so if an Addin is malfunctioning, avoiding the Function Wizard may make it easier to troubleshoot the problem.

The Function Wizard (launched by clicking the "fx" button next to the Formula Bar) allows the user to specify function inputs by clicking in selected cell ranges.  The Function Wizard calls the underlying cell formula repeatedly every time the inputs change - so the formula will get invoked repeatedly with incomplete or nonsensical inputs.  Any bug in the validation of the inputs may cause the formula to malfunction or crash.  Try calling the function without using the Function Wizard - for example, format the call to the function in Notepad, and paste the formula directly into a cell.

A well written Addin anticipates the use of the Function Wizard in one of two ways:
1) It is possible for the Addin to determine when it's being invoked from the Function Wizard, possibly changing its behavior accordingly, e.g. by returning a default value.  This topic is discussed in more detail at <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/office97/html/SF822.asp">this link on the Microsoft web site.</a>\n
2) The Addin can validate its inputs, and ensure that it will always behave sensibly even for incomplete or invalid inputs

QuantLibAddin adopts the second approach.

\section removeexcel Remove Excel from the Equation

A QuantLibAddin problem that is unrelated to Excel can be diagnosed more easily if it can be recreated outside of an Excel Addin.  Create a standalone C++ program which replicates the behavior of the Excel Addin, and see if the problem can be recreated and resolved there.

\section crashes Excel Crashes when the Addin is Loaded

There are various bugs which can cause an Addin to crash Excel at startup, and the problem can be difficult to diagnose.  Some examples:
\li Any bug in the Addin code which causes an access violation as the Addin is loaded
\li Addins compiled with configuration Debug, option "Program Database for Edit and Continue", can crash when opened as described in <a href="http://support.microsoft.com/kb/198477">Microsoft Knowledge Base Article ID 198477</a>

One way to troubleshoot such problems is to add rudimentary logging to your Addin.  At the beginning of function xlAutoOpen, open a logfile, and add logging messages to help you work out where and why the addin is crashing.

\section debugexcel Debugging QuantLibAddin under Excel

\li following the instructions under section \ref loaded - start Excel and load the QuantLib Excel Addin and the client worksheet QLADemo.xls.  (If you can't get this far without crashing Excel, please refer to section \ref crashes).
\li Go into Microsoft Visual Studio and close any workspace which may be open
\li do <strong>Build/Debug/Attach to Process</strong>
\li Select Excel from the list of processes.  [ If the list of processes is empty: early releases of Microsoft Visual C++ Version 6 suffered from a bug which caused "Attach to Process" to malfunction - go to the Microsoft website to pick up all available bug fixes for your copy of VC6 ]
\li From VC, open up a file containing the source code you'd like to debug - for example file <strong>QuantLibAddin\\Addins\\Excel\\volatilities.cpp</strong>
\li Identify a function you'd like to debug, for example \b qlBlackConstantVol.  Put the cursor on a line in the function and hit F9 to set a breakpoint on the line
\li Back in Excel, trigger the breakpoint - select the cell containing the relevant formula, e.g. \b QL_BLACK_SCHOLES_PROCESS, hit F2 to force the cell to recalc
\li Back in VC, execution should now be stopped on the breakpoint and you can debug from there, e.g.\n
F10 - advance a line\n
F11 - step into a function\n
F5  - run until the next breakpoint or until completion\n
etc.

\section debuglinux Debugging A QuantLibAddin Linux Executable at the Command Line

This section describes how to debug a standalone C++ QuantLibAddin client linux program with the \b gdb command line debugger, using program \b QuantLibAddin/Clients/C++/QLADemo as an example.

\subsection compiling Compiling for Debug

By default QuantLibAddin compiles with flags <strong>-g -O2</strong> which is good for general purpose use but does not give ideal results in gdb:
\li certain variables get optimized away - so you're looking at a line in the source code, but it's invisible to the debugger
\li the debugger may step into the source code of the Standard Template Library, even if you try to tell it not to

gdb performs better when run against programs which are compiled with flag \b -gdwarf-2.  So before debugging the QuantLibAddin executable, it's best to first reconfigure and recompile all relevant binaries - QuantLib, log4cxx, ObjectHandler, and QuantLibAddin.  cd to the top level directory for each project, and run configure with the appropriate flags:
\verbatim
./configure CXXFLAGS="-gdwarf-2 -Wall"
\endverbatim
Then recompile.

\subsection executable The Executable

The program we want to debug is QLADemo.  File \b QuantLibAddin/Clients/C++/QLADemo is a shell script wrapper for the underlying executable <strong>QuantLibAddin/Clients/C++/.libs/lt-QLADemo</strong> which is created the first time the wrapper is invoked.

\subsection debugging Debugging

Now you can debug the program in the usual way e.g.

\li <tt>gdb lt-QLADemo</tt> - to start the debugger
\li <tt>b(reak) main</tt> - to set a breakpoint in function <tt>main</tt>
\li <tt>r(un)</tt> - to start the program
\li <tt>l(ist)</tt> - to list lines of code surrounding the breakpoint
\li <tt>n(ext)</tt> - to advance to the next line
\li <tt>s(tep)</tt> - to step into a function
\li <tt>c(ontinue)</tt> - to continue to another breakpoint
\li <tt>p(rint)</tt> - to display a variable's value

 etc.

*/

