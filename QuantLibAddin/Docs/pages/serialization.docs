
/*
 Copyright (C) 2007, 2008 Eric Ehlers

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software developed by the QuantLib Group; you can
 redistribute it and/or modify it under the terms of the QuantLib License;
 either version 1.0, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 QuantLib License for more details.

 You should have received a copy of the QuantLib License along with this
 program; if not, please email quantlib-dev@lists.sf.net

 The QuantLib License is also available at http://quantlib.org/license.html
 The members of the QuantLib Group are listed in the QuantLib License
*/

/*! \page serialization Serialization Demo

<div align="center"><small><a href="tutorials.html">back to tutorials index</a></small></div> 

This document explains how to build an environment supporting export/import
from/to Excel/C++ on Windows/Linux.

As a prerequisite you must complete the following tutorials:<br>
\ref build_cpp<br>
\ref build_qlxl

<dl>
<dt>\ref serialization_windows</dt>
<dd><dl>
<dt>\ref serialization_win_excel</dt>
<dd><dl>
<dt>\ref serialization_win_excel_export</dt>
<dt>\ref serialization_win_excel_import</dt>
</dl></dd>
<dt>\ref serialization_win_cpp</dt>
<dd><dl>
<dt>\ref serialization_win_cpp_export</dt>
<dt>\ref serialization_win_cpp_import</dt>
</dl></dd>
</dl></dd>
<dt>\ref serialization_linux</dt>
<dd><dl>
<dt>\ref serialization_linux_cpp</dt>
<dd><dl>
<dt>\ref serialization_linux_cpp_export</dt>
<dt>\ref serialization_linux_cpp_import</dt>
</dl></dd>
</dl></dd>
</dl>

\section serialization_windows 1 Windows

\subsection serialization_win_excel 1.1 Excel

\subsubsection serialization_win_excel_export 1.1.1 Export

\li Start Excel
\li Load VBA addin
<tt>QuantLibXL\\Workbooks\\StandaloneExamples\\serialize_swap.xla</tt>.  The addin
contains some startup code which should automatically load the following:
\verbatim
QuantLibXL\xll\QuantLibXL-vc80-mt-s-0_9_0.xll
QuantLibXL\Workbooks\StandaloneExamples\serialize_utils.xla
QuantLibXL\Workbooks\StandaloneExamples\MarketData.xls
QuantLibXL\Workbooks\StandaloneExamples\VanillaSwap.xls
\endverbatim
\li Hit <tt>Ctrl-Alt-F9</tt>
\li Confirm that a PV (on my machine, 36106.60) is showing in cell <tt>'[VanillaSwap.xls]Vanilla Swap'!C33</tt>
\li Invoke menu item <tt>QLXL Demo / Export</tt>
\li The following 2 files are produced:
\verbatim
C:\qlxl_swap_market.xml
C:\qlxl_swap_trade.xml
\endverbatim

\subsubsection serialization_win_excel_import 1.1.2 Import

\li Start Excel
\li Load VBA addin
<tt>QuantLibXL\\Workbooks\\StandaloneExamples\\serialize_swap.xla</tt>.  The addin
contains some startup code which should automatically load the following:
\verbatim
QuantLibXL\xll\QuantLibXL-vc80-mt-s-0_9_0.xll
QuantLibXL\Workbooks\StandaloneExamples\serialize_utils.xla
QuantLibXL\Workbooks\StandaloneExamples\MarketData.xls
QuantLibXL\Workbooks\StandaloneExamples\VanillaSwap.xls
\endverbatim
\li Set range <tt>[MarketData.xls]Summary!DataSource</tt> to Import</tt>
\li Invoke menu item <tt>QLXL Demo / Import</tt>
\li The following 2 files are loaded:
\verbatim
C:\qlxl_swap_market.xml
C:\qlxl_swap_trade.xml
\endverbatim
\li Hit <tt>Ctrl-Alt-F9</tt>
\li Confirm that a PV (on my machine, 36106.60) is showing in cell <tt>'[VanillaSwap.xls]Vanilla Swap'!C33</tt>

If switching back and forth between import and export during a single Excel
session you can use the command <tt>QLXL Demo / Delete All Objects</tt> to
ensure that the ObjectHandler repository is empty.  You can confirm this by
ensuring that function \c ohObjectCount() returns zero.

\subsection serialization_win_cpp 1.2 C++

\subsubsection serialization_win_cpp_export 1.2.1 Export

Open a DOS prompt in directory <tt>%QuantLibAddin\\Clients\\CppSwapOut\\bin</tt>.
Invoke the executable. The output from the program should appear similar to the
following:
\verbatim
C:\build_ql_0_9_5\QuantLibAddin\Clients\CppSwapOut\bin\SwapOut-vc??-mt.exe
INFO - Begin example program.
INFO - QuantLibAddin version = 0.9.5
INFO - ObjectHandler version = 0.9.5
INFO - SWAP PV = 36106.6
INFO - End example program.
\endverbatim

The program should generate the XML export files <tt>qlxl_swap_market.xml</tt>
and <tt>qlxl_swap_trade.xml</tt> in the current directory.

\subsubsection serialization_win_cpp_import 1.2.2 Import

Copy <tt>qlxl_swap_market.xml</tt> and <tt>qlxl_swap_trade.xml</tt> from
directory <tt>%QuantLibAddin\\Clients\\CppSwapIn</tt> to directory
<tt>%QuantLibAddin\\Clients\\CppSwapIn\\bin</tt>.

Open a DOS prompt in directory <tt>QuantLibAddin\Clients\CppSwapIn\bin</tt>.
Invoke the executable.  The program loads the XML files from the current
directory.  The output from the program should appear similar to the following:
\verbatim
C:\build_ql_0_9_5\QuantLibAddin\Clients\CppSwapIn\bin\SwapIn-vc??-mt.exe
INFO - Begin example program.
INFO - QuantLibAddin version = 0.9.5
INFO - ObjectHandler version = 0.9.5
INFO - SWAP PV = 36106.6
INFO - Example of serializing to/from a buffer:
INFO - XML = 
<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE boost_serialization>
<boost_serialization signature="serialization::archive" version="4">
<object_list class_id="1" tracking_level="1" version="0" object_id="_0">
        <count>1</count>
        <item_version>1</item_version>
        <item class_id="0" tracking_level="0" version="1">
                <px class_id="138" tracking_level="1" version="0" object_id="_1">
                        <ObjectId>quote1</ObjectId>
                        <ClassName>qlSimpleQuote</ClassName>
                        <Value class_id="195" tracking_level="0" version="0">
                                <variant_ class_id="196" tracking_level="0" version="0">
                                        <which>1</which>
                                        <value>1.23</value>
                                </variant_>
                        </Value>
                        <TickValue>0</TickValue>
                        <Permanent>0</Permanent>
                </px>
        </item>
</object_list>
</boost_serialization>

INFO - log dump of object with ID = quote1

property = ClassName            value = qlSimpleQuote       
property = ObjectId             value = quote1              
property = Value                value = 1.23                
property = TickValue            value = 0                   
property = Permanent            value = 0                   
Permanent = false               


INFO - End example program.
\endverbatim

\section serialization_linux 2 Linux

\subsection serialization_linux_cpp 2.1 C++

\subsubsection serialization_linux_cpp_export 2.1.1 Export

\c cd to directory  <tt>QuantLibAddin/Clients/CppSwapOut</tt> and execute
program <tt>swap_out</tt>.  The output from the program should appear similar
to the following:
\verbatim
INFO - Begin example program.
INFO - QuantLibAddin version = 0.9.5
INFO - ObjectHandler version = 0.9.5
INFO - SWAP PV = 36106.6
INFO - End example program.
\endverbatim

The program should generate the XML export files <tt>qlxl_swap_market.xml</tt>
and <tt>qlxl_swap_trade.xml</tt> in the current directory.

\subsubsection serialization_linux_cpp_import 2.1.2 Import

\c cd to directory  <tt>QuantLibAddin/Clients/CppSwapIn</tt> and execute
program <tt>swap_in</tt>.  The program loads <tt>qlxl_swap_market.xml</tt> and
<tt>qlxl_swap_trade.xml</tt> from the current directory.  The output from the
program should appear similar to the following:
\verbatim
INFO - Begin example program.
INFO - QuantLibAddin version = 0.9.5
INFO - ObjectHandler version = 0.9.5
INFO - SWAP PV = 36106.6
INFO - Example of serializing to/from a buffer:
INFO - XML = 
<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE boost_serialization>
<boost_serialization signature="serialization::archive" version="4">
<object_list class_id="1" tracking_level="1" version="0" object_id="_0">
        <count>1</count>
        <item_version>1</item_version>
        <item class_id="0" tracking_level="0" version="1">
                <px class_id="138" tracking_level="1" version="0" object_id="_1">
                        <ObjectId>quote1</ObjectId>
                        <ClassName>qlSimpleQuote</ClassName>
                        <Value class_id="195" tracking_level="0" version="0">
                                <variant_ class_id="196" tracking_level="0" version="0">
                                        <which>1</which>
                                        <value>1.23</value>
                                </variant_>
                        </Value>
                        <TickValue>0</TickValue>
                        <Permanent>0</Permanent>
                </px>
        </item>
</object_list>
</boost_serialization>

INFO - log dump of object with ID = quote1

property = ClassName            value = qlSimpleQuote       
property = ObjectId             value = quote1              
property = Value                value = 1.23                
property = TickValue            value = 0                   
property = Permanent            value = 0                   
Permanent = false               


INFO - End example program.
\endverbatim

<div align="center"><small><a href="tutorials.html">back to tutorials index</a></small></div> 

*/

