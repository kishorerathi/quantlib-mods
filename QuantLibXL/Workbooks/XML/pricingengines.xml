<Category name='pricingengines'>
  <description>functions to construct and use PricingEngine objects</description>
  <displayName>Pricing Engines</displayName>
  <xlFunctionWizardCategory>QuantLib - Financial</xlFunctionWizardCategory>
  <includes>
    <include>qlo/pricingengines.hpp</include>
    <include>qlo/termstructures.hpp</include>
    <include>qlo/swaptionvolstructure.hpp</include>
    <include>qlo/capletvolstructure.hpp</include>
    <include>qlo/shortratemodels.hpp</include>
    <include>qlo/payoffs.hpp</include>
    <include>ql/PricingEngines/blackformula.hpp</include>
    <include>ql/PricingEngines/blackscholescalculator.hpp</include>
  </includes>
  <copyright>
    Copyright (C) 2006 Ferdinando Ametrano
  </copyright>
  <Functions>

    <Procedure name='qlBlackFormula'>
      <description>Black 1976 formula for option pricing</description>
      <alias>QuantLib::blackFormula</alias>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='optionType' enumeration='QuantLib::Option::Type'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>option type (i.e. Call or Put)</description>
          </Parameter>
          <Parameter name='strike'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>option strike</description>
          </Parameter>
          <Parameter name='atmForwardValue'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying asset at-the-money forward value</description>
          </Parameter>
          <Parameter name='stdDev'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>standard deviation, i.e. annualized percentage volatility times the square root of time to option expiry</description>
          </Parameter>
          <Parameter name='discount' libraryType='QuantLib::Real' default='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>discount factor</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBlackCashItmProbability'>
      <description>Black 1976 probability of being in the money (in the bond martingale measure), i.e. N(d2). It is a risk-neutral probability, not the real world one.</description>
      <alias>QuantLib::blackCashItmProbability</alias>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='optionType' enumeration='QuantLib::Option::Type'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>option type (i.e. Call or Put)</description>
          </Parameter>
          <Parameter name='strike'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>option strike</description>
          </Parameter>
          <Parameter name='atmForwardValue'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying asset at-the-money forward value</description>
          </Parameter>
          <Parameter name='stdDev'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>standard deviation, i.e. annualized percentage volatility times the square root of time to option expiry</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBlackImpliedStdDevApproximation'>
      <description>Approximation for the standard deviation (annualized percentage volatility times the square root of time to option expiry) implied by the Black 1976 formula</description>
      <alias>QuantLib::blackImpliedStdDevApproximation</alias>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='optionType' enumeration='QuantLib::Option::Type'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>option type (i.e. Call or Put)</description>
          </Parameter>
          <Parameter name='strike'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>option strike</description>
          </Parameter>
          <Parameter name='atmForwardValue'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying asset at-the-money forward value</description>
          </Parameter>
          <Parameter name='optionPrice'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>option price</description>
          </Parameter>
          <Parameter name='discount' libraryType='QuantLib::Real' default='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>discount factor</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBlackImpliedStdDev'>
      <description>Standard deviation (annualized percentage volatility times the square root of time to option expiry) implied by the Black 1976 formula</description>
      <alias>QuantLib::blackImpliedStdDev</alias>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='optionType' enumeration='QuantLib::Option::Type'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>option type (i.e. Call or Put)</description>
          </Parameter>
          <Parameter name='strike'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>option strike</description>
          </Parameter>
          <Parameter name='atmForwardValue'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying asset at-the-money forward value</description>
          </Parameter>
          <Parameter name='optionPrice'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>option price</description>
          </Parameter>
          <Parameter name='discount' libraryType='QuantLib::Real' default='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>discount factor</description>
          </Parameter>
          <Parameter name='guess' default='QuantLib::Null&lt;QuantLib::Real&gt;()'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>standard deviation guess</description>
          </Parameter>
          <Parameter name='accuracy' default='1.0e-6'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>standard deviation accuracy</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBlackStdDevDerivative'>
      <description>Black 1976 formula for the derivative with respect to the standard deviation (annualized percentage volatility times the square root of time to option expiry).</description>
      <alias>QuantLib::blackStdDevDerivative</alias>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='strike'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>option strike</description>
          </Parameter>
          <Parameter name='atmForwardValue'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying asset at-the-money forward value</description>
          </Parameter>
          <Parameter name='stdDev'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>standard deviation, i.e. annualized volatility times the square root of time to option expiry</description>
          </Parameter>
          <Parameter name='discount' libraryType='QuantLib::Real' default='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>discount factor</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBachelierBlackFormula'>
      <description>Black style formula when forward is normal rather than log-normal, i.e. essentially the model of Bachelier.</description>
      <alias>QuantLib::bachelierBlackFormula</alias>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='optionType' enumeration='QuantLib::Option::Type'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>option type (i.e. Call or Put)</description>
          </Parameter>
          <Parameter name='strike'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>option strike</description>
          </Parameter>
          <Parameter name='atmForwardValue'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying asset at-the-money forward value</description>
          </Parameter>
          <Parameter name='stdDev'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>standard deviation, i.e. annualized ABSOLUTE volatility times the square root of time to option expiry</description>
          </Parameter>
          <Parameter name='discount' libraryType='QuantLib::Real' default='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>discount factor</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBlackFormula2'>
      <description>Black 1976 formula for option pricing. It uses a PlainVanillaPayoff object as input</description>
      <alias>QuantLib::blackFormula</alias>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='payoff' libraryClass='PlainVanillaPayoff'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>PlainVanillaPayoff object ID</description>
          </Parameter>
          <Parameter name='atmForwardValue'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying asset at-the-money forward value</description>
          </Parameter>
          <Parameter name='stdDev'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>standard deviation, i.e. annualized percentage volatility times the square root of time to option expiry</description>
          </Parameter>
          <Parameter name='discount' libraryType='QuantLib::Real' default='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>discount factor</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBlackCashItmProbability2'>
      <description>Black 1976 probability of being in the money (in the bond martingale measure), i.e. N(d2). It is a risk-neutral probability, not the real world one. It uses a PlainVanillaPayoff object as input</description>
      <alias>QuantLib::blackCashItmProbability</alias>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='payoff' libraryClass='PlainVanillaPayoff'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>PlainVanillaPayoff  object ID</description>
          </Parameter>
          <Parameter name='atmForwardValue'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying asset at-the-money forward value</description>
          </Parameter>
          <Parameter name='stdDev'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>standard deviation, i.e. annualized percentage volatility times the square root of time to option expiry</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBlackImpliedStdDevApproximation2'>
      <description>Approximation for the standard deviation (annualized percentage volatility times the square root of time to option expiry) implied by the Black 1976 formula. It uses a PlainVanillaPayoff object as input</description>
      <alias>QuantLib::blackImpliedStdDevApproximation</alias>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='payoff' libraryClass='PlainVanillaPayoff'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>PlainVanillaPayoff object ID</description>
          </Parameter>
          <Parameter name='atmForwardValue'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying asset at-the-money forward value</description>
          </Parameter>
          <Parameter name='optionPrice'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>option price</description>
          </Parameter>
          <Parameter name='discount' libraryType='QuantLib::Real' default='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>discount factor</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBlackImpliedStdDev2'>
      <description>Standard deviation (annualized percentage volatility times the square root of time to option expiry) implied by the Black 1976 formula. It uses a PlainVanillaPayoff object as input</description>
      <alias>QuantLib::blackImpliedStdDev</alias>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='payoffID' libraryClass='PlainVanillaPayoff'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>PlainVanillaPayoff object ID</description>
          </Parameter>
          <Parameter name='atmForwardValue'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying asset at-the-money forward value</description>
          </Parameter>
          <Parameter name='optionPrice'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>option price</description>
          </Parameter>
          <Parameter name='discount' libraryType='QuantLib::Real' default='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>discount factor</description>
          </Parameter>
          <Parameter name='guess' default='QuantLib::Null&lt;QuantLib::Real&gt;()'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>standard deviation guess</description>
          </Parameter>
          <Parameter name='accuracy' default='1.0e-6'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>standard deviation accuracy</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBlackStdDevDerivative2'>
      <description>Black 1976 formula for the derivative with respect to the standard deviation (annualized percentage volatility times the square root of time to option expiry). It uses a PlainVanillaPayoff object as input</description>
      <alias>QuantLib::blackStdDevDerivative</alias>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='payoffID' libraryClass='PlainVanillaPayoff'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>PlainVanillaPayoff object ID</description>
          </Parameter>
          <Parameter name='atmForwardValue'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying asset at-the-money forward value</description>
          </Parameter>
          <Parameter name='stdDev'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>standard deviation, i.e. annualized volatility times the square root of time to option expiry</description>
          </Parameter>
          <Parameter name='discount' libraryType='QuantLib::Real' default='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>discount factor</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>

    <Procedure name='qlBachelierBlackFormula2'>
      <description>Black style formula when forward is normal rather than log-normal, i.e. essentially the model of Bachelier. It uses a PlainVanillaPayoff object as input</description>
      <alias>QuantLib::bachelierBlackFormula</alias>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='payoff' libraryClass='PlainVanillaPayoff'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>PlainVanillaPayoff object ID</description>
          </Parameter>
          <Parameter name='atmForwardValue'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying asset at-the-money forward value</description>
          </Parameter>
          <Parameter name='stdDev'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>standard deviation, i.e. annualized ABSOLUTE volatility times the square root of time to option expiry</description>
          </Parameter>
          <Parameter name='discount' libraryType='QuantLib::Real' default='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>discount factor</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Procedure>


    <!-- BlackCalculator interface and constructor -->
    <Member name='qlBlackCalculatorValue' libraryClass='BlackCalculator'>
      <description>returns the option value for the given BlackCalculator object.</description>
      <libraryFunction>value</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters />
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackCalculatorDeltaForward' libraryClass='BlackCalculator'>
      <description>returns the sensitivity to change in the underlying forward price for the given BlackCalculator object.</description>
      <libraryFunction>deltaForward</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters />
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackCalculatorDelta' libraryClass='BlackCalculator'>
      <description>returns the sensitivity to change in the underlying spot price for the given BlackCalculator object.</description>
      <libraryFunction>delta</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='spot' libraryType='QuantLib::Real'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>spot value</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackCalculatorElasticityForward' libraryClass='BlackCalculator'>
      <description>returns the sensitivity in percent to a percent change in the underlying forward price for the given BlackCalculator object.</description>
      <libraryFunction>elasticityForward</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters />
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackCalculatorElasticity' libraryClass='BlackCalculator'>
      <description>returns the sensitivity in percent to a percent change in the underlying spot price for the given BlackCalculator object.</description>
      <libraryFunction>elasticity</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='spot' libraryType='QuantLib::Real'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>spot value</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackCalculatorGammaForward' libraryClass='BlackCalculator'>
      <description>returns the second order derivative with respect to change in the underlying forward price for the given BlackCalculator object.</description>
      <libraryFunction>gammaForward</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters />
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackCalculatorGamma' libraryClass='BlackCalculator'>
      <description>returns the second order derivative with respect to change in the underlying spot price for the given BlackCalculator object.</description>
      <libraryFunction>gamma</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='spot' libraryType='QuantLib::Real'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>spot value</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackCalculatorTheta' libraryClass='BlackCalculator'>
      <description>returns the sensitivity to time to maturity for the given BlackCalculator object.</description>
      <libraryFunction>theta</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='spot' libraryType='QuantLib::Real'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>spot value</description>
          </Parameter>
          <Parameter name='timeToMaturity' libraryType='QuantLib::Time'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>time to maturity in years</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackCalculatorThetaPerDay' libraryClass='BlackCalculator'>
      <description>returns the sensitivity to time to maturity per day, assuming 365 days per year, for the given BlackCalculator object.</description>
      <libraryFunction>thetaPerDay</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='spot' libraryType='QuantLib::Real'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>spot value</description>
          </Parameter>
          <Parameter name='timeToMaturity' libraryType='QuantLib::Time'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>time to maturity in years</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackCalculatorVega' libraryClass='BlackCalculator'>
      <description>returns the sensitivity to volatility for the given BlackCalculator object.</description>
      <libraryFunction>vega</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='timeToMaturity' libraryType='QuantLib::Time'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>time to maturity in years</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackCalculatorRho' libraryClass='BlackCalculator'>
      <description>returns the sensitivity to discounting rate for the given BlackCalculator object.</description>
      <libraryFunction>rho</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='timeToMaturity' libraryType='QuantLib::Time'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>time to maturity in years</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackCalculatorDividendRho' libraryClass='BlackCalculator'>
      <description>returns the sensitivity to dividend/growth rate for the given BlackCalculator object.</description>
      <libraryFunction>dividendRho</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='timeToMaturity' libraryType='QuantLib::Time'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>time to maturity in years</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackCalculatorItmCashProbability' libraryClass='BlackCalculator'>
      <description>returns the probability of being in the money in the bond martingale measure for the given BlackCalculator object. It is a risk-neutral probability, not the real world probability.</description>
      <libraryFunction>itmCashProbability</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters />
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackCalculatorItmAssetProbability' libraryClass='BlackCalculator'>
      <description>returns the probability of being in the money in the asset martingale measure for the given BlackCalculator object. It is a risk-neutral probability, not the real world probability.</description>
      <libraryFunction>itmAssetProbability</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters />
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackCalculatorStrikeSensitivity' libraryClass='BlackCalculator'>
      <description>returns the sensitivity to strike for the given BlackCalculator object.</description>
      <libraryFunction>strikeSensitivity</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters />
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackCalculatorAlpha' libraryClass='BlackCalculator'>
      <description>returns the alpha of the internal formulation of the given BlackCalculator object.</description>
      <libraryFunction>alpha</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters />
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackCalculatorBeta' libraryClass='BlackCalculator'>
      <description>returns the beta of the internal formulation of the given BlackCalculator object.</description>
      <libraryFunction>beta</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters />
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlBlackCalculator'>
      <libraryFunction>BlackCalculator</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='payoffID' libraryClass='StrikedTypePayoff'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>payoff ID</description>
          </Parameter>
          <Parameter name='atmForwardValue'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>underlying asset at-the-money forward value</description>
          </Parameter>
          <Parameter name='stdDev' libraryType='QuantLib::Real'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>standard deviation, i.e. annualized percentage volatility times the square root of time to option expiry</description>
          </Parameter>
          <Parameter name='discount' libraryType='QuantLib::Real' default='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>discount factor</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- BlackScholesCalculator interface and constructor -->
    <Member name='qlBlackScholesCalculatorDelta' libraryClass='BlackScholesCalculator'>
      <description>returns the sensitivity to change in the underlying spot price for the given BlackScholesCalculator object.</description>
      <libraryFunction>delta</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackScholesCalculatorElasticity' libraryClass='BlackScholesCalculator'>
      <description>returns the sensitivity in percent to a percent change in the underlying spot price for the given BlackScholesCalculator object.</description>
      <libraryFunction>elasticity</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackScholesCalculatorGamma' libraryClass='BlackScholesCalculator'>
      <description>returns the second order derivative with respect to change in the underlying spot price for the given BlackScholesCalculator object.</description>
      <libraryFunction>gamma</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='true' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters/>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackScholesCalculatorTheta' libraryClass='BlackScholesCalculator'>
      <description>returns the sensitivity to time to maturity for the given BlackScholesCalculator object.</description>
      <libraryFunction>theta</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='timeToMaturity' libraryType='QuantLib::Time'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>time to maturity in years</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Member name='qlBlackScholesCalculatorThetaPerDay' libraryClass='BlackScholesCalculator'>
      <description>returns the sensitivity to time to maturity per day, assuming 365 days per year, for the given BlackScholesCalculator object.</description>
      <libraryFunction>thetaPerDay</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='timeToMaturity' libraryType='QuantLib::Time'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>time to maturity in years</description>
          </Parameter>
        </Parameters>
      </ParameterList>
      <ReturnValue>
        <type>double</type>
        <tensorRank>scalar</tensorRank>
      </ReturnValue>
    </Member>

    <Constructor name='qlBlackScholesCalculator'>
      <libraryFunction>BlackScholesCalculator</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='payoffID' libraryClass='StrikedTypePayoff'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>payoff ID</description>
          </Parameter>
          <Parameter name='spot' libraryType='QuantLib::Real'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>spot value</description>
          </Parameter>
          <Parameter name='growth' libraryType='QuantLib::DiscountFactor' default='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>growth discount factor</description>
          </Parameter>
          <Parameter name='stdDev' libraryType='QuantLib::Real'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>standard deviation, i.e. annualized percentage volatility times the square root of time to option expiry</description>
          </Parameter>
          <Parameter name='discount' libraryType='QuantLib::Real' default='1.0'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>discount factor</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <!-- Pricing Engines -->
    <Constructor name='qlPricingEngine'>
      <libraryFunction>PricingEngine</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
        <C/>
        <Calc/>
        <Guile/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='engineID'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>engine type</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlBinomialPricingEngine'>
      <libraryFunction>PricingEngine</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
        <Calc/>
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='engineID'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>engine type</description>
          </Parameter>
          <Parameter name='timeSteps'>
            <type>long</type>
            <tensorRank>scalar</tensorRank>
            <description>#/time steps</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlBlackSwaptionEngine'>
      <libraryFunction>BlackSwaptionEngine</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='vol' libToHandle='SwaptionVolatilityStructure'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>SwaptionVolatilityStructure object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlBlackCapFloorEngine'>
      <libraryFunction>BlackCapFloorEngine</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='vol' libToHandle='CapletVolatilityStructure'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>CapletVolatilityStructure object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

      <!-- coercion should/might make this constructor redundant -->
    <Constructor name='qlBlackCapFloorEngine2'>
      <libraryFunction>BlackCapFloorEngine</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='vol'>
            <type>double</type>
            <tensorRank>scalar</tensorRank>
            <description>cap/floor term volatility</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

    <Constructor name='qlAnalyticCapFloorEngine'>
      <libraryFunction>AnalyticCapFloorEngine</libraryFunction>
      <SupportedPlatforms>
        <Excel calcInWizard='false' />
      </SupportedPlatforms>
      <ParameterList>
        <Parameters>
          <Parameter name='handleModel' libraryClass='AffineModel'>
            <type>string</type>
            <tensorRank>scalar</tensorRank>
            <description>affine model (providing a discount bond option pricing formula) object ID</description>
          </Parameter>
        </Parameters>
      </ParameterList>
    </Constructor>

  </Functions>
</Category>
