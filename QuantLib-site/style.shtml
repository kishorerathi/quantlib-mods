<!--
 $Id$
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<!--#include virtual="qlmeta.inc"-->
<meta name="author" content=
"Geotechnical Software Services, Ferdinando Ametrano">
<meta name="copyright" content=
"Geotechnical Software Services (c) 1996-2001, Ferdinando Ametrano (c) 2001">
<meta name="description" content="QuantLib Programming Style Guidelines">
<title>QuantLib Programming Style Guidelines</title>
</head>
<body>
<div id="container">
<div id="menu">
<!--#include virtual="devmenu.inc"-->
</div>
<div id="content">

<h1 class="center">QuantLib Programming Style Guidelines</h1>
<h6 class="right">modified from <em>C++ Programming Style
Guidelines</em> by <em>Geotechnical Software Services</em></h6>
<h6 class="right">&copy; Geotechnical Software Services 1996 -
2001</h6>
<h6 class="right">the original version is available at <a href=
"http://www.geosoft.no/style.html">http://www.geosoft.no/style.html</a></h6>
&nbsp;
<hr width="100%">
<h2>Table of Content</h2>
<ul>
<li><a href="#introduction">1 Introduction</a>
<ul>
<li><a href="#Layout%20of%20the%20Recommendations">1.1 Layout of
the Recommendations</a></li>
<li><a href="#Recommendation">1.2 Recommendations
Importance</a></li>
</ul>
</li>
<li><a href="#General%20Recommendations">2 General
Recommendations</a></li>
<li><a href="#Naming%20Conventions">3 Naming Conventions</a>
<ul>
<li><a href="#General">3.1 General</a></li>
<li><a href="#Specific">3.2 Specific</a></li>
</ul>
</li>
<li><a href="#Files">4 Files</a>
<ul>
<li><a href="#Source%20Files">4.1 Source Files</a></li>
<li><a href="#Include%20Files">4.2 Include Files and Include
Statements</a></li>
</ul>
</li>
<li><a href="#Statements">5 Statements</a>
<ul>
<li><a href="#Types">5.1 Types</a></li>
<li><a href="#Variables">5.2 Variables</a></li>
<li><a href="#Loops">5.3 Loops</a></li>
<li><a href="#Conditionals">5.4 Conditionals</a></li>
<li><a href="#Misc">5.5 Miscellaneous</a></li>
</ul>
</li>
<li><a href="#Layout%20and%20Comments">6 Layout and Comments</a>
<ul>
<li><a href="#Layout">6.1 Layout</a></li>
<li><a href="#White%20Space">6.2 White space</a></li>
<li><a href="#Comments">6.3 Comments</a></li>
</ul>
</li>
</ul>
<hr width="100%">
<h2><a name="introduction" id="introduction"></a>1
Introduction</h2>
<table summary="quotation" width="100%" border="0" cellpadding="0"
cellspacing="0">
<tr>
<td width="10%">&nbsp;</td>
<td><b>standards</b>, <i>n.</i>:</td>
</tr>
<tr>
<td width="30%">&nbsp;</td>
<td>the principles we use to reject other people's code.</td>
</tr>
<tr>
<td width="30%">&nbsp;</td>
</tr>
</table>
<p>This document lists C++ coding recommendations for the QuantLib
project.</p>
<p>These recommendations are heavily based on <a href=
"http://www.geosoft.no/style.html"><em>C++ Programming Style
Guidelines</em></a> by Geotechnical Software Services. Please refer
to the original document for a more general introduction and
references.</p>
<h3><a name="Layout of the Recommendations" id=
"LayoutOfTheRecommendations"></a>1.1 Layout of the
Recommendations.</h3>
<p>The recommendations are grouped by topic and each recommendation
is numbered to make it easier to refer to during reviews.</p>
<p>Layout of the recommendations is as follows:</p>
<table summary="" border width="100%">
<tr>
<td class="recom">Guideline short description</td>
</tr>
<tr>
<td><tt>Example if applicable</tt></td>
</tr>
<tr>
<td class="rationale">Motivation, background and additional
information.</td>
</tr>
</table>
<p>The motivation section is important. Coding standards and
guidelines tend to start "religious wars", and it is important to
state the background for the recommendation.</p>
<h3><a name="Recommendation" id="Recommendation"></a>1.2
Recommendation Importance</h3>
<p>In the guideline sections the terms <em>must</em>,
<em>should</em> and <em>can</em> have special meaning. A
<em>must</em> requirement must be followed, a <em>should</em> is a
strong recommendation, and a <em>can</em> is a general
guideline.</p>
<h2><a name="General Recommendations" id=
"GeneralRecommendations"></a>2 General Recommendations</h2>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">0. ANSI/ISO Standard C++ must be used.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">Any proprietary extension would compromise
the portability of the code.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">1. Any violation to the guide is allowed if it
enhances readability.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">The main goal of the recommendation is to
improve readability and thereby the understanding and the
maintainability and general quality of the code. It is impossible
to cover all the specific cases in a general guide and the
programmer should be flexible.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">2. The rules can be violated if there are strong
personal objections against them.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">The attempt is to make a guideline, not to
force a particular coding style onto individuals. Experienced
programmers normally want adopt a style like this anyway, but
having one, and at least requiring everyone to get familiar with
it, usually makes people start <em>thinking</em> about programming
style and evaluate their own habits in this area.
<p>On the other hand, new and inexperienced programmers normally
use a style guide as a convenience of getting into the programming
jargon more easily.</p>
</td>
</tr>
</table>
<br>
<br>
<br>
<h2><a name="Naming Conventions" id="NamingConventions"></a>3
Naming Conventions</h2>
<h3><a name="General" id="General"></a>3.1 General Naming
Conventions</h3>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">3. Names representing types must be in mixed case
starting with upper case.</td>
</tr>
<tr>
<td><tt>Line, SavingsAccount</tt></td>
</tr>
<tr>
<td class="rationale">Common practice in the C++ development
community.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">4. Variable names must be in mixed case starting
with lower case.</td>
</tr>
<tr>
<td><tt>line, savingsAccount</tt></td>
</tr>
<tr>
<td class="rationale">Common practice in the C++ development
community. Makes variables easy to distinguish from types, and
effectively resolves potential naming collision as in the
declaration Line line;</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">5. Named constants (including enumeration values)
must be all uppercase using underscore to separate words.
Enumerations inside classes and static const class variables must
be in mixed case starting with lower case.</td>
</tr>
<tr>
<td><tt>MAX_ITERATIONS, COLOR_RED, PI</tt></td>
</tr>
<tr>
<td class="rationale">Common practice in the C++ development
community. In general, the use of such constants should be
minimized. In many cases implementing the value as a method is a
better choice:<br>
<br>
<p><tt>int getMaxIterations() &nbsp; &nbsp; // NOT: MAX_ITERATIONS
= 25<br>
{<br>
&nbsp; return 25;<br>
}</tt></p>
<p>This form is both easier to read, and it ensures a unified
interface towards class values.</p>
</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">6. Names representing methods or functions must
be verbs and written in mixed case starting with lower case.</td>
</tr>
<tr>
<td><tt>getName(), computeTotalWidth()</tt></td>
</tr>
<tr>
<td class="rationale">Common practice in the C++ development
community. This is identical to variable names, but functions in
C++ are already distinguishable from variables by their specific
form.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">7. Names representing namespaces must be in mixed
case starting with upper case.</td>
</tr>
<tr>
<td><tt>QuantLib::DayCounters, QuantLib::FiniteDifferences,
QuantLib::Solvers1D</tt></td>
</tr>
<tr>
<td class="rationale">Common practice in the C++ development
community.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">8. Names representing template types should be a
single uppercase letter.</td>
</tr>
<tr>
<td><tt>template&lt;class T&gt; ...<br>
template&lt;class C, class D&gt; ...<br></tt></td>
</tr>
<tr>
<td class="rationale">Common practice in the C++ development
community. This makes template names stand out relative to all
other names used.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">9. Abbreviations and acronyms must not be
uppercase when used as name [4].</td>
</tr>
<tr>
<td><tt>exportHtmlSource(); &nbsp;&nbsp; // NOT:
exportHTMLSource();<br>
openDvdPlayer(); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // NOT:
openDVDPlayer();</tt></td>
</tr>
<tr>
<td class="rationale">Using all uppercase for the base name will
give conflicts with the naming conventions given above. A variable
of this type would have to be named dVD, hTML etc. which obviously
is not very readable. Another problem is illustrated in the
examples above; When the name is connected to another, the
readability is seriously reduced; the word following the
abbreviation does not stand out as it should.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">10. Global variables should always be referred to
using the :: operator.</td>
</tr>
<tr>
<td><tt>::mainWindow.open(),
::applicationContext.getName()</tt></td>
</tr>
<tr>
<td class="rationale">In general, the use of global variables
should be avoided. Consider using singleton objects instead.</td>
</tr>
</table>
<!--
***************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">11. Private class variables should have
underscore suffix.</td>
</tr>
<tr>
<td><tt>class SomeClass {<br>
&nbsp; private:<br>
&nbsp;&nbsp;&nbsp; int&nbsp; length_;<br>
}</tt></td>
</tr>
<tr>
<td class="rationale">Apart from its name and its type, the
<em>scope</em> of a variable is its most important feature.
Indicating class scope by using underscore makes it easy to
distinguish class variables from local scratch variables. This is
important because class variables are considered to have higher
significance than method variables, and should be treated with
special care by the programmer.
<p>A side effect of the underscore naming convention is that it
nicely resolves the problem of finding reasonable variable names
for setter methods and constructors:</p>
<p><tt>void setDepth (int depth)<br>
{<br>
&nbsp; depth_ = depth;<br>
}</tt></p>
<p>An issue is whether the underscore should be added as a prefix
or as a suffix. Both practices are commonly used, but the latter is
recommended because it seem to best preserve the readability of the
name.</p>
<p>It should be noted that scope identification in variables has
been a controversial issue for quite some time. It seems, though,
that this practice now is gaining acceptance and that it is
becoming more and more common as a convention in the professional
development community.</p>
</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">12. Generic variables should have the same name
as their type.</td>
</tr>
<tr>
<td><tt>void setTopic (Topic topic) &nbsp; &nbsp;&nbsp; // NOT:
void setTopic (Topic value)<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// NOT: void
setTopic (Topic aTopic)<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// NOT: void
setTopic (Topic x)<br>
<br>
void connect (Database database) // NOT: void connect (Database
db)<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// NOT: void
connect (Database oracleDB)</tt></td>
</tr>
<tr>
<td class="rationale">Reduce complexity by reducing the number of
terms and names used. Also makes it easy to deduce the type given a
variable name only.
<p>If for some reason this convention doesn't seem to <em>fit</em>
it is a strong indication that the type name is badly chosen.</p>
<p>Non-generic variables have a <em>role</em>. These variables can
often be named by combining role and type:</p>
<p><tt>Point startingPoint, centerPoint;<br>
Name&nbsp; loginName;<br></tt></p>
</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">13. All names should be written in English.</td>
</tr>
<tr>
<td><tt>fileName;&nbsp;&nbsp;&nbsp; // NOT:&nbsp;&nbsp;
filNavn</tt></td>
</tr>
<tr>
<td class="rationale">English is the preferred language for
international development.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">14. Variables with a large scope should have long
names, variables with a small scope can have short names [1].</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">Scratch variables used for temporary storage
or indices are best kept short. A programmer reading such variables
should be able to assume that its value is not used outside a few
lines of code. Common scratch variables for integers are
<em>i</em>, <em>j</em>, <em>k</em>, <em>m</em>, <em>n</em> and for
characters <em>c</em> and <em>d</em>.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">15. The name of the object is implicit, and
should be avoided in a method name.</td>
</tr>
<tr>
<td><tt>line.getLength();&nbsp;&nbsp;&nbsp; // NOT:&nbsp;
line.getLineLength();</tt></td>
</tr>
<tr>
<td class="rationale">The latter seems natural in the class
declaration, but proves superfluous in use, as shown in the
example.</td>
</tr>
</table>
<h3><a name="Specific" id="Specific"></a>3.2 Specific Naming
Conventions</h3>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">17. The term <em>set</em> must be used to set the
value of an attribute. The term <em>get</em> could be used when an
attribute is accessed directly.</td>
</tr>
<tr>
<td>
<tt>employee.name();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
matrix.getElement(2, 4);<br>
employee.setName(name);&nbsp;&nbsp; matrix.setElement(2, 4,
value);</tt></td>
</tr>
<tr>
<td class="rationale">Common practice in the C++ development
community. In Java this convention has become more or less
standard.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">18. The term <em>compute</em> can be used in
methods where something is computed.</td>
</tr>
<tr>
<td><tt>valueSet-&gt;computeAverage();&nbsp;
matrix-&gt;computeInverse()</tt></td>
</tr>
<tr>
<td class="rationale">Give the reader the immediate clue that this
is a potential time consuming operation, and if used repeatedly, he
might consider caching the result. Consistent use of the term
enhances readability.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">19. The term <em>find</em> can be used in methods
where something is looked up.</td>
</tr>
<tr>
<td><tt>vertex.findNearestVertex();&nbsp;&nbsp;
matrix.findMinElement();&nbsp;</tt></td>
</tr>
<tr>
<td class="rationale">Give the reader the immediate clue that this
is a simple look up method with a minimum of computations involved.
Consistent use of the term enhances readability.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">20. The term <em>initialize</em> can be used
where an object or a concept is established.</td>
</tr>
<tr>
<td><tt>printer.initializeFontSet();</tt></td>
</tr>
<tr>
<td class="rationale">The American <em>initialize</em> should be
preferred over the English <em>initialise</em>. Abbreviation
<em>init</em> should be avoided.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">21. Variables representing GUI components should
be suffixed by the component type name.</td>
</tr>
<tr>
<td><tt>mainWindow, propertiesDialog, widthScale, loginText,
leftScrollbar, mainForm, fileMenu, minLabel, exitButton, yesToggle
etc.</tt></td>
</tr>
<tr>
<td class="rationale">Enhances readability since the name gives the
user an immediate clue of the type of the variable and thereby the
objects resources.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">22. The suffix <em>List</em> should be used on
names representing a list of objects.</td>
</tr>
<tr>
<td><tt>vertex</tt> (one vertex),&nbsp;&nbsp; <tt>vertexList</tt>
(a list of vertices)</td>
</tr>
<tr>
<td class="rationale">Enhances readability since the name gives the
user an immediate clue of the type of the variable and the
operations that can be performed on the object.
<p>Simply using the plural form of the base class name for a list
(<tt>matrixElement</tt> (one matrix element),
<tt>matrixElements</tt> (list of matrix elements)) must be avoided
since the two only differ in a single character and are thereby
difficult to distinguish.</p>
<p>A <em>list</em> in this context is the compound data type that
can be traversed backwards, forwards, etc. (typically an STL
<tt>vector</tt>). A plain array is simpler. The suffix
<em>Array</em> can be used to denote an array of objects.</p>
</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">23. The prefix <em>n</em> should be used for
variables representing a number of objects.</td>
</tr>
<tr>
<td><tt>nPoints, nLines</tt></td>
</tr>
<tr>
<td class="rationale">The notation is taken from mathematics where
it is an established convention for indicating a number of
objects.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">24.The suffix <em>No</em>, <em>Num</em> or
<em>Number</em> should be used for variables representing an entity
number.</td>
</tr>
<tr>
<td><tt>tableNo, employeeNum</tt></td>
</tr>
<tr>
<td class="rationale">The notation is taken from mathematics where
it is an established convention for indicating an entity number.
<p>An alternative approach is to prefix such variables with an
<em>i</em>: <tt>iTable, iEmployee</tt>. This is more elegant, but
less common.</p>
</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">25. Iterator variables should be called
<em>i</em>, <em>j</em>, <em>k</em> etc.</td>
</tr>
<tr>
<td><tt>for (int i = 0; i &lt; nTables); i++) {<br>
&nbsp; :<br>
}<br>
<br>
vector&lt;MyClass&gt;::iterator i;<br>
for (i = list.begin(); i != list.end(); i++) {<br>
&nbsp; Element element = *i;<br>
&nbsp; ...<br>
}<br></tt></td>
</tr>
<tr>
<td class="rationale">The notation is taken from mathematics where
it is an established convention for indicating iterators.<br>
<br></td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">26. The prefix <em>is</em> should be used for
boolean variables and methods.</td>
</tr>
<tr>
<td><tt>isSet, isVisible, isFinished, isFound, isOpen</tt></td>
</tr>
<tr>
<td class="rationale">Common practice in the C++ development
community and partially enforced in Java.
<p>Using the <em>is</em> prefix solves a common problem of choosing
bad boolean names like <tt>status</tt> or <tt>flag</tt>.
<tt>isStatus</tt> or <tt>isFlag</tt> simply doesn't fit, and the
programmer is forced to choose more meaningful names.</p>
<p>There are a few alternatives to the <em>is</em> prefix that fits
better in some situations. These are the <em>has</em>, <em>can</em>
and <em>should</em> prefixes:</p>
<p><tt>bool hasLicense();</tt><br>
<tt>bool canEvaluate();</tt><br>
<tt>bool shouldSort();</tt><br></p>
</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">27. Complement names must be used for complement
operations [1].</td>
</tr>
<tr>
<td><tt>get/set, add/remove, create/destroy, start/stop,
insert/delete, increment/decrement, old/new, begin/end, first/last,
up/down, min/max, next/previous, old/new, open/close, show/hide,
suspend/resume, etc.</tt></td>
</tr>
<tr>
<td class="rationale">Reduce complexity by symmetry.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">28. Abbreviations in names should be
avoided.</td>
</tr>
<tr>
<td><tt>computeAverage();&nbsp;&nbsp;&nbsp;&nbsp; // NOT:&nbsp;
compAvg();</tt></td>
</tr>
<tr>
<td class="rationale">There are two types of words to consider.
First are the common words listed in a language dictionary. These
must never be abbreviated. Never write:
<p><tt>cmd&nbsp;&nbsp;</tt> instead of <tt>&nbsp; command</tt><br>
<tt>cp &nbsp;&nbsp;</tt> instead of <tt>&nbsp; copy</tt><br>
<tt>pt &nbsp;&nbsp;</tt> instead of <tt>&nbsp; point</tt><br>
<tt>comp&nbsp;</tt> instead of <tt>&nbsp; compute</tt><br>
<tt>init&nbsp;</tt> instead of <tt>&nbsp; initialize</tt><br>
etc.<br></p>
<p>Then there are domain specific phrases that are more naturally
known through their abbreviations/acronym. These phrases should be
kept abbreviated. Never write:</p>
<p><tt>HypertextMarkupLanguage&nbsp;</tt> instead of <tt>&nbsp;
html</tt><br>
<tt>CentralProcessingUnit &nbsp;&nbsp;</tt> instead of <tt>&nbsp;
cpu</tt><br>
<tt>PriceEarningRatio &nbsp;&nbsp; &nbsp; &nbsp;</tt> instead of
<tt>&nbsp; pe</tt><br>
etc.</p>
</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">29. Naming pointers specifically should be
avoided.</td>
</tr>
<tr>
<td><tt>Line *line;&nbsp;&nbsp; // NOT:&nbsp; Line *pLine;&nbsp; or
Line *linePtr;&nbsp; etc.</tt></td>
</tr>
<tr>
<td class="rationale">Many variables in a C/C++ environment are
pointers, so a convention like this is almost impossible to follow.
Also objects in C++ are often oblique types where the specific
implementation should be ignored by the programmer. Only when the
actual type of an object is of special significance, the name
should emphasize the type.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">30. Negated boolean variable names must be
avoided.</td>
</tr>
<tr>
<td><tt>bool isError;&nbsp;&nbsp;&nbsp; // NOT:&nbsp;&nbsp;
isNoError&nbsp;<br>
bool isFound;&nbsp;&nbsp;&nbsp; // NOT:&nbsp;&nbsp;
isNotFound</tt></td>
</tr>
<tr>
<td class="rationale">The problem arises when such a name is used
in conjunction with the logical negation operator as this results
in a double negative. It is not immediately apparent what
<tt>!isNotFound</tt> means.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">31. Enumeration constants can be prefixed by a
common type name.</td>
</tr>
<tr>
<td><tt>enum Color {<br>
&nbsp; COLOR_RED,<br>
&nbsp; COLOR_GREEN,<br>
&nbsp; COLOR_BLUE<br>
};</tt></td>
</tr>
<tr>
<td class="rationale">This gives additional information of where
the declaration can be found, which constants belongs together, and
what concept the constants represent.
<p>An alternative approach is to always refer to the constants
through their common type: <tt>Color::RED</tt>,
<tt>Airline::AIR_FRANCE</tt> etc.</p>
</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">32. Exception classes should be suffixed with
<em>Exception</em>.</td>
</tr>
<tr>
<td><tt>class AccessException<br>
{<br>
&nbsp; :<br>
}<br></tt></td>
</tr>
<tr>
<td class="rationale">Exception classes are really not part of the
main design of the program, and naming them like this makes them
stand out relative to the other classes.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">33. Functions (methods returning something)
should be named after what they return and procedures
(<em>void</em> methods) after what they do.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">Increase readability. Makes it clear what the
unit should do and especially all the things it is not supposed to
do. This again makes it easier to keep the code clean of side
effects.</td>
</tr>
</table>
<br>
<br>
<br>
<h2><a name="Files" id="Files"></a>4 Files</h2>
<h3><a name="Source Files" id="SourceFiles"></a>4.1 Source
Files</h3>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">34. C++ header files should have the extension
<em>.hpp</em>. Source files should have the extension
<em>.cpp</em>.</td>
</tr>
<tr>
<td><tt>MyClass.cpp, MyClass.hpp</tt></td>
</tr>
<tr>
<td class="rationale">These are all accepted C++ standards for file
extension.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">35. A class should be declared in a header file
and defined in a source file where the name of the files match the
name of the class.</td>
</tr>
<tr>
<td><tt>MyClass.hpp, MyClass.cpp</tt></td>
</tr>
<tr>
<td class="rationale">Makes it easy to find the associated files of
a given class. This convention is enforced in Java and has become
very successful as such.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">36. All definitions should reside in source
files.</td>
</tr>
<tr>
<td><tt>class MyClass<br>
{<br>
&nbsp; public:<br>
&nbsp; &nbsp; int getValue () {return value_;} // NO!<br>
&nbsp; &nbsp; ...<br>
&nbsp; private:<br>
&nbsp; &nbsp; int value_;<br>
}<br></tt></td>
</tr>
<tr>
<td class="rationale">The header files should declare an interface,
the source file should implement it. When looking for an
implementation, the programmer should always know that it is found
in the source file. The obvious exception to this rule is of course
inline functions that must be defined in the header file.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">37. File content must be kept within 80
columns.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">80 columns is a common dimension for editors,
terminal emulators, printers and debuggers, and files that are
shared between several people should keep within these constraints.
It improves readability when unintentional line breaks are avoided
when passing a file between programmers.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">38. Special characters like TAB and page break
must be avoided.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">These characters are bound to cause problem
for editors, printers, terminal emulators or debuggers when used in
a multi-programmer, multi-platform environment.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">39. The incompleteness of split lines must be
made obvious [1].</td>
</tr>
<tr>
<td><tt>totalSum = a + b + c +<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; d +
e;<br>
function (param1, param2,<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; param3);<br>
setText ("Long line split"<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "into two
parts.");<br>
for (tableNo = 0; tableNo &lt; nTables;<br>
&nbsp;&nbsp;&nbsp;&nbsp; tableNo += tableStep)</tt></td>
</tr>
<tr>
<td class="rationale">Split lines occurs when a statement exceed
the 80 column limit given above. It is difficult to give rigid
rules for how lines should be split, but the examples above should
give a general hint.
<p>In general:</p>
<ul>
<li>Break after a comma.</li>
<li>Break after an operator.</li>
<li>Align the new line with the beginning of the expression on the
previous line.</li>
</ul>
</td>
</tr>
</table>
<h3><a name="Include Files" id="IncludeFiles"></a>4.2 Include
Files and Include Statements</h3>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">40. Header files must include a construction that
prevents multiple inclusion. The convention is an all uppercase
construction of the module name, the file name and the h
suffix.</td>
</tr>
<tr>
<td><tt>#ifndef MOD_FILENAME_H<br>
#define MOD_FILENAME_H<br>
&nbsp;:<br>
#endif</tt></td>
</tr>
<tr>
<td class="rationale">The construction is to avoid compilation
errors. The name convention is common practice. The construction
should appear in the top of the file (before the file header) so
file parsing is aborted immediately and compilation time is
reduced.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">41. Include statements should be sorted and
grouped. Sorted by their hierarchical position in the system with
low level files included first. Leave an empty line between groups
of include statements.</td>
</tr>
<tr>
<td><tt>#include &lt;fstream&gt;<br>
#include &lt;iomanip&gt;<br>
<br>
#include &lt;Xm/Xm.h&gt;<br>
#include &lt;Xm/ToggleB.h&gt;<br>
<br>
#include "ui/PropertiesDialog.h"<br>
#include "ui/MainWindow.h"</tt></td>
</tr>
<tr>
<td class="rationale">In addition to show the reader the individual
include files, it also give an immediate clue about the modules
that are involved.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">42. Include statements must be located at the top
of a file only.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">Common practice. Avoid unwanted compilation
side effects by "hidden" include statements deep into a source
file.</td>
</tr>
</table>
<br>
<br>
<br>
<h2><a name="Statements" id="Statements"></a>5 Statements</h2>
<h3><a name="Types" id="Types"></a>5.1 Types</h3>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">43. Types that are local to one file only can be
declared inside that file.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">Enforces information hiding.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">44. The parts of a class must be sorted
<em>public</em>, <em>protected</em> and <em>private</em> [2][3].
All sections must be identified explicitly. Not applicable sections
should be left out.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">The ordering is <em>"most public first"</em>
so people who only wish to use the class can stop reading when they
reach the <tt>protected/private</tt> sections.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">45. Type conversions must always be done
explicitly. Never rely on implicit type conversion.</td>
</tr>
<tr>
<td><tt>floatValue = static_cast&lt;float&gt; (intValue);&nbsp;
&nbsp; // YES!<br>
floatValue = intValue; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; // NO!<br></tt></td>
</tr>
<tr>
<td class="rationale">By this, the programmer indicates that he is
aware of the different types involved and that the mix is
intentional.</td>
</tr>
</table>
<h3><a name="Variables" id="Variables"></a>5.2 Variables</h3>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">46. Variables should be initialized where they
are declared.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">This ensures that variables are valid at any
time. Sometimes it is impossible to initialize a variable to a
valid value where it is declared:
<p><tt>int x, y, z;<br>
getCenter (&amp;x, &amp;y, &amp;z);<br></tt></p>
<p>In these cases it should be left uninitialized rather than
initialized to some phony value.</p>
</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">47. Variables must never have dual meaning.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">Enhance readability by ensuring all concepts
are represented uniquely. Reduce chance of error by side
effects.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">48. Use of global variables should be
minimized.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">In C++ there is no reason global variables
need to be used at all. The same is true for global functions or
file scope (static) variables.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">49. Class variables should never be declared
public, except static const variables, for which we see no reason
for access through a get() method.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">The concept of C++ information hiding and
encapsulation is violated by public variables. Use private
variables and access functions instead. One exception to this rule
is when the class is essentially a data structure, with no behavior
(equivalent to a C <tt>struct</tt>). In this case it is appropriate
to make the class' instance variables public [2].
<p>Note that <em>struct</em>s are kept in C++ for compatibility
with C only, and avoiding them increases the readability of the
code by reducing the number of constructs used. Use a class
instead.</p>
</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">50. Related variables of the same type can be
declared in a common statement [3].<br>
Unrelated variables should not be declared in the same
statement.</td>
</tr>
<tr>
<td><tt>float&nbsp; x, y, z;<br>
float&nbsp; revenueJanuary, revenueFebruary,
revenueMarch;</tt></td>
</tr>
<tr>
<td class="rationale">The common requirement of having declarations
on separate lines is not useful in the situations like the ones
above. It enhances readability to group variables like this.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">51. C++ pointers and references should have their
reference symbol next to the variable name rather than to the type
name [3].</td>
</tr>
<tr>
<td><tt>float *x;&nbsp;&nbsp;&nbsp; // NOT:&nbsp; float* x;<br>
int &nbsp; &amp;y;&nbsp;&nbsp;&nbsp; // NOT:&nbsp; int&amp; &nbsp;
y;<br></tt></td>
</tr>
<tr>
<td class="rationale">It is debatable whether a pointer is a
variable of a pointer type (float*&nbsp; x) or a pointer to a given
type (float&nbsp; *x). Important in the recommendation given though
is the fact that it is impossible to declare more than one pointer
in a given statement using the first approach. I.e. float* x, y, z;
is equivalent with float *x; float y; float z; The same goes for
references.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">52. The <tt>const</tt> keyword should be listed
before the type name.</td>
</tr>
<tr>
<td><tt>void f1 (const Widget *v) &nbsp; &nbsp; // NOT: void f1
(Widget const *v)</tt></td>
</tr>
<tr>
<td class="rationale">Neither is better nor worse, but since the
former is more commonly used that should be the convention.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">53. Implicit test for <em>0</em> should not be
used other than for boolean variables and pointers.</td>
</tr>
<tr>
<td><tt>if (nLines != 0)&nbsp;&nbsp;&nbsp; // NOT:&nbsp;&nbsp; if
(nLines)<br>
if (value != 0.0)&nbsp;&nbsp; // NOT:&nbsp;&nbsp; if
(value)</tt></td>
</tr>
<tr>
<td class="rationale">It is not necessarily defined by the compiler
that ints and floats 0 are implemented as binary 0. Also, by using
explicit test the statement give immediate clue of the type being
tested. It is common also to suggest that pointers shouldn't test
implicit for 0 either, i.e. <tt>if (line == 0)</tt> instead of
<tt>if (line)</tt>. The latter is regarded as such a common
practice in C/C++ however that it can be used.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">54. Variables should be declared in the smallest
scope possible.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">Keeping the operations on a variable within a
small scope, it is easier to control the effects and side effects
of the variable.</td>
</tr>
</table>
<h3><a name="Loops" id="Loops"></a>5.3 Loops</h3>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">55. Only loop control statements must be included
in the <tt>for()</tt> construction.</td>
</tr>
<tr>
<td><tt>sum = 0; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; // NOT: for (i = 0, sum = 0; i &lt; 100; i++)<br>
for (i = 0; i &lt; 100; i++) &nbsp;// &nbsp; &nbsp; &nbsp;
&nbsp;sum += value[i];<br>
&nbsp; sum += value[i];</tt></td>
</tr>
<tr>
<td class="rationale">Increase maintainability and readability.
Make it crystal clear what controls the loop and what the loop
contains.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">56. Loop variables should be initialized
immediately before the loop.</td>
</tr>
<tr>
<td><tt>isDone = false; &nbsp; &nbsp; &nbsp; // NOT: &nbsp; bool
isDone = false;<br>
while (!isDone) { &nbsp; &nbsp; // &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp;:<br>
&nbsp; : &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; // &nbsp; &nbsp; &nbsp;&nbsp; while (!isDone) {<br>
} &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; // &nbsp; &nbsp; &nbsp; &nbsp;&nbsp; :<br>
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;
&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</tt></td>
</tr>
<tr>
<td></td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">57. <tt>do-while</tt> loops can be avoided.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale"><tt>do-while</tt> loops are less readable
than ordinary <tt>while</tt> loops and <tt>for</tt> loops since the
conditional is at the bottom of the loop. The reader must scan the
entire loop in order to understand the scope of the loop.
<p>In addition, <tt>do-while</tt> loops are not needed. Any
<tt>do-while</tt> loop can easily be rewritten into a
<tt>while</tt> loop or a <tt>for</tt> loop. Reducing the number of
constructs used enhance readability.</p>
</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">58. The use of <tt>break</tt> and
<tt>continue</tt> in loops should be avoided.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">These constructs can be compared to goto and
they should only be used if they prove to have higher readability
than their structured counterpart.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">60. The form <tt>while(true)</tt> should be used
for infinite loops.</td>
</tr>
<tr>
<td><tt>while (true) {<br>
&nbsp; :<br>
}<br>
<br>
for (;;) { // NO!<br>
&nbsp; :<br>
}<br>
<br>
while (1) { // NO!<br>
&nbsp; :<br>
}<br></tt></td>
</tr>
<tr>
<td class="rationale">Testing against 1 is neither necessary nor
meaningful. The form <tt>for (;;)</tt> is not very readable, and it
is not apparent that this actually is an infinite loop.</td>
</tr>
</table>
<h3><a name="Conditionals" id="Conditionals"></a>5.4
Conditionals</h3>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">61. Complex conditional expressions must be
avoided. Introduce temporary boolean variables instead [1].</td>
</tr>
<tr>
<td><tt>if ((elementNo &lt; 0) || (elementNo &gt; maxElement)||<br>
&nbsp;&nbsp;&nbsp; elementNo == lastElement) {<br>
&nbsp; :<br>
}</tt>
<p>should be replaced by:</p>
<p><tt>isFinished&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = (elementNo &lt;
0) || (elementNo &gt; maxElement);<br>
isRepeatedEntry = elementNo == lastElement;<br>
if (isFinished || isRepeatedEntry) {<br>
&nbsp; :<br>
}</tt></p>
</td>
</tr>
<tr>
<td class="rationale">By assigning boolean variables to
expressions, the program gets automatic documentation. The
construction will be easier to read and to debug.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">62. The nominal case should be put in the
<em>if</em>-part and the exception in the <em>else</em>-part of an
if statement [1].</td>
</tr>
<tr>
<td><tt>isError = readFile (fileName);<br>
if (!isError) {<br>
&nbsp; :<br>
}<br>
else {<br>
&nbsp; :<br>
}</tt></td>
</tr>
<tr>
<td class="rationale">Makes sure that the exceptions don't obscure
the normal path of execution. This is important for both the
readability and performance.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">63. The conditional should be put on a separate
line.</td>
</tr>
<tr>
<td><tt>if
(isDone)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; // NOT:&nbsp; if (isDone) doCleanup();<br>
&nbsp; doCleanup();</tt></td>
</tr>
<tr>
<td class="rationale">This is for debugging purposes. When writing
on a single line, it is not apparent whether the test is really
true or not.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">64. Executable statements in conditionals must be
avoided.</td>
</tr>
<tr>
<td><tt>// Bad!<br>
if (!(fileHandle = open (fileName, "w"))) {<br>
&nbsp; :<br>
}<br>
<br>
// Better!<br>
fileHandle = open (fileName, "w");<br>
if (!fileHandle) {<br>
&nbsp; :<br>
}<br></tt></td>
</tr>
<tr>
<td class="rationale">Conditionals with executable statements are
just very difficult to read. This is especially true for
programmers new to C/C++.</td>
</tr>
</table>
<h3><a name="Misc" id="Misc"></a>5.5 Miscellaneous</h3>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">65. The use of magic numbers in the code should
be avoided. Numbers other than <em>0</em> and <em>1</em> should be
considered declared as named constants instead.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">If the number does not have an obvious
meaning by itself, the readability is enhanced by introducing a
named constant instead. A different approach is to introduce a
method from which the constant can be accessed.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">66. Functions must always have the return value
explicitly listed.</td>
</tr>
<tr>
<td><tt>int getValue() &nbsp; &nbsp; // NOT: getValue()<br>
{<br>
&nbsp; :<br>
}<br></tt></td>
</tr>
<tr>
<td class="rationale">If not explicitly listed, C++ implies
<tt>int</tt> return value for functions. A programmer must never
rely on this feature, since this might be confusing for programmers
not aware of this artifact.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">67. <tt>goto</tt> should not be used.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">Goto statements violates the idea of
structured code. Only in some very few cases (for instance breaking
out of deeply nested structures) should goto be considered, and
only if the alternative structured counterpart is proven to be less
readable.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">68. "0" should be used instead of "NULL".</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale"><tt>NULL</tt> is part of the standard C
library, but is made obsolete in C++.</td>
</tr>
</table>
<br>
<br>
<br>
<h2><a name="Layout and Comments" id="LayoutAndComments"></a>6
Layout and Comments</h2>
<h3><a name="Layout" id="Layout"></a>6.1 Layout</h3>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">69. Basic indentation should be 4, can be 2 or
3.</td>
</tr>
<tr>
<td><tt>for (i = 0; i &lt; nElements; i++)<br>
&nbsp; a[i] = 0;</tt></td>
</tr>
<tr>
<td class="rationale">Indentation of 1 is to small to emphasize the
logical layout of the code. Indentation larger than 4 makes deeply
nested code difficult to read and increase the chance that the
lines must be split. Choosing between indentation of 2, 3 and
4,&nbsp; 2 and 4 are the more common, and 2 chosen to reduce the
chance of splitting code lines.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom" colspan="3">70. Block layout should be as
illustrated in example 1 below (recommended) or example 2, and must
not be as shown in example 3.</td>
</tr>
<tr>
<td width="33%"><tt>while (!done) {<br>
&nbsp; doSomething();<br>
&nbsp; done = moreToDo();<br>
}<br></tt></td>
<td width="33%"><tt>while (!done)<br>
{<br>
&nbsp; doSomething();<br>
&nbsp; done = moreToDo();<br>
}<br></tt></td>
<td><tt>while (!done)<br>
&nbsp; {<br>
&nbsp;&nbsp;&nbsp; doSomething();<br>
&nbsp;&nbsp;&nbsp; done = moreToDo();<br>
&nbsp; }<br></tt></td>
</tr>
<tr>
<td colspan="3" class="rationale">Example 3 introduce an extra
indentation level which doesn't emphasize the logical structure of
the code as clearly as example 1 and 2.&nbsp;</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">71. The <tt>class</tt> declarations should have
the following form:</td>
</tr>
<tr>
<td><tt>class SomeClass : public BaseClass<br>
{<br>
&nbsp; public:<br>
&nbsp; &nbsp; ...<br>
&nbsp; protected:<br>
&nbsp; &nbsp; ...<br>
&nbsp; private:<br>
&nbsp; &nbsp; ...<br>
}<br></tt></td>
</tr>
<tr>
<td class="rationale">This follows partly from the general block
rule above.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">72. The function declarations should have the
following form:</td>
</tr>
<tr>
<td><tt>void someMethod()<br>
{<br>
&nbsp; ...<br>
}<br></tt></td>
</tr>
<tr>
<td class="rationale">This follows from the general block rule
above.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">73. The <tt>if-else</tt> class of statements
should have the following form:</td>
</tr>
<tr>
<td><tt>if (condition) {<br>
&nbsp; statements;<br>
} else {<br>
&nbsp; statements;<br>
}<br>
<br>
if (condition) {<br>
&nbsp; statements;<br>
}<br>
<br>
if (condition) {<br>
&nbsp; statements;<br>
}<br>
else {<br>
&nbsp; statements;<br>
}<br>
<br>
if (condition) {<br>
&nbsp; statements;<br>
}<br>
else if (condition) {<br>
&nbsp; statements;<br>
}<br>
else {<br>
&nbsp; statements;<br>
}<br></tt></td>
</tr>
<tr>
<td class="rationale">The first approach is equivalent to the Sun
recommendation. The others approaches follow partly from the
general block rule above and should make it easier to manipulate
the statement, for instance when moving <tt>else</tt> clauses
around.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">74. A <tt>for</tt> statement should have the
following form:</td>
</tr>
<tr>
<td><tt>for (initialization; condition; update) {<br>
&nbsp; statements;<br>
}<br></tt></td>
</tr>
<tr>
<td class="rationale">This follows from the general block rule
above.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">75. An empty <tt>for</tt> statement should have
the following form:</td>
</tr>
<tr>
<td><tt>for (initialization; condition; update)<br>
&nbsp; ;</tt></td>
</tr>
<tr>
<td class="rationale">This emphasize the fact that the for
statement is empty and it makes it obvious for the reader that this
is intentional. Empty loops should be avoided however.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">76. A <tt>while</tt> statement should have the
following form:</td>
</tr>
<tr>
<td><tt>while (condition) {<br>
&nbsp; statements;<br>
}<br></tt></td>
</tr>
<tr>
<td class="rationale">This follows from the general block rule
above.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">77. A <tt>do-while</tt> statement should have the
following form:</td>
</tr>
<tr>
<td><tt>do {<br>
&nbsp; statements;<br>
} while (condition);<br></tt></td>
</tr>
<tr>
<td class="rationale">This follows from the general block rule
above.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">78. A <tt>switch</tt> statement should have the
following form:</td>
</tr>
<tr>
<td><tt>switch (condition) {<br>
&nbsp; case ABC :<br>
&nbsp; &nbsp; statements;<br>
&nbsp; &nbsp; // Fallthrough<br>
<br>
&nbsp; case DEF :<br>
&nbsp; &nbsp; statements;<br>
&nbsp; &nbsp; break;<br>
<br>
&nbsp; case XYZ :<br>
&nbsp; &nbsp; statements;<br>
&nbsp; &nbsp; break;<br>
<br>
&nbsp; default :<br>
&nbsp; &nbsp; statements;<br>
&nbsp; &nbsp; break;<br>
}<br></tt></td>
</tr>
<tr>
<td class="rationale">Note that each <tt>case</tt> keyword is
indented relative to the switch statement as a whole. This makes
the entire switch statement stand out. Note also the extra space
before the <em>:</em> character. The explicit <em>Fallthrough</em>
comment should be included whenever there is a case statement
without a <tt>break</tt> statement. Leaving the <tt>break</tt> out
is a common error, and it must be made clear that it is intentional
when it is not there.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">79. A <tt>try-catch</tt> statement should have
the following form:</td>
</tr>
<tr>
<td><tt>try {<br>
&nbsp; statements;<br>
}<br>
catch (Exception exception) {<br>
&nbsp; statements;<br>
}<br></tt></td>
</tr>
<tr>
<td class="rationale">This follows partly from the general block
rule above. The discussion about closing brackets for
<tt>if-else</tt> statements apply to the <tt>try-catch</tt>
statements.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">80. Single statement <tt>if-else</tt>,
<tt>for</tt> or <tt>while</tt> statements can be written without
brackets.</td>
</tr>
<tr>
<td><tt>if (condition)<br>
&nbsp; statement;<br>
<br>
while (condition)<br>
&nbsp; statement;<br>
<br>
for (initialization; condition; update)<br>
&nbsp; statement;<br>
<br></tt></td>
</tr>
<tr>
<td class="rationale">It is a common recommendation (Sun Java
recommendation included) that brackets should always be used in all
these cases. However, brackets are in general a language construct
that groups several statements. Brackets are per definition
superfluous on a single statement.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">81. The function return type can be put in the
left column immediately above the function name.</td>
</tr>
<tr>
<td><tt>void<br>
MyClass::myMethod (void)<br>
{<br>
&nbsp; :<br>
}</tt></td>
</tr>
<tr>
<td class="rationale">This makes it easier to spot function names
within a file since one can assume that they all start in the first
column.</td>
</tr>
</table>
<h3><a name="White Space" id="WhiteSpace"></a>6.2 White Space</h3>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">82.<br>
- Conventional operators should be surrounded by a space
character.<br>
- C++ reserved words should be followed by a white space.<br>
- Commas should be followed by a white space.<br>
- Colons should be surrounded by white space.<br>
- Semicolons in for statements should be followed by a space
character.</td>
</tr>
<tr>
<td><tt>a = (b + c) *
d;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// NOT:&nbsp;&nbsp; a=(b+c)*d<br>
while (true)
{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// NOT:&nbsp;&nbsp; while(true) ...<br>
doSomething (a, b, c, d);&nbsp;&nbsp; // NOT:&nbsp;&nbsp;
doSomething (a,b,c,d);<br>
case 100
:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; // NOT:&nbsp;&nbsp; case 100:<br>
for (i = 0; i &lt; 10; i++) {&nbsp; // NOT:&nbsp;&nbsp; for
(i=0;i&lt;10;i++){</tt></td>
</tr>
<tr>
<td class="rationale">Makes the individual components of the
statements stand out. Enhances readability. It is difficult to give
a complete list of the suggested use of whitespace in C++ code. The
examples above however should give a general idea of the
intentions.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">83. Method names should not be followed by a
white space when it is followed by another name.</td>
</tr>
<tr>
<td><tt>doSomething(currentFile);&nbsp;&nbsp;&nbsp; //
NOT:&nbsp;&nbsp; doSomething (currentFile);</tt></td>
</tr>
<tr>
<td class="rationale">We like it this way.<br>
<br></td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">84. Logical units within a block should be
separated by one blank line.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">Enhance readability by introducing white
space between logical units of a block.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">85. Methods should be separated by three blank
lines.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">By making the space larger than space within
a method, the methods will stand out within the file.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">86. Variables in declarations should be left
aligned.</td>
</tr>
<tr>
<td><tt>AsciiFile&nbsp; *file;<br>
int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nPoints;<br>
float&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x, y;</tt></td>
</tr>
<tr>
<td class="rationale">Enhance readability. The variables are easier
to spot from the types by alignment.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">87. Use alignment wherever it enhances
readability. Argument lists should have stacked arguments.</td>
</tr>
<tr>
<td><tt>if&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (a ==
lowValue)&nbsp;&nbsp;&nbsp; computeSomething();<br>
else if (a == mediumValue) computeSomethingElse();<br>
else if (a == highValue)&nbsp;&nbsp; computeSomethingElseYet();<br>
<br>
<br>
runThisRoutine(int numNodes,<br>
int numElements,<br>
double* coordinateList,<br>
int* connectivityList) {<br>
blah blah<br>
}<br>
<br>
<br>
value = (potential&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; *
oilDensity)&nbsp;&nbsp; / constant1 +<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
(depth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
* waterDensity) / constant2 +<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (zCoordinateValue *
gasDensity)&nbsp;&nbsp; / constant3;<br>
<br>
<br>
minPosition&nbsp;&nbsp;&nbsp;&nbsp; = computeDistance
(min,&nbsp;&nbsp;&nbsp;&nbsp; x, y, z);<br>
averagePosition = computeDistance (average, x, y, z);<br>
<br>
<br>
switch (value) {<br>
&nbsp; case PHASE_OIL&nbsp;&nbsp; : strcpy (string,
"Oil");&nbsp;&nbsp; break;<br>
&nbsp; case PHASE_WATER : strcpy (string, "Water"); break;<br>
&nbsp; case PHASE_GAS&nbsp;&nbsp; : strcpy (string,
"Gas");&nbsp;&nbsp; break;<br>
}</tt></td>
</tr>
<tr>
<td class="rationale">There are a number of places in the code
where white space can be included to enhance readability even if
this violates common guidelines. Many of these cases have to do
with code alignment. General guidelines on code alignment are
difficult to give, but the examples above should give a general
clue.</td>
</tr>
</table>
<h3><a name="Comments" id="Comments"></a>6.3 Comments</h3>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">88. Tricky code should not be commented but
rewritten!</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">In general, the use of comments should be
minimized by making the code self-documenting by appropriate name
choices and an explicit logical structure.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">89. All comments should be written in
English.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">In an international environment English is
the preferred language.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">90. Comments should be included relative to their
position in the code.</td>
</tr>
<tr>
<td><tt>while (true)
{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
NOT:&nbsp;&nbsp;&nbsp; while (true) {<br>
&nbsp; // Do something&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Do
something<br>
&nbsp;
something();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
something();<br>
}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</tt></td>
</tr>
<tr>
<td class="rationale">This is to avoid that the comments break the
logical structure of the program.</td>
</tr>
</table>
<!--
****************************************************************************
   Rule
****************************************************************************
-->
<table summary="" class="rule" border width="100%">
<tr>
<td class="recom">91. Add Doxygen documentation comments.</td>
</tr>
<tr>
<td></td>
</tr>
<tr>
<td class="rationale">Doxygen (<a href=
"http://www.stack.nl/~dimitri/doxygen/">http://www.stack.nl/~dimitri/doxygen/</a>)
is a tool for extracting comments and produce high quality
hypertext documentation from it.</td>
</tr>
</table>

</div>

<div class="footer">
<!--#include virtual="footer.inc"-->
</div>

</div>

</body>
</html>
