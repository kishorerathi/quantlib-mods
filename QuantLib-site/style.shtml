<!--
 $Id$
-->
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en">
<head>
<!--#include virtual="qlmeta.inc"-->
<meta name="author" content="Luigi Ballabio">
<meta name="copyright" content="Luigi Ballabio (c) 2007">
<meta name="description" content="QuantLib Style Guidelines">
<title>QuantLib Style Guidelines</title>
</head>
<body>
<div id="container">
<!--#include virtual="header.inc"-->
<div id="menu">
<!--#include virtual="devmenu.inc"-->
</div>
<div id="content">

<h1 class="center">QuantLib Style Guidelines</h1>

The standard style for QuantLib code is shown in the following
listing.  You can write in your own style if you don't feel
comfortable with this one; however, keep in mind that consistency
would enhance readability for developers accustomed to the existing
body of code.  Also, there should be no real tabs in the code; four
spaces should be used instead.  If you don't follow this convention,
other developers are likely to see your code with the wrong
indentation.

<div class="fragment"><pre class="fragment">
#define SOME_MACRO                            // all uppercase

typedef double SomeType;                      // camelcase, starting capital

class SomeClass {                             // camelcase, starting capital
  public:
    typedef Real* iterator;                   // keep consistency with
    typedef const Real* const_iterator;       // STL conventions
};

class AnotherClass {
  public:
    void method();
    Real anotherMethod(Real x, Real y) const; // camelcase, starting lowercase
    Real member() const;                      // getter, no ``get''
    void setMember(Real);                     // setter
  private:
    Real member_;                             // camelcase, starting lowercase,
    Integer anotherMember_;                   // trailing underscore
};

struct SomeStruct {
    Real foo;                                 // struct members:
    Integer bar;                              // no trailing underscore
};

Size someFunction(Real parameter,             // one parameter per line,
                  Real anotherParameter) {    // camelcase, starting lowercase
    Real localVariable = 0.0;
    if (condition) {                          // brackets here...
        localVariable += 3.14159;
    } else {                                  // ...here...
        localVariable -= 2.71828;
    }                                         // ...and here.
    return 42;
}
</pre></div>
</div>

<div class="footer">
<!--#include virtual="footer.inc"-->
</div>

</div>

</body>
</html>
